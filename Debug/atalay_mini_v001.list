
atalay_mini_v001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006584  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08006698  08006698  00016698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006780  08006780  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006780  08006780  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006780  08006780  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006780  08006780  00016780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006784  08006784  00016784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006788  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ac4  20000010  08006798  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ad4  08006798  00021ad4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ac0  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d80  00000000  00000000  00038af9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013c8  00000000  00000000  0003b880  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012a8  00000000  00000000  0003cc48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000189c0  00000000  00000000  0003def0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000100a2  00000000  00000000  000568b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093b44  00000000  00000000  00066952  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fa496  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005728  00000000  00000000  000fa514  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	0800667c 	.word	0x0800667c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	0800667c 	.word	0x0800667c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_frsub>:
 8000a4c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a50:	e002      	b.n	8000a58 <__addsf3>
 8000a52:	bf00      	nop

08000a54 <__aeabi_fsub>:
 8000a54:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a58 <__addsf3>:
 8000a58:	0042      	lsls	r2, r0, #1
 8000a5a:	bf1f      	itttt	ne
 8000a5c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a60:	ea92 0f03 	teqne	r2, r3
 8000a64:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a68:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a6c:	d06a      	beq.n	8000b44 <__addsf3+0xec>
 8000a6e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a72:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a76:	bfc1      	itttt	gt
 8000a78:	18d2      	addgt	r2, r2, r3
 8000a7a:	4041      	eorgt	r1, r0
 8000a7c:	4048      	eorgt	r0, r1
 8000a7e:	4041      	eorgt	r1, r0
 8000a80:	bfb8      	it	lt
 8000a82:	425b      	neglt	r3, r3
 8000a84:	2b19      	cmp	r3, #25
 8000a86:	bf88      	it	hi
 8000a88:	4770      	bxhi	lr
 8000a8a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aa2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aa6:	bf18      	it	ne
 8000aa8:	4249      	negne	r1, r1
 8000aaa:	ea92 0f03 	teq	r2, r3
 8000aae:	d03f      	beq.n	8000b30 <__addsf3+0xd8>
 8000ab0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ab4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ab8:	eb10 000c 	adds.w	r0, r0, ip
 8000abc:	f1c3 0320 	rsb	r3, r3, #32
 8000ac0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ac4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ac8:	d502      	bpl.n	8000ad0 <__addsf3+0x78>
 8000aca:	4249      	negs	r1, r1
 8000acc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ad0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ad4:	d313      	bcc.n	8000afe <__addsf3+0xa6>
 8000ad6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ada:	d306      	bcc.n	8000aea <__addsf3+0x92>
 8000adc:	0840      	lsrs	r0, r0, #1
 8000ade:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ae2:	f102 0201 	add.w	r2, r2, #1
 8000ae6:	2afe      	cmp	r2, #254	; 0xfe
 8000ae8:	d251      	bcs.n	8000b8e <__addsf3+0x136>
 8000aea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000af2:	bf08      	it	eq
 8000af4:	f020 0001 	biceq.w	r0, r0, #1
 8000af8:	ea40 0003 	orr.w	r0, r0, r3
 8000afc:	4770      	bx	lr
 8000afe:	0049      	lsls	r1, r1, #1
 8000b00:	eb40 0000 	adc.w	r0, r0, r0
 8000b04:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b08:	f1a2 0201 	sub.w	r2, r2, #1
 8000b0c:	d1ed      	bne.n	8000aea <__addsf3+0x92>
 8000b0e:	fab0 fc80 	clz	ip, r0
 8000b12:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b16:	ebb2 020c 	subs.w	r2, r2, ip
 8000b1a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b1e:	bfaa      	itet	ge
 8000b20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b24:	4252      	neglt	r2, r2
 8000b26:	4318      	orrge	r0, r3
 8000b28:	bfbc      	itt	lt
 8000b2a:	40d0      	lsrlt	r0, r2
 8000b2c:	4318      	orrlt	r0, r3
 8000b2e:	4770      	bx	lr
 8000b30:	f092 0f00 	teq	r2, #0
 8000b34:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b38:	bf06      	itte	eq
 8000b3a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b3e:	3201      	addeq	r2, #1
 8000b40:	3b01      	subne	r3, #1
 8000b42:	e7b5      	b.n	8000ab0 <__addsf3+0x58>
 8000b44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b4c:	bf18      	it	ne
 8000b4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b52:	d021      	beq.n	8000b98 <__addsf3+0x140>
 8000b54:	ea92 0f03 	teq	r2, r3
 8000b58:	d004      	beq.n	8000b64 <__addsf3+0x10c>
 8000b5a:	f092 0f00 	teq	r2, #0
 8000b5e:	bf08      	it	eq
 8000b60:	4608      	moveq	r0, r1
 8000b62:	4770      	bx	lr
 8000b64:	ea90 0f01 	teq	r0, r1
 8000b68:	bf1c      	itt	ne
 8000b6a:	2000      	movne	r0, #0
 8000b6c:	4770      	bxne	lr
 8000b6e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b72:	d104      	bne.n	8000b7e <__addsf3+0x126>
 8000b74:	0040      	lsls	r0, r0, #1
 8000b76:	bf28      	it	cs
 8000b78:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b7c:	4770      	bx	lr
 8000b7e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b82:	bf3c      	itt	cc
 8000b84:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b88:	4770      	bxcc	lr
 8000b8a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b8e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	4770      	bx	lr
 8000b98:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b9c:	bf16      	itet	ne
 8000b9e:	4608      	movne	r0, r1
 8000ba0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ba4:	4601      	movne	r1, r0
 8000ba6:	0242      	lsls	r2, r0, #9
 8000ba8:	bf06      	itte	eq
 8000baa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bae:	ea90 0f01 	teqeq	r0, r1
 8000bb2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_ui2f>:
 8000bb8:	f04f 0300 	mov.w	r3, #0
 8000bbc:	e004      	b.n	8000bc8 <__aeabi_i2f+0x8>
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_i2f>:
 8000bc0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bc4:	bf48      	it	mi
 8000bc6:	4240      	negmi	r0, r0
 8000bc8:	ea5f 0c00 	movs.w	ip, r0
 8000bcc:	bf08      	it	eq
 8000bce:	4770      	bxeq	lr
 8000bd0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bd4:	4601      	mov	r1, r0
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	e01c      	b.n	8000c16 <__aeabi_l2f+0x2a>

08000bdc <__aeabi_ul2f>:
 8000bdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000be0:	bf08      	it	eq
 8000be2:	4770      	bxeq	lr
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	e00a      	b.n	8000c00 <__aeabi_l2f+0x14>
 8000bea:	bf00      	nop

08000bec <__aeabi_l2f>:
 8000bec:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf0:	bf08      	it	eq
 8000bf2:	4770      	bxeq	lr
 8000bf4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__aeabi_l2f+0x14>
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c00:	ea5f 0c01 	movs.w	ip, r1
 8000c04:	bf02      	ittt	eq
 8000c06:	4684      	moveq	ip, r0
 8000c08:	4601      	moveq	r1, r0
 8000c0a:	2000      	moveq	r0, #0
 8000c0c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c10:	bf08      	it	eq
 8000c12:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c16:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c1a:	fabc f28c 	clz	r2, ip
 8000c1e:	3a08      	subs	r2, #8
 8000c20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c24:	db10      	blt.n	8000c48 <__aeabi_l2f+0x5c>
 8000c26:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c30:	f1c2 0220 	rsb	r2, r2, #32
 8000c34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c38:	fa20 f202 	lsr.w	r2, r0, r2
 8000c3c:	eb43 0002 	adc.w	r0, r3, r2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f102 0220 	add.w	r2, r2, #32
 8000c4c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c50:	f1c2 0220 	rsb	r2, r2, #32
 8000c54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c58:	fa21 f202 	lsr.w	r2, r1, r2
 8000c5c:	eb43 0002 	adc.w	r0, r3, r2
 8000c60:	bf08      	it	eq
 8000c62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c66:	4770      	bx	lr

08000c68 <__gesf2>:
 8000c68:	f04f 3cff 	mov.w	ip, #4294967295
 8000c6c:	e006      	b.n	8000c7c <__cmpsf2+0x4>
 8000c6e:	bf00      	nop

08000c70 <__lesf2>:
 8000c70:	f04f 0c01 	mov.w	ip, #1
 8000c74:	e002      	b.n	8000c7c <__cmpsf2+0x4>
 8000c76:	bf00      	nop

08000c78 <__cmpsf2>:
 8000c78:	f04f 0c01 	mov.w	ip, #1
 8000c7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c8c:	bf18      	it	ne
 8000c8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c92:	d011      	beq.n	8000cb8 <__cmpsf2+0x40>
 8000c94:	b001      	add	sp, #4
 8000c96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c9a:	bf18      	it	ne
 8000c9c:	ea90 0f01 	teqne	r0, r1
 8000ca0:	bf58      	it	pl
 8000ca2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ca6:	bf88      	it	hi
 8000ca8:	17c8      	asrhi	r0, r1, #31
 8000caa:	bf38      	it	cc
 8000cac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cb0:	bf18      	it	ne
 8000cb2:	f040 0001 	orrne.w	r0, r0, #1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cbc:	d102      	bne.n	8000cc4 <__cmpsf2+0x4c>
 8000cbe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cc2:	d105      	bne.n	8000cd0 <__cmpsf2+0x58>
 8000cc4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000cc8:	d1e4      	bne.n	8000c94 <__cmpsf2+0x1c>
 8000cca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000cce:	d0e1      	beq.n	8000c94 <__cmpsf2+0x1c>
 8000cd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_cfrcmple>:
 8000cd8:	4684      	mov	ip, r0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	4661      	mov	r1, ip
 8000cde:	e7ff      	b.n	8000ce0 <__aeabi_cfcmpeq>

08000ce0 <__aeabi_cfcmpeq>:
 8000ce0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ce2:	f7ff ffc9 	bl	8000c78 <__cmpsf2>
 8000ce6:	2800      	cmp	r0, #0
 8000ce8:	bf48      	it	mi
 8000cea:	f110 0f00 	cmnmi.w	r0, #0
 8000cee:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000cf0 <__aeabi_fcmpeq>:
 8000cf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cf4:	f7ff fff4 	bl	8000ce0 <__aeabi_cfcmpeq>
 8000cf8:	bf0c      	ite	eq
 8000cfa:	2001      	moveq	r0, #1
 8000cfc:	2000      	movne	r0, #0
 8000cfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d02:	bf00      	nop

08000d04 <__aeabi_fcmplt>:
 8000d04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d08:	f7ff ffea 	bl	8000ce0 <__aeabi_cfcmpeq>
 8000d0c:	bf34      	ite	cc
 8000d0e:	2001      	movcc	r0, #1
 8000d10:	2000      	movcs	r0, #0
 8000d12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d16:	bf00      	nop

08000d18 <__aeabi_fcmple>:
 8000d18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d1c:	f7ff ffe0 	bl	8000ce0 <__aeabi_cfcmpeq>
 8000d20:	bf94      	ite	ls
 8000d22:	2001      	movls	r0, #1
 8000d24:	2000      	movhi	r0, #0
 8000d26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d2a:	bf00      	nop

08000d2c <__aeabi_fcmpge>:
 8000d2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d30:	f7ff ffd2 	bl	8000cd8 <__aeabi_cfrcmple>
 8000d34:	bf94      	ite	ls
 8000d36:	2001      	movls	r0, #1
 8000d38:	2000      	movhi	r0, #0
 8000d3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3e:	bf00      	nop

08000d40 <__aeabi_fcmpgt>:
 8000d40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d44:	f7ff ffc8 	bl	8000cd8 <__aeabi_cfrcmple>
 8000d48:	bf34      	ite	cc
 8000d4a:	2001      	movcc	r0, #1
 8000d4c:	2000      	movcs	r0, #0
 8000d4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d52:	bf00      	nop

08000d54 <mpu9250ReadReg>:
	
  HAL_I2C_Master_Transmit(&hi2c1, chipAddr, data, 2, 100);
  return 1;
}

int mpu9250ReadReg( uint8_t regAddr, uint8_t *regVal , uint16_t count) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af02      	add	r7, sp, #8
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
 8000d60:	4613      	mov	r3, r2
 8000d62:	80bb      	strh	r3, [r7, #4]
  HAL_I2C_Master_Transmit(&hi2c1, chipAddr, &regAddr, 1, 100);
 8000d64:	1dfa      	adds	r2, r7, #7
 8000d66:	2364      	movs	r3, #100	; 0x64
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	21d0      	movs	r1, #208	; 0xd0
 8000d6e:	4808      	ldr	r0, [pc, #32]	; (8000d90 <mpu9250ReadReg+0x3c>)
 8000d70:	f001 f82a 	bl	8001dc8 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, chipAddr, regVal, count, 100);
 8000d74:	88ba      	ldrh	r2, [r7, #4]
 8000d76:	2364      	movs	r3, #100	; 0x64
 8000d78:	9300      	str	r3, [sp, #0]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	683a      	ldr	r2, [r7, #0]
 8000d7e:	21d0      	movs	r1, #208	; 0xd0
 8000d80:	4803      	ldr	r0, [pc, #12]	; (8000d90 <mpu9250ReadReg+0x3c>)
 8000d82:	f001 f91f 	bl	8001fc4 <HAL_I2C_Master_Receive>
  return 1;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20001978 	.word	0x20001978

08000d94 <readRegisters>:

int readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	603a      	str	r2, [r7, #0]
 8000d9e:	71fb      	strb	r3, [r7, #7]
 8000da0:	460b      	mov	r3, r1
 8000da2:	71bb      	strb	r3, [r7, #6]
  
	  mpu9250ReadReg( subAddress,  dest , count);
 8000da4:	79bb      	ldrb	r3, [r7, #6]
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	6839      	ldr	r1, [r7, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ffd1 	bl	8000d54 <mpu9250ReadReg>
   
      return 1;
 8000db2:	2301      	movs	r3, #1
    }
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	0000      	movs	r0, r0
	...

08000dc0 <mpuReadSensor>:
  // successful init, return 1
  return 1;
}


int mpuReadSensor(struct mpuSensorData *data) {
 8000dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 //  grab the data from the MPU9250
  if (readRegisters(ACCEL_OUT, 21, _buffer) < 0) {
 8000dca:	233b      	movs	r3, #59	; 0x3b
 8000dcc:	4a72      	ldr	r2, [pc, #456]	; (8000f98 <mpuReadSensor+0x1d8>)
 8000dce:	2115      	movs	r1, #21
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ffdf 	bl	8000d94 <readRegisters>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	da02      	bge.n	8000de2 <mpuReadSensor+0x22>
    return -1;
 8000ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8000de0:	e0cc      	b.n	8000f7c <mpuReadSensor+0x1bc>
  }
	
  // combine into 16 bit values
	data->ax = (((int16_t)_buffer[0]) << 8)  | _buffer[1];  
 8000de2:	4b6d      	ldr	r3, [pc, #436]	; (8000f98 <mpuReadSensor+0x1d8>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	b21a      	sxth	r2, r3
 8000dea:	4b6b      	ldr	r3, [pc, #428]	; (8000f98 <mpuReadSensor+0x1d8>)
 8000dec:	785b      	ldrb	r3, [r3, #1]
 8000dee:	b21b      	sxth	r3, r3
 8000df0:	4313      	orrs	r3, r2
 8000df2:	b21a      	sxth	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	801a      	strh	r2, [r3, #0]
  data->ay = (((int16_t)_buffer[2]) << 8)  | _buffer[3];
 8000df8:	4b67      	ldr	r3, [pc, #412]	; (8000f98 <mpuReadSensor+0x1d8>)
 8000dfa:	789b      	ldrb	r3, [r3, #2]
 8000dfc:	021b      	lsls	r3, r3, #8
 8000dfe:	b21a      	sxth	r2, r3
 8000e00:	4b65      	ldr	r3, [pc, #404]	; (8000f98 <mpuReadSensor+0x1d8>)
 8000e02:	78db      	ldrb	r3, [r3, #3]
 8000e04:	b21b      	sxth	r3, r3
 8000e06:	4313      	orrs	r3, r2
 8000e08:	b21a      	sxth	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	805a      	strh	r2, [r3, #2]
  data->az = (((int16_t)_buffer[4]) << 8)  | _buffer[5];
 8000e0e:	4b62      	ldr	r3, [pc, #392]	; (8000f98 <mpuReadSensor+0x1d8>)
 8000e10:	791b      	ldrb	r3, [r3, #4]
 8000e12:	021b      	lsls	r3, r3, #8
 8000e14:	b21a      	sxth	r2, r3
 8000e16:	4b60      	ldr	r3, [pc, #384]	; (8000f98 <mpuReadSensor+0x1d8>)
 8000e18:	795b      	ldrb	r3, [r3, #5]
 8000e1a:	b21b      	sxth	r3, r3
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	b21a      	sxth	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	809a      	strh	r2, [r3, #4]
  data->t =  (((int16_t)_buffer[6]) << 8)  | _buffer[7];
 8000e24:	4b5c      	ldr	r3, [pc, #368]	; (8000f98 <mpuReadSensor+0x1d8>)
 8000e26:	799b      	ldrb	r3, [r3, #6]
 8000e28:	021b      	lsls	r3, r3, #8
 8000e2a:	b21a      	sxth	r2, r3
 8000e2c:	4b5a      	ldr	r3, [pc, #360]	; (8000f98 <mpuReadSensor+0x1d8>)
 8000e2e:	79db      	ldrb	r3, [r3, #7]
 8000e30:	b21b      	sxth	r3, r3
 8000e32:	4313      	orrs	r3, r2
 8000e34:	b21a      	sxth	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	825a      	strh	r2, [r3, #18]
  data->gx = (((int16_t)_buffer[8]) << 8)  | _buffer[9];
 8000e3a:	4b57      	ldr	r3, [pc, #348]	; (8000f98 <mpuReadSensor+0x1d8>)
 8000e3c:	7a1b      	ldrb	r3, [r3, #8]
 8000e3e:	021b      	lsls	r3, r3, #8
 8000e40:	b21a      	sxth	r2, r3
 8000e42:	4b55      	ldr	r3, [pc, #340]	; (8000f98 <mpuReadSensor+0x1d8>)
 8000e44:	7a5b      	ldrb	r3, [r3, #9]
 8000e46:	b21b      	sxth	r3, r3
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	b21a      	sxth	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	80da      	strh	r2, [r3, #6]
  data->gy = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8000e50:	4b51      	ldr	r3, [pc, #324]	; (8000f98 <mpuReadSensor+0x1d8>)
 8000e52:	7a9b      	ldrb	r3, [r3, #10]
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	b21a      	sxth	r2, r3
 8000e58:	4b4f      	ldr	r3, [pc, #316]	; (8000f98 <mpuReadSensor+0x1d8>)
 8000e5a:	7adb      	ldrb	r3, [r3, #11]
 8000e5c:	b21b      	sxth	r3, r3
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	b21a      	sxth	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	811a      	strh	r2, [r3, #8]
  data->gz = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 8000e66:	4b4c      	ldr	r3, [pc, #304]	; (8000f98 <mpuReadSensor+0x1d8>)
 8000e68:	7b1b      	ldrb	r3, [r3, #12]
 8000e6a:	021b      	lsls	r3, r3, #8
 8000e6c:	b21a      	sxth	r2, r3
 8000e6e:	4b4a      	ldr	r3, [pc, #296]	; (8000f98 <mpuReadSensor+0x1d8>)
 8000e70:	7b5b      	ldrb	r3, [r3, #13]
 8000e72:	b21b      	sxth	r3, r3
 8000e74:	4313      	orrs	r3, r2
 8000e76:	b21a      	sxth	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	815a      	strh	r2, [r3, #10]
  data->hx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 8000e7c:	4b46      	ldr	r3, [pc, #280]	; (8000f98 <mpuReadSensor+0x1d8>)
 8000e7e:	7bdb      	ldrb	r3, [r3, #15]
 8000e80:	021b      	lsls	r3, r3, #8
 8000e82:	b21a      	sxth	r2, r3
 8000e84:	4b44      	ldr	r3, [pc, #272]	; (8000f98 <mpuReadSensor+0x1d8>)
 8000e86:	7b9b      	ldrb	r3, [r3, #14]
 8000e88:	b21b      	sxth	r3, r3
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	b21a      	sxth	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	819a      	strh	r2, [r3, #12]
  data->hy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 8000e92:	4b41      	ldr	r3, [pc, #260]	; (8000f98 <mpuReadSensor+0x1d8>)
 8000e94:	7c5b      	ldrb	r3, [r3, #17]
 8000e96:	021b      	lsls	r3, r3, #8
 8000e98:	b21a      	sxth	r2, r3
 8000e9a:	4b3f      	ldr	r3, [pc, #252]	; (8000f98 <mpuReadSensor+0x1d8>)
 8000e9c:	7c1b      	ldrb	r3, [r3, #16]
 8000e9e:	b21b      	sxth	r3, r3
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	b21a      	sxth	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	81da      	strh	r2, [r3, #14]
  data->hz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 8000ea8:	4b3b      	ldr	r3, [pc, #236]	; (8000f98 <mpuReadSensor+0x1d8>)
 8000eaa:	7cdb      	ldrb	r3, [r3, #19]
 8000eac:	021b      	lsls	r3, r3, #8
 8000eae:	b21a      	sxth	r2, r3
 8000eb0:	4b39      	ldr	r3, [pc, #228]	; (8000f98 <mpuReadSensor+0x1d8>)
 8000eb2:	7c9b      	ldrb	r3, [r3, #18]
 8000eb4:	b21b      	sxth	r3, r3
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	b21a      	sxth	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	821a      	strh	r2, [r3, #16]
	data->roll=((atan2(data->ay,data->az)*180)/M_PI)*-1;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fa95 	bl	80003f4 <__aeabi_i2d>
 8000eca:	4682      	mov	sl, r0
 8000ecc:	468b      	mov	fp, r1
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fa8d 	bl	80003f4 <__aeabi_i2d>
 8000eda:	4602      	mov	r2, r0
 8000edc:	460b      	mov	r3, r1
 8000ede:	4650      	mov	r0, sl
 8000ee0:	4659      	mov	r1, fp
 8000ee2:	f005 f95a 	bl	800619a <atan2>
 8000ee6:	f04f 0200 	mov.w	r2, #0
 8000eea:	4b2c      	ldr	r3, [pc, #176]	; (8000f9c <mpuReadSensor+0x1dc>)
 8000eec:	f7ff faec 	bl	80004c8 <__aeabi_dmul>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	4610      	mov	r0, r2
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	a323      	add	r3, pc, #140	; (adr r3, 8000f88 <mpuReadSensor+0x1c8>)
 8000efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efe:	f7ff fc0d 	bl	800071c <__aeabi_ddiv>
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	4690      	mov	r8, r2
 8000f08:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8000f0c:	4640      	mov	r0, r8
 8000f0e:	4649      	mov	r1, r9
 8000f10:	f7ff fd74 	bl	80009fc <__aeabi_d2iz>
 8000f14:	4603      	mov	r3, r0
 8000f16:	b21a      	sxth	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	829a      	strh	r2, [r3, #20]

	data->pitch=((atan2(data->ax,data->az)*180)/3.14)*-1;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fa66 	bl	80003f4 <__aeabi_i2d>
 8000f28:	4680      	mov	r8, r0
 8000f2a:	4689      	mov	r9, r1
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fa5e 	bl	80003f4 <__aeabi_i2d>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4640      	mov	r0, r8
 8000f3e:	4649      	mov	r1, r9
 8000f40:	f005 f92b 	bl	800619a <atan2>
 8000f44:	f04f 0200 	mov.w	r2, #0
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <mpuReadSensor+0x1dc>)
 8000f4a:	f7ff fabd 	bl	80004c8 <__aeabi_dmul>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	4610      	mov	r0, r2
 8000f54:	4619      	mov	r1, r3
 8000f56:	a30e      	add	r3, pc, #56	; (adr r3, 8000f90 <mpuReadSensor+0x1d0>)
 8000f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5c:	f7ff fbde 	bl	800071c <__aeabi_ddiv>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	4614      	mov	r4, r2
 8000f66:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000f6a:	4620      	mov	r0, r4
 8000f6c:	4629      	mov	r1, r5
 8000f6e:	f7ff fd45 	bl	80009fc <__aeabi_d2iz>
 8000f72:	4603      	mov	r3, r0
 8000f74:	b21a      	sxth	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	82da      	strh	r2, [r3, #22]
  return 1;
 8000f7a:	2301      	movs	r3, #1
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f86:	bf00      	nop
 8000f88:	54442d18 	.word	0x54442d18
 8000f8c:	400921fb 	.word	0x400921fb
 8000f90:	51eb851f 	.word	0x51eb851f
 8000f94:	40091eb8 	.word	0x40091eb8
 8000f98:	20001944 	.word	0x20001944
 8000f9c:	40668000 	.word	0x40668000

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa4:	f000 fb32 	bl	800160c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa8:	f000 f828 	bl	8000ffc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fac:	f000 f8c8 	bl	8001140 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fb0:	f000 f86a 	bl	8001088 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000fb4:	f000 f896 	bl	80010e4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fb8:	f002 fc20 	bl	80037fc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of BMP180 */
  BMP180Handle = osThreadNew(BMP180Start, NULL, &BMP180_attributes);
 8000fbc:	4a09      	ldr	r2, [pc, #36]	; (8000fe4 <main+0x44>)
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4809      	ldr	r0, [pc, #36]	; (8000fe8 <main+0x48>)
 8000fc2:	f002 fc81 	bl	80038c8 <osThreadNew>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <main+0x4c>)
 8000fca:	601a      	str	r2, [r3, #0]

  /* creation of MPU9250andADXL3 */
  MPU9250andADXL3Handle = osThreadNew(IMUsStart, NULL, &MPU9250andADXL3_attributes);
 8000fcc:	4a08      	ldr	r2, [pc, #32]	; (8000ff0 <main+0x50>)
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4808      	ldr	r0, [pc, #32]	; (8000ff4 <main+0x54>)
 8000fd2:	f002 fc79 	bl	80038c8 <osThreadNew>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <main+0x58>)
 8000fda:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000fdc:	f002 fc40 	bl	8003860 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <main+0x40>
 8000fe2:	bf00      	nop
 8000fe4:	080066dc 	.word	0x080066dc
 8000fe8:	080011ed 	.word	0x080011ed
 8000fec:	20001a3c 	.word	0x20001a3c
 8000ff0:	08006700 	.word	0x08006700
 8000ff4:	080011fd 	.word	0x080011fd
 8000ff8:	20001a2c 	.word	0x20001a2c

08000ffc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b090      	sub	sp, #64	; 0x40
 8001000:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001002:	f107 0318 	add.w	r3, r7, #24
 8001006:	2228      	movs	r2, #40	; 0x28
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f005 f8bd 	bl	800618a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
 800101c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800101e:	2301      	movs	r3, #1
 8001020:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001022:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001026:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800102c:	2301      	movs	r3, #1
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001030:	2302      	movs	r3, #2
 8001032:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001034:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001038:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800103a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800103e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001040:	f107 0318 	add.w	r3, r7, #24
 8001044:	4618      	mov	r0, r3
 8001046:	f001 fd43 	bl	8002ad0 <HAL_RCC_OscConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001050:	f000 f98e 	bl	8001370 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001054:	230f      	movs	r3, #15
 8001056:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001058:	2302      	movs	r3, #2
 800105a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001064:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2102      	movs	r1, #2
 800106e:	4618      	mov	r0, r3
 8001070:	f001 ffae 	bl	8002fd0 <HAL_RCC_ClockConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800107a:	f000 f979 	bl	8001370 <Error_Handler>
  }
}
 800107e:	bf00      	nop
 8001080:	3740      	adds	r7, #64	; 0x40
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <MX_I2C1_Init+0x50>)
 800108e:	4a13      	ldr	r2, [pc, #76]	; (80010dc <MX_I2C1_Init+0x54>)
 8001090:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_I2C1_Init+0x50>)
 8001094:	4a12      	ldr	r2, [pc, #72]	; (80010e0 <MX_I2C1_Init+0x58>)
 8001096:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_I2C1_Init+0x50>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_I2C1_Init+0x50>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_I2C1_Init+0x50>)
 80010a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <MX_I2C1_Init+0x50>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_I2C1_Init+0x50>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <MX_I2C1_Init+0x50>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_I2C1_Init+0x50>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c4:	4804      	ldr	r0, [pc, #16]	; (80010d8 <MX_I2C1_Init+0x50>)
 80010c6:	f000 fd47 	bl	8001b58 <HAL_I2C_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010d0:	f000 f94e 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20001978 	.word	0x20001978
 80010dc:	40005400 	.word	0x40005400
 80010e0:	00061a80 	.word	0x00061a80

080010e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <MX_I2C2_Init+0x50>)
 80010ea:	4a13      	ldr	r2, [pc, #76]	; (8001138 <MX_I2C2_Init+0x54>)
 80010ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_I2C2_Init+0x50>)
 80010f0:	4a12      	ldr	r2, [pc, #72]	; (800113c <MX_I2C2_Init+0x58>)
 80010f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_I2C2_Init+0x50>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_I2C2_Init+0x50>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_I2C2_Init+0x50>)
 8001102:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001106:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <MX_I2C2_Init+0x50>)
 800110a:	2200      	movs	r2, #0
 800110c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_I2C2_Init+0x50>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <MX_I2C2_Init+0x50>)
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_I2C2_Init+0x50>)
 800111c:	2200      	movs	r2, #0
 800111e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001120:	4804      	ldr	r0, [pc, #16]	; (8001134 <MX_I2C2_Init+0x50>)
 8001122:	f000 fd19 	bl	8001b58 <HAL_I2C_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800112c:	f000 f920 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200019cc 	.word	0x200019cc
 8001138:	40005800 	.word	0x40005800
 800113c:	00061a80 	.word	0x00061a80

08001140 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001154:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <MX_GPIO_Init+0xa4>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	4a22      	ldr	r2, [pc, #136]	; (80011e4 <MX_GPIO_Init+0xa4>)
 800115a:	f043 0310 	orr.w	r3, r3, #16
 800115e:	6193      	str	r3, [r2, #24]
 8001160:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <MX_GPIO_Init+0xa4>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	f003 0310 	and.w	r3, r3, #16
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <MX_GPIO_Init+0xa4>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	4a1c      	ldr	r2, [pc, #112]	; (80011e4 <MX_GPIO_Init+0xa4>)
 8001172:	f043 0320 	orr.w	r3, r3, #32
 8001176:	6193      	str	r3, [r2, #24]
 8001178:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_GPIO_Init+0xa4>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f003 0320 	and.w	r3, r3, #32
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <MX_GPIO_Init+0xa4>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a16      	ldr	r2, [pc, #88]	; (80011e4 <MX_GPIO_Init+0xa4>)
 800118a:	f043 0304 	orr.w	r3, r3, #4
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_GPIO_Init+0xa4>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_GPIO_Init+0xa4>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	4a10      	ldr	r2, [pc, #64]	; (80011e4 <MX_GPIO_Init+0xa4>)
 80011a2:	f043 0308 	orr.w	r3, r3, #8
 80011a6:	6193      	str	r3, [r2, #24]
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_GPIO_Init+0xa4>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f003 0308 	and.w	r3, r3, #8
 80011b0:	603b      	str	r3, [r7, #0]
 80011b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2190      	movs	r1, #144	; 0x90
 80011b8:	480b      	ldr	r0, [pc, #44]	; (80011e8 <MX_GPIO_Init+0xa8>)
 80011ba:	f000 fcb5 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 80011be:	2390      	movs	r3, #144	; 0x90
 80011c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c2:	2301      	movs	r3, #1
 80011c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2302      	movs	r3, #2
 80011cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ce:	f107 0310 	add.w	r3, r7, #16
 80011d2:	4619      	mov	r1, r3
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <MX_GPIO_Init+0xa8>)
 80011d6:	f000 fb4d 	bl	8001874 <HAL_GPIO_Init>

}
 80011da:	bf00      	nop
 80011dc:	3720      	adds	r7, #32
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40010800 	.word	0x40010800

080011ec <BMP180Start>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_BMP180Start */
void BMP180Start(void *argument)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011f4:	2001      	movs	r0, #1
 80011f6:	f002 fc11 	bl	8003a1c <osDelay>
 80011fa:	e7fb      	b.n	80011f4 <BMP180Start+0x8>

080011fc <IMUsStart>:
*/


/* USER CODE END Header_IMUsStart */
void IMUsStart(void *argument)
{
 80011fc:	b5b0      	push	{r4, r5, r7, lr}
 80011fe:	b0a8      	sub	sp, #160	; 0xa0
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
		};
		union{
		struct DPL Data;
		uint8_t buffer[24];
		}Packet;
		Packet.Data.h1 = 0x03;
 8001204:	2303      	movs	r3, #3
 8001206:	813b      	strh	r3, [r7, #8]
		Packet.Data.h2 = 0x03;
 8001208:	2303      	movs	r3, #3
 800120a:	817b      	strh	r3, [r7, #10]


  /* Infinite loop */
  for(;;)
  {
	  mpuReadSensor(&sensorData);
 800120c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fdd5 	bl	8000dc0 <mpuReadSensor>
	  Packet.Data.Data=sensorData;
 8001216:	f107 040c 	add.w	r4, r7, #12
 800121a:	f107 0588 	add.w	r5, r7, #136	; 0x88
 800121e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001220:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001222:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001226:	e884 0003 	stmia.w	r4, {r0, r1}
	  mpu9250_roll=sensorData.roll;
 800122a:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fcc6 	bl	8000bc0 <__aeabi_i2f>
 8001234:	4602      	mov	r2, r0
 8001236:	4b3a      	ldr	r3, [pc, #232]	; (8001320 <IMUsStart+0x124>)
 8001238:	601a      	str	r2, [r3, #0]
	  mpu9250_pitch=sensorData.pitch;
 800123a:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fcbe 	bl	8000bc0 <__aeabi_i2f>
 8001244:	4602      	mov	r2, r0
 8001246:	4b37      	ldr	r3, [pc, #220]	; (8001324 <IMUsStart+0x128>)
 8001248:	601a      	str	r2, [r3, #0]
	  ay=sensorData.ay;
 800124a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fcb6 	bl	8000bc0 <__aeabi_i2f>
 8001254:	4602      	mov	r2, r0
 8001256:	4b34      	ldr	r3, [pc, #208]	; (8001328 <IMUsStart+0x12c>)
 8001258:	601a      	str	r2, [r3, #0]
	  az=sensorData.az;
 800125a:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fcae 	bl	8000bc0 <__aeabi_i2f>
 8001264:	4602      	mov	r2, r0
 8001266:	4b31      	ldr	r3, [pc, #196]	; (800132c <IMUsStart+0x130>)
 8001268:	601a      	str	r2, [r3, #0]
	  ax=sensorData.ax;
 800126a:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fca6 	bl	8000bc0 <__aeabi_i2f>
 8001274:	4602      	mov	r2, r0
 8001276:	4b2e      	ldr	r3, [pc, #184]	; (8001330 <IMUsStart+0x134>)
 8001278:	601a      	str	r2, [r3, #0]
	  gx=sensorData.gx;
 800127a:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fc9e 	bl	8000bc0 <__aeabi_i2f>
 8001284:	4602      	mov	r2, r0
 8001286:	4b2b      	ldr	r3, [pc, #172]	; (8001334 <IMUsStart+0x138>)
 8001288:	601a      	str	r2, [r3, #0]
	  gy=sensorData.gy;
 800128a:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fc96 	bl	8000bc0 <__aeabi_i2f>
 8001294:	4602      	mov	r2, r0
 8001296:	4b28      	ldr	r3, [pc, #160]	; (8001338 <IMUsStart+0x13c>)
 8001298:	601a      	str	r2, [r3, #0]
	  gz=sensorData.gz;
 800129a:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fc8e 	bl	8000bc0 <__aeabi_i2f>
 80012a4:	4602      	mov	r2, r0
 80012a6:	4b25      	ldr	r3, [pc, #148]	; (800133c <IMUsStart+0x140>)
 80012a8:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	2180      	movs	r1, #128	; 0x80
 80012ae:	4824      	ldr	r0, [pc, #144]	; (8001340 <IMUsStart+0x144>)
 80012b0:	f000 fc3a 	bl	8001b28 <HAL_GPIO_WritePin>
	  if (mpu9250_roll>0 && ay<8000 && ay>-8000)
 80012b4:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <IMUsStart+0x124>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f04f 0100 	mov.w	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fd3f 	bl	8000d40 <__aeabi_fcmpgt>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d026      	beq.n	8001316 <IMUsStart+0x11a>
 80012c8:	4b17      	ldr	r3, [pc, #92]	; (8001328 <IMUsStart+0x12c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	491d      	ldr	r1, [pc, #116]	; (8001344 <IMUsStart+0x148>)
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fd18 	bl	8000d04 <__aeabi_fcmplt>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d01d      	beq.n	8001316 <IMUsStart+0x11a>
 80012da:	4b13      	ldr	r3, [pc, #76]	; (8001328 <IMUsStart+0x12c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	491a      	ldr	r1, [pc, #104]	; (8001348 <IMUsStart+0x14c>)
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fd2d 	bl	8000d40 <__aeabi_fcmpgt>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d014      	beq.n	8001316 <IMUsStart+0x11a>
	  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2180      	movs	r1, #128	; 0x80
 80012f0:	4813      	ldr	r0, [pc, #76]	; (8001340 <IMUsStart+0x144>)
 80012f2:	f000 fc19 	bl	8001b28 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80012f6:	2201      	movs	r2, #1
 80012f8:	2110      	movs	r1, #16
 80012fa:	4811      	ldr	r0, [pc, #68]	; (8001340 <IMUsStart+0x144>)
 80012fc:	f000 fc14 	bl	8001b28 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8001300:	2064      	movs	r0, #100	; 0x64
 8001302:	f000 f9b5 	bl	8001670 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	2110      	movs	r1, #16
 800130a:	480d      	ldr	r0, [pc, #52]	; (8001340 <IMUsStart+0x144>)
 800130c:	f000 fc0c 	bl	8001b28 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8001310:	2064      	movs	r0, #100	; 0x64
 8001312:	f000 f9ad 	bl	8001670 <HAL_Delay>
	  }


    osDelay(1);
 8001316:	2001      	movs	r0, #1
 8001318:	f002 fb80 	bl	8003a1c <osDelay>
	  mpuReadSensor(&sensorData);
 800131c:	e776      	b.n	800120c <IMUsStart+0x10>
 800131e:	bf00      	nop
 8001320:	20001a38 	.word	0x20001a38
 8001324:	20001a20 	.word	0x20001a20
 8001328:	20001a44 	.word	0x20001a44
 800132c:	20001a28 	.word	0x20001a28
 8001330:	20001a30 	.word	0x20001a30
 8001334:	20001a40 	.word	0x20001a40
 8001338:	20001a24 	.word	0x20001a24
 800133c:	20001a34 	.word	0x20001a34
 8001340:	40010800 	.word	0x40010800
 8001344:	45fa0000 	.word	0x45fa0000
 8001348:	c5fa0000 	.word	0xc5fa0000

0800134c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a04      	ldr	r2, [pc, #16]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d101      	bne.n	8001362 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800135e:	f000 f96b 	bl	8001638 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40012c00 	.word	0x40012c00

08001370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <HAL_MspInit+0x68>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	4a17      	ldr	r2, [pc, #92]	; (80013e4 <HAL_MspInit+0x68>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6193      	str	r3, [r2, #24]
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <HAL_MspInit+0x68>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <HAL_MspInit+0x68>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	4a11      	ldr	r2, [pc, #68]	; (80013e4 <HAL_MspInit+0x68>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a4:	61d3      	str	r3, [r2, #28]
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <HAL_MspInit+0x68>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	210f      	movs	r1, #15
 80013b6:	f06f 0001 	mvn.w	r0, #1
 80013ba:	f000 fa30 	bl	800181e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <HAL_MspInit+0x6c>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <HAL_MspInit+0x6c>)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40010000 	.word	0x40010000

080013ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0318 	add.w	r3, r7, #24
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a2b      	ldr	r2, [pc, #172]	; (80014b4 <HAL_I2C_MspInit+0xc8>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d124      	bne.n	8001456 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140c:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <HAL_I2C_MspInit+0xcc>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a29      	ldr	r2, [pc, #164]	; (80014b8 <HAL_I2C_MspInit+0xcc>)
 8001412:	f043 0308 	orr.w	r3, r3, #8
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b27      	ldr	r3, [pc, #156]	; (80014b8 <HAL_I2C_MspInit+0xcc>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0308 	and.w	r3, r3, #8
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001424:	23c0      	movs	r3, #192	; 0xc0
 8001426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001428:	2312      	movs	r3, #18
 800142a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800142c:	2303      	movs	r3, #3
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001430:	f107 0318 	add.w	r3, r7, #24
 8001434:	4619      	mov	r1, r3
 8001436:	4821      	ldr	r0, [pc, #132]	; (80014bc <HAL_I2C_MspInit+0xd0>)
 8001438:	f000 fa1c 	bl	8001874 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800143c:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <HAL_I2C_MspInit+0xcc>)
 800143e:	69db      	ldr	r3, [r3, #28]
 8001440:	4a1d      	ldr	r2, [pc, #116]	; (80014b8 <HAL_I2C_MspInit+0xcc>)
 8001442:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001446:	61d3      	str	r3, [r2, #28]
 8001448:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <HAL_I2C_MspInit+0xcc>)
 800144a:	69db      	ldr	r3, [r3, #28]
 800144c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001454:	e029      	b.n	80014aa <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a19      	ldr	r2, [pc, #100]	; (80014c0 <HAL_I2C_MspInit+0xd4>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d124      	bne.n	80014aa <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001460:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <HAL_I2C_MspInit+0xcc>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <HAL_I2C_MspInit+0xcc>)
 8001466:	f043 0308 	orr.w	r3, r3, #8
 800146a:	6193      	str	r3, [r2, #24]
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_I2C_MspInit+0xcc>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001478:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800147c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800147e:	2312      	movs	r3, #18
 8001480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001482:	2303      	movs	r3, #3
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001486:	f107 0318 	add.w	r3, r7, #24
 800148a:	4619      	mov	r1, r3
 800148c:	480b      	ldr	r0, [pc, #44]	; (80014bc <HAL_I2C_MspInit+0xd0>)
 800148e:	f000 f9f1 	bl	8001874 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_I2C_MspInit+0xcc>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <HAL_I2C_MspInit+0xcc>)
 8001498:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800149c:	61d3      	str	r3, [r2, #28]
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_I2C_MspInit+0xcc>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
}
 80014aa:	bf00      	nop
 80014ac:	3728      	adds	r7, #40	; 0x28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40005400 	.word	0x40005400
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010c00 	.word	0x40010c00
 80014c0:	40005800 	.word	0x40005800

080014c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08c      	sub	sp, #48	; 0x30
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 80014d4:	2200      	movs	r2, #0
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	2019      	movs	r0, #25
 80014da:	f000 f9a0 	bl	800181e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 80014de:	2019      	movs	r0, #25
 80014e0:	f000 f9b9 	bl	8001856 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014e4:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <HAL_InitTick+0x9c>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	4a1d      	ldr	r2, [pc, #116]	; (8001560 <HAL_InitTick+0x9c>)
 80014ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014ee:	6193      	str	r3, [r2, #24]
 80014f0:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <HAL_InitTick+0x9c>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014fc:	f107 0210 	add.w	r2, r7, #16
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4611      	mov	r1, r2
 8001506:	4618      	mov	r0, r3
 8001508:	f001 fee0 	bl	80032cc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800150c:	f001 feca 	bl	80032a4 <HAL_RCC_GetPCLK2Freq>
 8001510:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001514:	4a13      	ldr	r2, [pc, #76]	; (8001564 <HAL_InitTick+0xa0>)
 8001516:	fba2 2303 	umull	r2, r3, r2, r3
 800151a:	0c9b      	lsrs	r3, r3, #18
 800151c:	3b01      	subs	r3, #1
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <HAL_InitTick+0xa4>)
 8001522:	4a12      	ldr	r2, [pc, #72]	; (800156c <HAL_InitTick+0xa8>)
 8001524:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <HAL_InitTick+0xa4>)
 8001528:	f240 32e7 	movw	r2, #999	; 0x3e7
 800152c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800152e:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <HAL_InitTick+0xa4>)
 8001530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001532:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <HAL_InitTick+0xa4>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <HAL_InitTick+0xa4>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001540:	4809      	ldr	r0, [pc, #36]	; (8001568 <HAL_InitTick+0xa4>)
 8001542:	f001 ff11 	bl	8003368 <HAL_TIM_Base_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d104      	bne.n	8001556 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800154c:	4806      	ldr	r0, [pc, #24]	; (8001568 <HAL_InitTick+0xa4>)
 800154e:	f001 ff63 	bl	8003418 <HAL_TIM_Base_Start_IT>
 8001552:	4603      	mov	r3, r0
 8001554:	e000      	b.n	8001558 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	3730      	adds	r7, #48	; 0x30
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40021000 	.word	0x40021000
 8001564:	431bde83 	.word	0x431bde83
 8001568:	20001a48 	.word	0x20001a48
 800156c:	40012c00 	.word	0x40012c00

08001570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr

0800157c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <HardFault_Handler+0x4>

08001582 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <MemManage_Handler+0x4>

08001588 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <BusFault_Handler+0x4>

0800158e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <UsageFault_Handler+0x4>

08001594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr

080015a0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015a4:	4802      	ldr	r0, [pc, #8]	; (80015b0 <TIM1_UP_IRQHandler+0x10>)
 80015a6:	f001 ff89 	bl	80034bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20001a48 	.word	0x20001a48

080015b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015c0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015c2:	e003      	b.n	80015cc <LoopCopyDataInit>

080015c4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015c4:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015c6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015c8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015ca:	3104      	adds	r1, #4

080015cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015cc:	480a      	ldr	r0, [pc, #40]	; (80015f8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015d0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015d2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015d4:	d3f6      	bcc.n	80015c4 <CopyDataInit>
  ldr r2, =_sbss
 80015d6:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80015d8:	e002      	b.n	80015e0 <LoopFillZerobss>

080015da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  str r3, [r2], #4
 80015dc:	f842 3b04 	str.w	r3, [r2], #4

080015e0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80015e2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80015e4:	d3f9      	bcc.n	80015da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015e6:	f7ff ffe5 	bl	80015b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ea:	f004 fd9f 	bl	800612c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ee:	f7ff fcd7 	bl	8000fa0 <main>
  bx lr
 80015f2:	4770      	bx	lr
  ldr r3, =_sidata
 80015f4:	08006788 	.word	0x08006788
  ldr r0, =_sdata
 80015f8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80015fc:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8001600:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8001604:	20001ad4 	.word	0x20001ad4

08001608 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001608:	e7fe      	b.n	8001608 <ADC1_2_IRQHandler>
	...

0800160c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <HAL_Init+0x28>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a07      	ldr	r2, [pc, #28]	; (8001634 <HAL_Init+0x28>)
 8001616:	f043 0310 	orr.w	r3, r3, #16
 800161a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800161c:	2003      	movs	r0, #3
 800161e:	f000 f8f3 	bl	8001808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001622:	2000      	movs	r0, #0
 8001624:	f7ff ff4e 	bl	80014c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001628:	f7ff fea8 	bl	800137c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40022000 	.word	0x40022000

08001638 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <HAL_IncTick+0x1c>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4b05      	ldr	r3, [pc, #20]	; (8001658 <HAL_IncTick+0x20>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4413      	add	r3, r2
 8001648:	4a03      	ldr	r2, [pc, #12]	; (8001658 <HAL_IncTick+0x20>)
 800164a:	6013      	str	r3, [r2, #0]
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	20000008 	.word	0x20000008
 8001658:	20001a90 	.word	0x20001a90

0800165c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return uwTick;
 8001660:	4b02      	ldr	r3, [pc, #8]	; (800166c <HAL_GetTick+0x10>)
 8001662:	681b      	ldr	r3, [r3, #0]
}
 8001664:	4618      	mov	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	20001a90 	.word	0x20001a90

08001670 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001678:	f7ff fff0 	bl	800165c <HAL_GetTick>
 800167c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001688:	d005      	beq.n	8001696 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <HAL_Delay+0x40>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4413      	add	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001696:	bf00      	nop
 8001698:	f7ff ffe0 	bl	800165c <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d8f7      	bhi.n	8001698 <HAL_Delay+0x28>
  {
  }
}
 80016a8:	bf00      	nop
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000008 	.word	0x20000008

080016b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016d0:	4013      	ands	r3, r2
 80016d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e6:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	60d3      	str	r3, [r2, #12]
}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <__NVIC_GetPriorityGrouping+0x18>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	f003 0307 	and.w	r3, r3, #7
}
 800170a:	4618      	mov	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	2b00      	cmp	r3, #0
 8001728:	db0b      	blt.n	8001742 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	f003 021f 	and.w	r2, r3, #31
 8001730:	4906      	ldr	r1, [pc, #24]	; (800174c <__NVIC_EnableIRQ+0x34>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	095b      	lsrs	r3, r3, #5
 8001738:	2001      	movs	r0, #1
 800173a:	fa00 f202 	lsl.w	r2, r0, r2
 800173e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	e000e100 	.word	0xe000e100

08001750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	6039      	str	r1, [r7, #0]
 800175a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001760:	2b00      	cmp	r3, #0
 8001762:	db0a      	blt.n	800177a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	b2da      	uxtb	r2, r3
 8001768:	490c      	ldr	r1, [pc, #48]	; (800179c <__NVIC_SetPriority+0x4c>)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	0112      	lsls	r2, r2, #4
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	440b      	add	r3, r1
 8001774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001778:	e00a      	b.n	8001790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	b2da      	uxtb	r2, r3
 800177e:	4908      	ldr	r1, [pc, #32]	; (80017a0 <__NVIC_SetPriority+0x50>)
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	3b04      	subs	r3, #4
 8001788:	0112      	lsls	r2, r2, #4
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	440b      	add	r3, r1
 800178e:	761a      	strb	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000e100 	.word	0xe000e100
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b089      	sub	sp, #36	; 0x24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f1c3 0307 	rsb	r3, r3, #7
 80017be:	2b04      	cmp	r3, #4
 80017c0:	bf28      	it	cs
 80017c2:	2304      	movcs	r3, #4
 80017c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3304      	adds	r3, #4
 80017ca:	2b06      	cmp	r3, #6
 80017cc:	d902      	bls.n	80017d4 <NVIC_EncodePriority+0x30>
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3b03      	subs	r3, #3
 80017d2:	e000      	b.n	80017d6 <NVIC_EncodePriority+0x32>
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d8:	f04f 32ff 	mov.w	r2, #4294967295
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43da      	mvns	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	401a      	ands	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ec:	f04f 31ff 	mov.w	r1, #4294967295
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	fa01 f303 	lsl.w	r3, r1, r3
 80017f6:	43d9      	mvns	r1, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017fc:	4313      	orrs	r3, r2
         );
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3724      	adds	r7, #36	; 0x24
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr

08001808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff4f 	bl	80016b4 <__NVIC_SetPriorityGrouping>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001830:	f7ff ff64 	bl	80016fc <__NVIC_GetPriorityGrouping>
 8001834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	6978      	ldr	r0, [r7, #20]
 800183c:	f7ff ffb2 	bl	80017a4 <NVIC_EncodePriority>
 8001840:	4602      	mov	r2, r0
 8001842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff81 	bl	8001750 <__NVIC_SetPriority>
}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff57 	bl	8001718 <__NVIC_EnableIRQ>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001874:	b480      	push	{r7}
 8001876:	b08b      	sub	sp, #44	; 0x2c
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001882:	2300      	movs	r3, #0
 8001884:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001886:	e127      	b.n	8001ad8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001888:	2201      	movs	r2, #1
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	f040 8116 	bne.w	8001ad2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b12      	cmp	r3, #18
 80018ac:	d034      	beq.n	8001918 <HAL_GPIO_Init+0xa4>
 80018ae:	2b12      	cmp	r3, #18
 80018b0:	d80d      	bhi.n	80018ce <HAL_GPIO_Init+0x5a>
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d02b      	beq.n	800190e <HAL_GPIO_Init+0x9a>
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d804      	bhi.n	80018c4 <HAL_GPIO_Init+0x50>
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d031      	beq.n	8001922 <HAL_GPIO_Init+0xae>
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d01c      	beq.n	80018fc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018c2:	e048      	b.n	8001956 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	d043      	beq.n	8001950 <HAL_GPIO_Init+0xdc>
 80018c8:	2b11      	cmp	r3, #17
 80018ca:	d01b      	beq.n	8001904 <HAL_GPIO_Init+0x90>
          break;
 80018cc:	e043      	b.n	8001956 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018ce:	4a89      	ldr	r2, [pc, #548]	; (8001af4 <HAL_GPIO_Init+0x280>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d026      	beq.n	8001922 <HAL_GPIO_Init+0xae>
 80018d4:	4a87      	ldr	r2, [pc, #540]	; (8001af4 <HAL_GPIO_Init+0x280>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d806      	bhi.n	80018e8 <HAL_GPIO_Init+0x74>
 80018da:	4a87      	ldr	r2, [pc, #540]	; (8001af8 <HAL_GPIO_Init+0x284>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d020      	beq.n	8001922 <HAL_GPIO_Init+0xae>
 80018e0:	4a86      	ldr	r2, [pc, #536]	; (8001afc <HAL_GPIO_Init+0x288>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d01d      	beq.n	8001922 <HAL_GPIO_Init+0xae>
          break;
 80018e6:	e036      	b.n	8001956 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018e8:	4a85      	ldr	r2, [pc, #532]	; (8001b00 <HAL_GPIO_Init+0x28c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d019      	beq.n	8001922 <HAL_GPIO_Init+0xae>
 80018ee:	4a85      	ldr	r2, [pc, #532]	; (8001b04 <HAL_GPIO_Init+0x290>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d016      	beq.n	8001922 <HAL_GPIO_Init+0xae>
 80018f4:	4a84      	ldr	r2, [pc, #528]	; (8001b08 <HAL_GPIO_Init+0x294>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d013      	beq.n	8001922 <HAL_GPIO_Init+0xae>
          break;
 80018fa:	e02c      	b.n	8001956 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	623b      	str	r3, [r7, #32]
          break;
 8001902:	e028      	b.n	8001956 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	3304      	adds	r3, #4
 800190a:	623b      	str	r3, [r7, #32]
          break;
 800190c:	e023      	b.n	8001956 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	3308      	adds	r3, #8
 8001914:	623b      	str	r3, [r7, #32]
          break;
 8001916:	e01e      	b.n	8001956 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	330c      	adds	r3, #12
 800191e:	623b      	str	r3, [r7, #32]
          break;
 8001920:	e019      	b.n	8001956 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d102      	bne.n	8001930 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800192a:	2304      	movs	r3, #4
 800192c:	623b      	str	r3, [r7, #32]
          break;
 800192e:	e012      	b.n	8001956 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d105      	bne.n	8001944 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001938:	2308      	movs	r3, #8
 800193a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	69fa      	ldr	r2, [r7, #28]
 8001940:	611a      	str	r2, [r3, #16]
          break;
 8001942:	e008      	b.n	8001956 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001944:	2308      	movs	r3, #8
 8001946:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	615a      	str	r2, [r3, #20]
          break;
 800194e:	e002      	b.n	8001956 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001950:	2300      	movs	r3, #0
 8001952:	623b      	str	r3, [r7, #32]
          break;
 8001954:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	2bff      	cmp	r3, #255	; 0xff
 800195a:	d801      	bhi.n	8001960 <HAL_GPIO_Init+0xec>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	e001      	b.n	8001964 <HAL_GPIO_Init+0xf0>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3304      	adds	r3, #4
 8001964:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	2bff      	cmp	r3, #255	; 0xff
 800196a:	d802      	bhi.n	8001972 <HAL_GPIO_Init+0xfe>
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	e002      	b.n	8001978 <HAL_GPIO_Init+0x104>
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	3b08      	subs	r3, #8
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	210f      	movs	r1, #15
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	fa01 f303 	lsl.w	r3, r1, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	401a      	ands	r2, r3
 800198a:	6a39      	ldr	r1, [r7, #32]
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	fa01 f303 	lsl.w	r3, r1, r3
 8001992:	431a      	orrs	r2, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 8096 	beq.w	8001ad2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019a6:	4b59      	ldr	r3, [pc, #356]	; (8001b0c <HAL_GPIO_Init+0x298>)
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	4a58      	ldr	r2, [pc, #352]	; (8001b0c <HAL_GPIO_Init+0x298>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6193      	str	r3, [r2, #24]
 80019b2:	4b56      	ldr	r3, [pc, #344]	; (8001b0c <HAL_GPIO_Init+0x298>)
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019be:	4a54      	ldr	r2, [pc, #336]	; (8001b10 <HAL_GPIO_Init+0x29c>)
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	089b      	lsrs	r3, r3, #2
 80019c4:	3302      	adds	r3, #2
 80019c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ca:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	220f      	movs	r2, #15
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	4013      	ands	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a4b      	ldr	r2, [pc, #300]	; (8001b14 <HAL_GPIO_Init+0x2a0>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d013      	beq.n	8001a12 <HAL_GPIO_Init+0x19e>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a4a      	ldr	r2, [pc, #296]	; (8001b18 <HAL_GPIO_Init+0x2a4>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d00d      	beq.n	8001a0e <HAL_GPIO_Init+0x19a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a49      	ldr	r2, [pc, #292]	; (8001b1c <HAL_GPIO_Init+0x2a8>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d007      	beq.n	8001a0a <HAL_GPIO_Init+0x196>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a48      	ldr	r2, [pc, #288]	; (8001b20 <HAL_GPIO_Init+0x2ac>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d101      	bne.n	8001a06 <HAL_GPIO_Init+0x192>
 8001a02:	2303      	movs	r3, #3
 8001a04:	e006      	b.n	8001a14 <HAL_GPIO_Init+0x1a0>
 8001a06:	2304      	movs	r3, #4
 8001a08:	e004      	b.n	8001a14 <HAL_GPIO_Init+0x1a0>
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	e002      	b.n	8001a14 <HAL_GPIO_Init+0x1a0>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e000      	b.n	8001a14 <HAL_GPIO_Init+0x1a0>
 8001a12:	2300      	movs	r3, #0
 8001a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a16:	f002 0203 	and.w	r2, r2, #3
 8001a1a:	0092      	lsls	r2, r2, #2
 8001a1c:	4093      	lsls	r3, r2
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a24:	493a      	ldr	r1, [pc, #232]	; (8001b10 <HAL_GPIO_Init+0x29c>)
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	089b      	lsrs	r3, r3, #2
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d006      	beq.n	8001a4c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a3e:	4b39      	ldr	r3, [pc, #228]	; (8001b24 <HAL_GPIO_Init+0x2b0>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	4938      	ldr	r1, [pc, #224]	; (8001b24 <HAL_GPIO_Init+0x2b0>)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]
 8001a4a:	e006      	b.n	8001a5a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a4c:	4b35      	ldr	r3, [pc, #212]	; (8001b24 <HAL_GPIO_Init+0x2b0>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	4933      	ldr	r1, [pc, #204]	; (8001b24 <HAL_GPIO_Init+0x2b0>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d006      	beq.n	8001a74 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a66:	4b2f      	ldr	r3, [pc, #188]	; (8001b24 <HAL_GPIO_Init+0x2b0>)
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	492e      	ldr	r1, [pc, #184]	; (8001b24 <HAL_GPIO_Init+0x2b0>)
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	604b      	str	r3, [r1, #4]
 8001a72:	e006      	b.n	8001a82 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a74:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <HAL_GPIO_Init+0x2b0>)
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	4929      	ldr	r1, [pc, #164]	; (8001b24 <HAL_GPIO_Init+0x2b0>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d006      	beq.n	8001a9c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a8e:	4b25      	ldr	r3, [pc, #148]	; (8001b24 <HAL_GPIO_Init+0x2b0>)
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	4924      	ldr	r1, [pc, #144]	; (8001b24 <HAL_GPIO_Init+0x2b0>)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	608b      	str	r3, [r1, #8]
 8001a9a:	e006      	b.n	8001aaa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a9c:	4b21      	ldr	r3, [pc, #132]	; (8001b24 <HAL_GPIO_Init+0x2b0>)
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	491f      	ldr	r1, [pc, #124]	; (8001b24 <HAL_GPIO_Init+0x2b0>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d006      	beq.n	8001ac4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ab6:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <HAL_GPIO_Init+0x2b0>)
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	491a      	ldr	r1, [pc, #104]	; (8001b24 <HAL_GPIO_Init+0x2b0>)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	60cb      	str	r3, [r1, #12]
 8001ac2:	e006      	b.n	8001ad2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ac4:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <HAL_GPIO_Init+0x2b0>)
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	4915      	ldr	r1, [pc, #84]	; (8001b24 <HAL_GPIO_Init+0x2b0>)
 8001ace:	4013      	ands	r3, r2
 8001ad0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f47f aed0 	bne.w	8001888 <HAL_GPIO_Init+0x14>
  }
}
 8001ae8:	bf00      	nop
 8001aea:	372c      	adds	r7, #44	; 0x2c
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	10210000 	.word	0x10210000
 8001af8:	10110000 	.word	0x10110000
 8001afc:	10120000 	.word	0x10120000
 8001b00:	10310000 	.word	0x10310000
 8001b04:	10320000 	.word	0x10320000
 8001b08:	10220000 	.word	0x10220000
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40010000 	.word	0x40010000
 8001b14:	40010800 	.word	0x40010800
 8001b18:	40010c00 	.word	0x40010c00
 8001b1c:	40011000 	.word	0x40011000
 8001b20:	40011400 	.word	0x40011400
 8001b24:	40010400 	.word	0x40010400

08001b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
 8001b34:	4613      	mov	r3, r2
 8001b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b38:	787b      	ldrb	r3, [r7, #1]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b44:	e003      	b.n	8001b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b46:	887b      	ldrh	r3, [r7, #2]
 8001b48:	041a      	lsls	r2, r3, #16
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	611a      	str	r2, [r3, #16]
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr

08001b58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e11f      	b.n	8001daa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d106      	bne.n	8001b84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff fc34 	bl	80013ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2224      	movs	r2, #36	; 0x24
 8001b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0201 	bic.w	r2, r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001baa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bbc:	f001 fb5e 	bl	800327c <HAL_RCC_GetPCLK1Freq>
 8001bc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	4a7b      	ldr	r2, [pc, #492]	; (8001db4 <HAL_I2C_Init+0x25c>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d807      	bhi.n	8001bdc <HAL_I2C_Init+0x84>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4a7a      	ldr	r2, [pc, #488]	; (8001db8 <HAL_I2C_Init+0x260>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	bf94      	ite	ls
 8001bd4:	2301      	movls	r3, #1
 8001bd6:	2300      	movhi	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	e006      	b.n	8001bea <HAL_I2C_Init+0x92>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4a77      	ldr	r2, [pc, #476]	; (8001dbc <HAL_I2C_Init+0x264>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	bf94      	ite	ls
 8001be4:	2301      	movls	r3, #1
 8001be6:	2300      	movhi	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e0db      	b.n	8001daa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4a72      	ldr	r2, [pc, #456]	; (8001dc0 <HAL_I2C_Init+0x268>)
 8001bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfa:	0c9b      	lsrs	r3, r3, #18
 8001bfc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	4a64      	ldr	r2, [pc, #400]	; (8001db4 <HAL_I2C_Init+0x25c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d802      	bhi.n	8001c2c <HAL_I2C_Init+0xd4>
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	e009      	b.n	8001c40 <HAL_I2C_Init+0xe8>
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c32:	fb02 f303 	mul.w	r3, r2, r3
 8001c36:	4a63      	ldr	r2, [pc, #396]	; (8001dc4 <HAL_I2C_Init+0x26c>)
 8001c38:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3c:	099b      	lsrs	r3, r3, #6
 8001c3e:	3301      	adds	r3, #1
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	430b      	orrs	r3, r1
 8001c46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	4956      	ldr	r1, [pc, #344]	; (8001db4 <HAL_I2C_Init+0x25c>)
 8001c5c:	428b      	cmp	r3, r1
 8001c5e:	d80d      	bhi.n	8001c7c <HAL_I2C_Init+0x124>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	1e59      	subs	r1, r3, #1
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c6e:	3301      	adds	r3, #1
 8001c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	bf38      	it	cc
 8001c78:	2304      	movcc	r3, #4
 8001c7a:	e04f      	b.n	8001d1c <HAL_I2C_Init+0x1c4>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d111      	bne.n	8001ca8 <HAL_I2C_Init+0x150>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	1e58      	subs	r0, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6859      	ldr	r1, [r3, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	440b      	add	r3, r1
 8001c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c96:	3301      	adds	r3, #1
 8001c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	bf0c      	ite	eq
 8001ca0:	2301      	moveq	r3, #1
 8001ca2:	2300      	movne	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	e012      	b.n	8001cce <HAL_I2C_Init+0x176>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	1e58      	subs	r0, r3, #1
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6859      	ldr	r1, [r3, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	0099      	lsls	r1, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	bf0c      	ite	eq
 8001cc8:	2301      	moveq	r3, #1
 8001cca:	2300      	movne	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_I2C_Init+0x17e>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e022      	b.n	8001d1c <HAL_I2C_Init+0x1c4>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10e      	bne.n	8001cfc <HAL_I2C_Init+0x1a4>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	1e58      	subs	r0, r3, #1
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6859      	ldr	r1, [r3, #4]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	440b      	add	r3, r1
 8001cec:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cfa:	e00f      	b.n	8001d1c <HAL_I2C_Init+0x1c4>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	1e58      	subs	r0, r3, #1
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6859      	ldr	r1, [r3, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	0099      	lsls	r1, r3, #2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d12:	3301      	adds	r3, #1
 8001d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	6809      	ldr	r1, [r1, #0]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69da      	ldr	r2, [r3, #28]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6911      	ldr	r1, [r2, #16]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	68d2      	ldr	r2, [r2, #12]
 8001d56:	4311      	orrs	r1, r2
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	430b      	orrs	r3, r1
 8001d5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695a      	ldr	r2, [r3, #20]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0201 	orr.w	r2, r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2220      	movs	r2, #32
 8001d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	000186a0 	.word	0x000186a0
 8001db8:	001e847f 	.word	0x001e847f
 8001dbc:	003d08ff 	.word	0x003d08ff
 8001dc0:	431bde83 	.word	0x431bde83
 8001dc4:	10624dd3 	.word	0x10624dd3

08001dc8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	607a      	str	r2, [r7, #4]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	817b      	strh	r3, [r7, #10]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ddc:	f7ff fc3e 	bl	800165c <HAL_GetTick>
 8001de0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b20      	cmp	r3, #32
 8001dec:	f040 80e0 	bne.w	8001fb0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	2319      	movs	r3, #25
 8001df6:	2201      	movs	r2, #1
 8001df8:	4970      	ldr	r1, [pc, #448]	; (8001fbc <HAL_I2C_Master_Transmit+0x1f4>)
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f000 fc8c 	bl	8002718 <I2C_WaitOnFlagUntilTimeout>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e06:	2302      	movs	r3, #2
 8001e08:	e0d3      	b.n	8001fb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_I2C_Master_Transmit+0x50>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e0cc      	b.n	8001fb2 <HAL_I2C_Master_Transmit+0x1ea>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d007      	beq.n	8001e3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f042 0201 	orr.w	r2, r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2221      	movs	r2, #33	; 0x21
 8001e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2210      	movs	r2, #16
 8001e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	893a      	ldrh	r2, [r7, #8]
 8001e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	4a50      	ldr	r2, [pc, #320]	; (8001fc0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e80:	8979      	ldrh	r1, [r7, #10]
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	6a3a      	ldr	r2, [r7, #32]
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f000 faf6 	bl	8002478 <I2C_MasterRequestWrite>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e08d      	b.n	8001fb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001eac:	e066      	b.n	8001f7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	6a39      	ldr	r1, [r7, #32]
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f000 fd06 	bl	80028c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00d      	beq.n	8001eda <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d107      	bne.n	8001ed6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e06b      	b.n	8001fb2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	781a      	ldrb	r2, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f02:	3b01      	subs	r3, #1
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d11b      	bne.n	8001f50 <HAL_I2C_Master_Transmit+0x188>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d017      	beq.n	8001f50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	781a      	ldrb	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	1c5a      	adds	r2, r3, #1
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	6a39      	ldr	r1, [r7, #32]
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f000 fcf6 	bl	8002946 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00d      	beq.n	8001f7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d107      	bne.n	8001f78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e01a      	b.n	8001fb2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d194      	bne.n	8001eae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2220      	movs	r2, #32
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	e000      	b.n	8001fb2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001fb0:	2302      	movs	r3, #2
  }
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	00100002 	.word	0x00100002
 8001fc0:	ffff0000 	.word	0xffff0000

08001fc4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08c      	sub	sp, #48	; 0x30
 8001fc8:	af02      	add	r7, sp, #8
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	607a      	str	r2, [r7, #4]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	817b      	strh	r3, [r7, #10]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fdc:	f7ff fb3e 	bl	800165c <HAL_GetTick>
 8001fe0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b20      	cmp	r3, #32
 8001fec:	f040 8238 	bne.w	8002460 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	2319      	movs	r3, #25
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	497e      	ldr	r1, [pc, #504]	; (80021f4 <HAL_I2C_Master_Receive+0x230>)
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 fb8c 	bl	8002718 <I2C_WaitOnFlagUntilTimeout>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002006:	2302      	movs	r3, #2
 8002008:	e22b      	b.n	8002462 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002010:	2b01      	cmp	r3, #1
 8002012:	d101      	bne.n	8002018 <HAL_I2C_Master_Receive+0x54>
 8002014:	2302      	movs	r3, #2
 8002016:	e224      	b.n	8002462 <HAL_I2C_Master_Receive+0x49e>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b01      	cmp	r3, #1
 800202c:	d007      	beq.n	800203e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f042 0201 	orr.w	r2, r2, #1
 800203c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800204c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2222      	movs	r2, #34	; 0x22
 8002052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2210      	movs	r2, #16
 800205a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	893a      	ldrh	r2, [r7, #8]
 800206e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002074:	b29a      	uxth	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4a5e      	ldr	r2, [pc, #376]	; (80021f8 <HAL_I2C_Master_Receive+0x234>)
 800207e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002080:	8979      	ldrh	r1, [r7, #10]
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 fa78 	bl	800257c <I2C_MasterRequestRead>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e1e5      	b.n	8002462 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209a:	2b00      	cmp	r3, #0
 800209c:	d113      	bne.n	80020c6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	61fb      	str	r3, [r7, #28]
 80020b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	e1b9      	b.n	800243a <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d11d      	bne.n	800210a <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020dc:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020de:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020e0:	2300      	movs	r3, #0
 80020e2:	61bb      	str	r3, [r7, #24]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	61bb      	str	r3, [r7, #24]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	61bb      	str	r3, [r7, #24]
 80020f4:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002104:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002106:	b662      	cpsie	i
 8002108:	e197      	b.n	800243a <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210e:	2b02      	cmp	r3, #2
 8002110:	d11d      	bne.n	800214e <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002120:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002122:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002148:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800214a:	b662      	cpsie	i
 800214c:	e175      	b.n	800243a <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800215c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002174:	e161      	b.n	800243a <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217a:	2b03      	cmp	r3, #3
 800217c:	f200 811a 	bhi.w	80023b4 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002184:	2b01      	cmp	r3, #1
 8002186:	d123      	bne.n	80021d0 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800218a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f000 fc1b 	bl	80029c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e162      	b.n	8002462 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691a      	ldr	r2, [r3, #16]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b8:	3b01      	subs	r3, #1
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021ce:	e134      	b.n	800243a <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d150      	bne.n	800227a <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021de:	2200      	movs	r2, #0
 80021e0:	4906      	ldr	r1, [pc, #24]	; (80021fc <HAL_I2C_Master_Receive+0x238>)
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 fa98 	bl	8002718 <I2C_WaitOnFlagUntilTimeout>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d008      	beq.n	8002200 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e137      	b.n	8002462 <HAL_I2C_Master_Receive+0x49e>
 80021f2:	bf00      	nop
 80021f4:	00100002 	.word	0x00100002
 80021f8:	ffff0000 	.word	0xffff0000
 80021fc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002200:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002210:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	1c5a      	adds	r2, r3, #1
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222e:	3b01      	subs	r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223a:	b29b      	uxth	r3, r3
 800223c:	3b01      	subs	r3, #1
 800223e:	b29a      	uxth	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002244:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226e:	b29b      	uxth	r3, r3
 8002270:	3b01      	subs	r3, #1
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002278:	e0df      	b.n	800243a <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002280:	2200      	movs	r2, #0
 8002282:	497a      	ldr	r1, [pc, #488]	; (800246c <HAL_I2C_Master_Receive+0x4a8>)
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f000 fa47 	bl	8002718 <I2C_WaitOnFlagUntilTimeout>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0e6      	b.n	8002462 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80022a4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	1c5a      	adds	r2, r3, #1
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80022d8:	4b65      	ldr	r3, [pc, #404]	; (8002470 <HAL_I2C_Master_Receive+0x4ac>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	08db      	lsrs	r3, r3, #3
 80022de:	4a65      	ldr	r2, [pc, #404]	; (8002474 <HAL_I2C_Master_Receive+0x4b0>)
 80022e0:	fba2 2303 	umull	r2, r3, r2, r3
 80022e4:	0a1a      	lsrs	r2, r3, #8
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	00da      	lsls	r2, r3, #3
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	3b01      	subs	r3, #1
 80022f6:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d117      	bne.n	800232e <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2220      	movs	r2, #32
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	f043 0220 	orr.w	r2, r3, #32
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002320:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e099      	b.n	8002462 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b04      	cmp	r3, #4
 800233a:	d1da      	bne.n	80022f2 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800234a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691a      	ldr	r2, [r3, #16]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002368:	3b01      	subs	r3, #1
 800236a:	b29a      	uxth	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002374:	b29b      	uxth	r3, r3
 8002376:	3b01      	subs	r3, #1
 8002378:	b29a      	uxth	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800237e:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	691a      	ldr	r2, [r3, #16]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239c:	3b01      	subs	r3, #1
 800239e:	b29a      	uxth	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023b2:	e042      	b.n	800243a <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 fb05 	bl	80029c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e04c      	b.n	8002462 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691a      	ldr	r2, [r3, #16]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	1c5a      	adds	r2, r3, #1
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e4:	3b01      	subs	r3, #1
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b04      	cmp	r3, #4
 8002406:	d118      	bne.n	800243a <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691a      	ldr	r2, [r3, #16]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002430:	b29b      	uxth	r3, r3
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243e:	2b00      	cmp	r3, #0
 8002440:	f47f ae99 	bne.w	8002176 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	e000      	b.n	8002462 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8002460:	2302      	movs	r3, #2
  }
}
 8002462:	4618      	mov	r0, r3
 8002464:	3728      	adds	r7, #40	; 0x28
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	00010004 	.word	0x00010004
 8002470:	20000000 	.word	0x20000000
 8002474:	14f8b589 	.word	0x14f8b589

08002478 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af02      	add	r7, sp, #8
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	607a      	str	r2, [r7, #4]
 8002482:	603b      	str	r3, [r7, #0]
 8002484:	460b      	mov	r3, r1
 8002486:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	2b08      	cmp	r3, #8
 8002492:	d006      	beq.n	80024a2 <I2C_MasterRequestWrite+0x2a>
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d003      	beq.n	80024a2 <I2C_MasterRequestWrite+0x2a>
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024a0:	d108      	bne.n	80024b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	e00b      	b.n	80024cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	2b12      	cmp	r3, #18
 80024ba:	d107      	bne.n	80024cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 f91d 	bl	8002718 <I2C_WaitOnFlagUntilTimeout>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00d      	beq.n	8002500 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024f2:	d103      	bne.n	80024fc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e035      	b.n	800256c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002508:	d108      	bne.n	800251c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800250a:	897b      	ldrh	r3, [r7, #10]
 800250c:	b2db      	uxtb	r3, r3
 800250e:	461a      	mov	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002518:	611a      	str	r2, [r3, #16]
 800251a:	e01b      	b.n	8002554 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800251c:	897b      	ldrh	r3, [r7, #10]
 800251e:	11db      	asrs	r3, r3, #7
 8002520:	b2db      	uxtb	r3, r3
 8002522:	f003 0306 	and.w	r3, r3, #6
 8002526:	b2db      	uxtb	r3, r3
 8002528:	f063 030f 	orn	r3, r3, #15
 800252c:	b2da      	uxtb	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	490e      	ldr	r1, [pc, #56]	; (8002574 <I2C_MasterRequestWrite+0xfc>)
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 f943 	bl	80027c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e010      	b.n	800256c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800254a:	897b      	ldrh	r3, [r7, #10]
 800254c:	b2da      	uxtb	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	4907      	ldr	r1, [pc, #28]	; (8002578 <I2C_MasterRequestWrite+0x100>)
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 f933 	bl	80027c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	00010008 	.word	0x00010008
 8002578:	00010002 	.word	0x00010002

0800257c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af02      	add	r7, sp, #8
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	607a      	str	r2, [r7, #4]
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	460b      	mov	r3, r1
 800258a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025a0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d006      	beq.n	80025b6 <I2C_MasterRequestRead+0x3a>
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d003      	beq.n	80025b6 <I2C_MasterRequestRead+0x3a>
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025b4:	d108      	bne.n	80025c8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	e00b      	b.n	80025e0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	2b11      	cmp	r3, #17
 80025ce:	d107      	bne.n	80025e0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 f893 	bl	8002718 <I2C_WaitOnFlagUntilTimeout>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00d      	beq.n	8002614 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002606:	d103      	bne.n	8002610 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800260e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e079      	b.n	8002708 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800261c:	d108      	bne.n	8002630 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800261e:	897b      	ldrh	r3, [r7, #10]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	b2da      	uxtb	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	611a      	str	r2, [r3, #16]
 800262e:	e05f      	b.n	80026f0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002630:	897b      	ldrh	r3, [r7, #10]
 8002632:	11db      	asrs	r3, r3, #7
 8002634:	b2db      	uxtb	r3, r3
 8002636:	f003 0306 	and.w	r3, r3, #6
 800263a:	b2db      	uxtb	r3, r3
 800263c:	f063 030f 	orn	r3, r3, #15
 8002640:	b2da      	uxtb	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	4930      	ldr	r1, [pc, #192]	; (8002710 <I2C_MasterRequestRead+0x194>)
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 f8b9 	bl	80027c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e054      	b.n	8002708 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800265e:	897b      	ldrh	r3, [r7, #10]
 8002660:	b2da      	uxtb	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	4929      	ldr	r1, [pc, #164]	; (8002714 <I2C_MasterRequestRead+0x198>)
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 f8a9 	bl	80027c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e044      	b.n	8002708 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800267e:	2300      	movs	r3, #0
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026a2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 f831 	bl	8002718 <I2C_WaitOnFlagUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00d      	beq.n	80026d8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ca:	d103      	bne.n	80026d4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e017      	b.n	8002708 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80026d8:	897b      	ldrh	r3, [r7, #10]
 80026da:	11db      	asrs	r3, r3, #7
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	f003 0306 	and.w	r3, r3, #6
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	f063 030e 	orn	r3, r3, #14
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	4907      	ldr	r1, [pc, #28]	; (8002714 <I2C_MasterRequestRead+0x198>)
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 f865 	bl	80027c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	00010008 	.word	0x00010008
 8002714:	00010002 	.word	0x00010002

08002718 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	4613      	mov	r3, r2
 8002726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002728:	e025      	b.n	8002776 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002730:	d021      	beq.n	8002776 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002732:	f7fe ff93 	bl	800165c <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d302      	bcc.n	8002748 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d116      	bne.n	8002776 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2220      	movs	r2, #32
 8002752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f043 0220 	orr.w	r2, r3, #32
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e023      	b.n	80027be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	0c1b      	lsrs	r3, r3, #16
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b01      	cmp	r3, #1
 800277e:	d10d      	bne.n	800279c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	43da      	mvns	r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	4013      	ands	r3, r2
 800278c:	b29b      	uxth	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	bf0c      	ite	eq
 8002792:	2301      	moveq	r3, #1
 8002794:	2300      	movne	r3, #0
 8002796:	b2db      	uxtb	r3, r3
 8002798:	461a      	mov	r2, r3
 800279a:	e00c      	b.n	80027b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	43da      	mvns	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4013      	ands	r3, r2
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	bf0c      	ite	eq
 80027ae:	2301      	moveq	r3, #1
 80027b0:	2300      	movne	r3, #0
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	461a      	mov	r2, r3
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d0b6      	beq.n	800272a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b084      	sub	sp, #16
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
 80027d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027d4:	e051      	b.n	800287a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e4:	d123      	bne.n	800282e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2220      	movs	r2, #32
 800280a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f043 0204 	orr.w	r2, r3, #4
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e046      	b.n	80028bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002834:	d021      	beq.n	800287a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002836:	f7fe ff11 	bl	800165c <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	429a      	cmp	r2, r3
 8002844:	d302      	bcc.n	800284c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d116      	bne.n	800287a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2220      	movs	r2, #32
 8002856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f043 0220 	orr.w	r2, r3, #32
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e020      	b.n	80028bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	0c1b      	lsrs	r3, r3, #16
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b01      	cmp	r3, #1
 8002882:	d10c      	bne.n	800289e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	43da      	mvns	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	4013      	ands	r3, r2
 8002890:	b29b      	uxth	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	bf14      	ite	ne
 8002896:	2301      	movne	r3, #1
 8002898:	2300      	moveq	r3, #0
 800289a:	b2db      	uxtb	r3, r3
 800289c:	e00b      	b.n	80028b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	43da      	mvns	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	4013      	ands	r3, r2
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	bf14      	ite	ne
 80028b0:	2301      	movne	r3, #1
 80028b2:	2300      	moveq	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d18d      	bne.n	80027d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028d0:	e02d      	b.n	800292e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 f8ce 	bl	8002a74 <I2C_IsAcknowledgeFailed>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e02d      	b.n	800293e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e8:	d021      	beq.n	800292e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ea:	f7fe feb7 	bl	800165c <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d302      	bcc.n	8002900 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d116      	bne.n	800292e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2220      	movs	r2, #32
 800290a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f043 0220 	orr.w	r2, r3, #32
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e007      	b.n	800293e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002938:	2b80      	cmp	r3, #128	; 0x80
 800293a:	d1ca      	bne.n	80028d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b084      	sub	sp, #16
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002952:	e02d      	b.n	80029b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 f88d 	bl	8002a74 <I2C_IsAcknowledgeFailed>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e02d      	b.n	80029c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296a:	d021      	beq.n	80029b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800296c:	f7fe fe76 	bl	800165c <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	429a      	cmp	r2, r3
 800297a:	d302      	bcc.n	8002982 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d116      	bne.n	80029b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	f043 0220 	orr.w	r2, r3, #32
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e007      	b.n	80029c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	f003 0304 	and.w	r3, r3, #4
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d1ca      	bne.n	8002954 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029d4:	e042      	b.n	8002a5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2b10      	cmp	r3, #16
 80029e2:	d119      	bne.n	8002a18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f06f 0210 	mvn.w	r2, #16
 80029ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2220      	movs	r2, #32
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e029      	b.n	8002a6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a18:	f7fe fe20 	bl	800165c <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d302      	bcc.n	8002a2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d116      	bne.n	8002a5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2220      	movs	r2, #32
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f043 0220 	orr.w	r2, r3, #32
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e007      	b.n	8002a6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a66:	2b40      	cmp	r3, #64	; 0x40
 8002a68:	d1b5      	bne.n	80029d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a8a:	d11b      	bne.n	8002ac4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	f043 0204 	orr.w	r2, r3, #4
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e000      	b.n	8002ac6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e26c      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 8087 	beq.w	8002bfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002af0:	4b92      	ldr	r3, [pc, #584]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 030c 	and.w	r3, r3, #12
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d00c      	beq.n	8002b16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002afc:	4b8f      	ldr	r3, [pc, #572]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 030c 	and.w	r3, r3, #12
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d112      	bne.n	8002b2e <HAL_RCC_OscConfig+0x5e>
 8002b08:	4b8c      	ldr	r3, [pc, #560]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b14:	d10b      	bne.n	8002b2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b16:	4b89      	ldr	r3, [pc, #548]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d06c      	beq.n	8002bfc <HAL_RCC_OscConfig+0x12c>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d168      	bne.n	8002bfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e246      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b36:	d106      	bne.n	8002b46 <HAL_RCC_OscConfig+0x76>
 8002b38:	4b80      	ldr	r3, [pc, #512]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a7f      	ldr	r2, [pc, #508]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	e02e      	b.n	8002ba4 <HAL_RCC_OscConfig+0xd4>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x98>
 8002b4e:	4b7b      	ldr	r3, [pc, #492]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a7a      	ldr	r2, [pc, #488]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	4b78      	ldr	r3, [pc, #480]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a77      	ldr	r2, [pc, #476]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	e01d      	b.n	8002ba4 <HAL_RCC_OscConfig+0xd4>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCC_OscConfig+0xbc>
 8002b72:	4b72      	ldr	r3, [pc, #456]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a71      	ldr	r2, [pc, #452]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	4b6f      	ldr	r3, [pc, #444]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a6e      	ldr	r2, [pc, #440]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	e00b      	b.n	8002ba4 <HAL_RCC_OscConfig+0xd4>
 8002b8c:	4b6b      	ldr	r3, [pc, #428]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a6a      	ldr	r2, [pc, #424]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b96:	6013      	str	r3, [r2, #0]
 8002b98:	4b68      	ldr	r3, [pc, #416]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a67      	ldr	r2, [pc, #412]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ba2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d013      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bac:	f7fe fd56 	bl	800165c <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb4:	f7fe fd52 	bl	800165c <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b64      	cmp	r3, #100	; 0x64
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e1fa      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc6:	4b5d      	ldr	r3, [pc, #372]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCC_OscConfig+0xe4>
 8002bd2:	e014      	b.n	8002bfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd4:	f7fe fd42 	bl	800165c <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bdc:	f7fe fd3e 	bl	800165c <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b64      	cmp	r3, #100	; 0x64
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e1e6      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bee:	4b53      	ldr	r3, [pc, #332]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x10c>
 8002bfa:	e000      	b.n	8002bfe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d063      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c0a:	4b4c      	ldr	r3, [pc, #304]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00b      	beq.n	8002c2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c16:	4b49      	ldr	r3, [pc, #292]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d11c      	bne.n	8002c5c <HAL_RCC_OscConfig+0x18c>
 8002c22:	4b46      	ldr	r3, [pc, #280]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d116      	bne.n	8002c5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c2e:	4b43      	ldr	r3, [pc, #268]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d005      	beq.n	8002c46 <HAL_RCC_OscConfig+0x176>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d001      	beq.n	8002c46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e1ba      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c46:	4b3d      	ldr	r3, [pc, #244]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4939      	ldr	r1, [pc, #228]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c5a:	e03a      	b.n	8002cd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d020      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c64:	4b36      	ldr	r3, [pc, #216]	; (8002d40 <HAL_RCC_OscConfig+0x270>)
 8002c66:	2201      	movs	r2, #1
 8002c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6a:	f7fe fcf7 	bl	800165c <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c72:	f7fe fcf3 	bl	800165c <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e19b      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c84:	4b2d      	ldr	r3, [pc, #180]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c90:	4b2a      	ldr	r3, [pc, #168]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4927      	ldr	r1, [pc, #156]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	600b      	str	r3, [r1, #0]
 8002ca4:	e015      	b.n	8002cd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ca6:	4b26      	ldr	r3, [pc, #152]	; (8002d40 <HAL_RCC_OscConfig+0x270>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cac:	f7fe fcd6 	bl	800165c <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cb4:	f7fe fcd2 	bl	800165c <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e17a      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cc6:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f0      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d03a      	beq.n	8002d54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d019      	beq.n	8002d1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ce6:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cec:	f7fe fcb6 	bl	800165c <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf4:	f7fe fcb2 	bl	800165c <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e15a      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d06:	4b0d      	ldr	r3, [pc, #52]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d12:	2001      	movs	r0, #1
 8002d14:	f000 fb0a 	bl	800332c <RCC_Delay>
 8002d18:	e01c      	b.n	8002d54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d1a:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d20:	f7fe fc9c 	bl	800165c <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d26:	e00f      	b.n	8002d48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d28:	f7fe fc98 	bl	800165c <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d908      	bls.n	8002d48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e140      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
 8002d3a:	bf00      	nop
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	42420000 	.word	0x42420000
 8002d44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d48:	4b9e      	ldr	r3, [pc, #632]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1e9      	bne.n	8002d28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 80a6 	beq.w	8002eae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d62:	2300      	movs	r3, #0
 8002d64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d66:	4b97      	ldr	r3, [pc, #604]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10d      	bne.n	8002d8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d72:	4b94      	ldr	r3, [pc, #592]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	4a93      	ldr	r2, [pc, #588]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d7c:	61d3      	str	r3, [r2, #28]
 8002d7e:	4b91      	ldr	r3, [pc, #580]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d86:	60bb      	str	r3, [r7, #8]
 8002d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8e:	4b8e      	ldr	r3, [pc, #568]	; (8002fc8 <HAL_RCC_OscConfig+0x4f8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d118      	bne.n	8002dcc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d9a:	4b8b      	ldr	r3, [pc, #556]	; (8002fc8 <HAL_RCC_OscConfig+0x4f8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a8a      	ldr	r2, [pc, #552]	; (8002fc8 <HAL_RCC_OscConfig+0x4f8>)
 8002da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da6:	f7fe fc59 	bl	800165c <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dae:	f7fe fc55 	bl	800165c <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b64      	cmp	r3, #100	; 0x64
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e0fd      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc0:	4b81      	ldr	r3, [pc, #516]	; (8002fc8 <HAL_RCC_OscConfig+0x4f8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d106      	bne.n	8002de2 <HAL_RCC_OscConfig+0x312>
 8002dd4:	4b7b      	ldr	r3, [pc, #492]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	4a7a      	ldr	r2, [pc, #488]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002dda:	f043 0301 	orr.w	r3, r3, #1
 8002dde:	6213      	str	r3, [r2, #32]
 8002de0:	e02d      	b.n	8002e3e <HAL_RCC_OscConfig+0x36e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x334>
 8002dea:	4b76      	ldr	r3, [pc, #472]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	4a75      	ldr	r2, [pc, #468]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002df0:	f023 0301 	bic.w	r3, r3, #1
 8002df4:	6213      	str	r3, [r2, #32]
 8002df6:	4b73      	ldr	r3, [pc, #460]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	4a72      	ldr	r2, [pc, #456]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002dfc:	f023 0304 	bic.w	r3, r3, #4
 8002e00:	6213      	str	r3, [r2, #32]
 8002e02:	e01c      	b.n	8002e3e <HAL_RCC_OscConfig+0x36e>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	2b05      	cmp	r3, #5
 8002e0a:	d10c      	bne.n	8002e26 <HAL_RCC_OscConfig+0x356>
 8002e0c:	4b6d      	ldr	r3, [pc, #436]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	4a6c      	ldr	r2, [pc, #432]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e12:	f043 0304 	orr.w	r3, r3, #4
 8002e16:	6213      	str	r3, [r2, #32]
 8002e18:	4b6a      	ldr	r3, [pc, #424]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	4a69      	ldr	r2, [pc, #420]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e1e:	f043 0301 	orr.w	r3, r3, #1
 8002e22:	6213      	str	r3, [r2, #32]
 8002e24:	e00b      	b.n	8002e3e <HAL_RCC_OscConfig+0x36e>
 8002e26:	4b67      	ldr	r3, [pc, #412]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	4a66      	ldr	r2, [pc, #408]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e2c:	f023 0301 	bic.w	r3, r3, #1
 8002e30:	6213      	str	r3, [r2, #32]
 8002e32:	4b64      	ldr	r3, [pc, #400]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	4a63      	ldr	r2, [pc, #396]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e38:	f023 0304 	bic.w	r3, r3, #4
 8002e3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d015      	beq.n	8002e72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e46:	f7fe fc09 	bl	800165c <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4c:	e00a      	b.n	8002e64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4e:	f7fe fc05 	bl	800165c <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e0ab      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e64:	4b57      	ldr	r3, [pc, #348]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0ee      	beq.n	8002e4e <HAL_RCC_OscConfig+0x37e>
 8002e70:	e014      	b.n	8002e9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e72:	f7fe fbf3 	bl	800165c <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e78:	e00a      	b.n	8002e90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7a:	f7fe fbef 	bl	800165c <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e095      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e90:	4b4c      	ldr	r3, [pc, #304]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1ee      	bne.n	8002e7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e9c:	7dfb      	ldrb	r3, [r7, #23]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d105      	bne.n	8002eae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea2:	4b48      	ldr	r3, [pc, #288]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	4a47      	ldr	r2, [pc, #284]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 8081 	beq.w	8002fba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eb8:	4b42      	ldr	r3, [pc, #264]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 030c 	and.w	r3, r3, #12
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d061      	beq.n	8002f88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d146      	bne.n	8002f5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ecc:	4b3f      	ldr	r3, [pc, #252]	; (8002fcc <HAL_RCC_OscConfig+0x4fc>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed2:	f7fe fbc3 	bl	800165c <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eda:	f7fe fbbf 	bl	800165c <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e067      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eec:	4b35      	ldr	r3, [pc, #212]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1f0      	bne.n	8002eda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f00:	d108      	bne.n	8002f14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f02:	4b30      	ldr	r3, [pc, #192]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	492d      	ldr	r1, [pc, #180]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f14:	4b2b      	ldr	r3, [pc, #172]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a19      	ldr	r1, [r3, #32]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	430b      	orrs	r3, r1
 8002f26:	4927      	ldr	r1, [pc, #156]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f2c:	4b27      	ldr	r3, [pc, #156]	; (8002fcc <HAL_RCC_OscConfig+0x4fc>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f32:	f7fe fb93 	bl	800165c <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3a:	f7fe fb8f 	bl	800165c <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e037      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f4c:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0f0      	beq.n	8002f3a <HAL_RCC_OscConfig+0x46a>
 8002f58:	e02f      	b.n	8002fba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5a:	4b1c      	ldr	r3, [pc, #112]	; (8002fcc <HAL_RCC_OscConfig+0x4fc>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f60:	f7fe fb7c 	bl	800165c <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f68:	f7fe fb78 	bl	800165c <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e020      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f7a:	4b12      	ldr	r3, [pc, #72]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0x498>
 8002f86:	e018      	b.n	8002fba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e013      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f94:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d106      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d001      	beq.n	8002fba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40007000 	.word	0x40007000
 8002fcc:	42420060 	.word	0x42420060

08002fd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0d0      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe4:	4b6a      	ldr	r3, [pc, #424]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d910      	bls.n	8003014 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff2:	4b67      	ldr	r3, [pc, #412]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 0207 	bic.w	r2, r3, #7
 8002ffa:	4965      	ldr	r1, [pc, #404]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003002:	4b63      	ldr	r3, [pc, #396]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d001      	beq.n	8003014 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0b8      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d020      	beq.n	8003062 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800302c:	4b59      	ldr	r3, [pc, #356]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4a58      	ldr	r2, [pc, #352]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003032:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003036:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003044:	4b53      	ldr	r3, [pc, #332]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	4a52      	ldr	r2, [pc, #328]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800304a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800304e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003050:	4b50      	ldr	r3, [pc, #320]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	494d      	ldr	r1, [pc, #308]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800305e:	4313      	orrs	r3, r2
 8003060:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d040      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d107      	bne.n	8003086 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003076:	4b47      	ldr	r3, [pc, #284]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d115      	bne.n	80030ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e07f      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d107      	bne.n	800309e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308e:	4b41      	ldr	r3, [pc, #260]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d109      	bne.n	80030ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e073      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309e:	4b3d      	ldr	r3, [pc, #244]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e06b      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ae:	4b39      	ldr	r3, [pc, #228]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f023 0203 	bic.w	r2, r3, #3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	4936      	ldr	r1, [pc, #216]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030c0:	f7fe facc 	bl	800165c <HAL_GetTick>
 80030c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c6:	e00a      	b.n	80030de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c8:	f7fe fac8 	bl	800165c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e053      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030de:	4b2d      	ldr	r3, [pc, #180]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 020c 	and.w	r2, r3, #12
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d1eb      	bne.n	80030c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030f0:	4b27      	ldr	r3, [pc, #156]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d210      	bcs.n	8003120 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fe:	4b24      	ldr	r3, [pc, #144]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 0207 	bic.w	r2, r3, #7
 8003106:	4922      	ldr	r1, [pc, #136]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	4313      	orrs	r3, r2
 800310c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800310e:	4b20      	ldr	r3, [pc, #128]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d001      	beq.n	8003120 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e032      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d008      	beq.n	800313e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800312c:	4b19      	ldr	r3, [pc, #100]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	4916      	ldr	r1, [pc, #88]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800313a:	4313      	orrs	r3, r2
 800313c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d009      	beq.n	800315e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800314a:	4b12      	ldr	r3, [pc, #72]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	490e      	ldr	r1, [pc, #56]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800315a:	4313      	orrs	r3, r2
 800315c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800315e:	f000 f821 	bl	80031a4 <HAL_RCC_GetSysClockFreq>
 8003162:	4601      	mov	r1, r0
 8003164:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	091b      	lsrs	r3, r3, #4
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <HAL_RCC_ClockConfig+0x1c8>)
 8003170:	5cd3      	ldrb	r3, [r2, r3]
 8003172:	fa21 f303 	lsr.w	r3, r1, r3
 8003176:	4a09      	ldr	r2, [pc, #36]	; (800319c <HAL_RCC_ClockConfig+0x1cc>)
 8003178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800317a:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <HAL_RCC_ClockConfig+0x1d0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe f9a0 	bl	80014c4 <HAL_InitTick>

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40022000 	.word	0x40022000
 8003194:	40021000 	.word	0x40021000
 8003198:	08006724 	.word	0x08006724
 800319c:	20000000 	.word	0x20000000
 80031a0:	20000004 	.word	0x20000004

080031a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031a4:	b490      	push	{r4, r7}
 80031a6:	b08a      	sub	sp, #40	; 0x28
 80031a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80031aa:	4b2a      	ldr	r3, [pc, #168]	; (8003254 <HAL_RCC_GetSysClockFreq+0xb0>)
 80031ac:	1d3c      	adds	r4, r7, #4
 80031ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80031b4:	4b28      	ldr	r3, [pc, #160]	; (8003258 <HAL_RCC_GetSysClockFreq+0xb4>)
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
 80031be:	2300      	movs	r3, #0
 80031c0:	61bb      	str	r3, [r7, #24]
 80031c2:	2300      	movs	r3, #0
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031ce:	4b23      	ldr	r3, [pc, #140]	; (800325c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d002      	beq.n	80031e4 <HAL_RCC_GetSysClockFreq+0x40>
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d003      	beq.n	80031ea <HAL_RCC_GetSysClockFreq+0x46>
 80031e2:	e02d      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031e4:	4b1e      	ldr	r3, [pc, #120]	; (8003260 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031e6:	623b      	str	r3, [r7, #32]
      break;
 80031e8:	e02d      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	0c9b      	lsrs	r3, r3, #18
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031f6:	4413      	add	r3, r2
 80031f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80031fc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d013      	beq.n	8003230 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003208:	4b14      	ldr	r3, [pc, #80]	; (800325c <HAL_RCC_GetSysClockFreq+0xb8>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	0c5b      	lsrs	r3, r3, #17
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003216:	4413      	add	r3, r2
 8003218:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800321c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	4a0f      	ldr	r2, [pc, #60]	; (8003260 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003222:	fb02 f203 	mul.w	r2, r2, r3
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	fbb2 f3f3 	udiv	r3, r2, r3
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
 800322e:	e004      	b.n	800323a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	4a0c      	ldr	r2, [pc, #48]	; (8003264 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003234:	fb02 f303 	mul.w	r3, r2, r3
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	623b      	str	r3, [r7, #32]
      break;
 800323e:	e002      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003240:	4b07      	ldr	r3, [pc, #28]	; (8003260 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003242:	623b      	str	r3, [r7, #32]
      break;
 8003244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003246:	6a3b      	ldr	r3, [r7, #32]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3728      	adds	r7, #40	; 0x28
 800324c:	46bd      	mov	sp, r7
 800324e:	bc90      	pop	{r4, r7}
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	080066b0 	.word	0x080066b0
 8003258:	080066c0 	.word	0x080066c0
 800325c:	40021000 	.word	0x40021000
 8003260:	007a1200 	.word	0x007a1200
 8003264:	003d0900 	.word	0x003d0900

08003268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800326c:	4b02      	ldr	r3, [pc, #8]	; (8003278 <HAL_RCC_GetHCLKFreq+0x10>)
 800326e:	681b      	ldr	r3, [r3, #0]
}
 8003270:	4618      	mov	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr
 8003278:	20000000 	.word	0x20000000

0800327c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003280:	f7ff fff2 	bl	8003268 <HAL_RCC_GetHCLKFreq>
 8003284:	4601      	mov	r1, r0
 8003286:	4b05      	ldr	r3, [pc, #20]	; (800329c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	0a1b      	lsrs	r3, r3, #8
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	4a03      	ldr	r2, [pc, #12]	; (80032a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003292:	5cd3      	ldrb	r3, [r2, r3]
 8003294:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003298:	4618      	mov	r0, r3
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40021000 	.word	0x40021000
 80032a0:	08006734 	.word	0x08006734

080032a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032a8:	f7ff ffde 	bl	8003268 <HAL_RCC_GetHCLKFreq>
 80032ac:	4601      	mov	r1, r0
 80032ae:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	0adb      	lsrs	r3, r3, #11
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	4a03      	ldr	r2, [pc, #12]	; (80032c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ba:	5cd3      	ldrb	r3, [r2, r3]
 80032bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40021000 	.word	0x40021000
 80032c8:	08006734 	.word	0x08006734

080032cc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	220f      	movs	r2, #15
 80032da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032dc:	4b11      	ldr	r3, [pc, #68]	; (8003324 <HAL_RCC_GetClockConfig+0x58>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 0203 	and.w	r2, r3, #3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032e8:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <HAL_RCC_GetClockConfig+0x58>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <HAL_RCC_GetClockConfig+0x58>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003300:	4b08      	ldr	r3, [pc, #32]	; (8003324 <HAL_RCC_GetClockConfig+0x58>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	08db      	lsrs	r3, r3, #3
 8003306:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800330e:	4b06      	ldr	r3, [pc, #24]	; (8003328 <HAL_RCC_GetClockConfig+0x5c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0207 	and.w	r2, r3, #7
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr
 8003324:	40021000 	.word	0x40021000
 8003328:	40022000 	.word	0x40022000

0800332c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003334:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <RCC_Delay+0x34>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a0a      	ldr	r2, [pc, #40]	; (8003364 <RCC_Delay+0x38>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	0a5b      	lsrs	r3, r3, #9
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	fb02 f303 	mul.w	r3, r2, r3
 8003346:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003348:	bf00      	nop
  }
  while (Delay --);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1e5a      	subs	r2, r3, #1
 800334e:	60fa      	str	r2, [r7, #12]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1f9      	bne.n	8003348 <RCC_Delay+0x1c>
}
 8003354:	bf00      	nop
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	20000000 	.word	0x20000000
 8003364:	10624dd3 	.word	0x10624dd3

08003368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e041      	b.n	80033fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f839 	bl	8003406 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3304      	adds	r3, #4
 80033a4:	4619      	mov	r1, r3
 80033a6:	4610      	mov	r0, r2
 80033a8:	f000 f9b4 	bl	8003714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr

08003418 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b01      	cmp	r3, #1
 800342a:	d001      	beq.n	8003430 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e03a      	b.n	80034a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 0201 	orr.w	r2, r2, #1
 8003446:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a18      	ldr	r2, [pc, #96]	; (80034b0 <HAL_TIM_Base_Start_IT+0x98>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00e      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x58>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800345a:	d009      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x58>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a14      	ldr	r2, [pc, #80]	; (80034b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d004      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x58>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a13      	ldr	r2, [pc, #76]	; (80034b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d111      	bne.n	8003494 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b06      	cmp	r3, #6
 8003480:	d010      	beq.n	80034a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003492:	e007      	b.n	80034a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr
 80034b0:	40012c00 	.word	0x40012c00
 80034b4:	40000400 	.word	0x40000400
 80034b8:	40000800 	.word	0x40000800

080034bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d122      	bne.n	8003518 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d11b      	bne.n	8003518 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0202 	mvn.w	r2, #2
 80034e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f8ed 	bl	80036de <HAL_TIM_IC_CaptureCallback>
 8003504:	e005      	b.n	8003512 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f8e0 	bl	80036cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f8ef 	bl	80036f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	2b04      	cmp	r3, #4
 8003524:	d122      	bne.n	800356c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b04      	cmp	r3, #4
 8003532:	d11b      	bne.n	800356c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f06f 0204 	mvn.w	r2, #4
 800353c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2202      	movs	r2, #2
 8003542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f8c3 	bl	80036de <HAL_TIM_IC_CaptureCallback>
 8003558:	e005      	b.n	8003566 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f8b6 	bl	80036cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f8c5 	bl	80036f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b08      	cmp	r3, #8
 8003578:	d122      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b08      	cmp	r3, #8
 8003586:	d11b      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f06f 0208 	mvn.w	r2, #8
 8003590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2204      	movs	r2, #4
 8003596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f899 	bl	80036de <HAL_TIM_IC_CaptureCallback>
 80035ac:	e005      	b.n	80035ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f88c 	bl	80036cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f89b 	bl	80036f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f003 0310 	and.w	r3, r3, #16
 80035ca:	2b10      	cmp	r3, #16
 80035cc:	d122      	bne.n	8003614 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f003 0310 	and.w	r3, r3, #16
 80035d8:	2b10      	cmp	r3, #16
 80035da:	d11b      	bne.n	8003614 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0210 	mvn.w	r2, #16
 80035e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2208      	movs	r2, #8
 80035ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f86f 	bl	80036de <HAL_TIM_IC_CaptureCallback>
 8003600:	e005      	b.n	800360e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f862 	bl	80036cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f871 	bl	80036f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b01      	cmp	r3, #1
 8003620:	d10e      	bne.n	8003640 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b01      	cmp	r3, #1
 800362e:	d107      	bne.n	8003640 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0201 	mvn.w	r2, #1
 8003638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fd fe86 	bl	800134c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364a:	2b80      	cmp	r3, #128	; 0x80
 800364c:	d10e      	bne.n	800366c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003658:	2b80      	cmp	r3, #128	; 0x80
 800365a:	d107      	bne.n	800366c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f8bf 	bl	80037ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003676:	2b40      	cmp	r3, #64	; 0x40
 8003678:	d10e      	bne.n	8003698 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003684:	2b40      	cmp	r3, #64	; 0x40
 8003686:	d107      	bne.n	8003698 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f835 	bl	8003702 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	d10e      	bne.n	80036c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	d107      	bne.n	80036c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f06f 0220 	mvn.w	r2, #32
 80036bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f88a 	bl	80037d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036c4:	bf00      	nop
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr

080036de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bc80      	pop	{r7}
 8003700:	4770      	bx	lr

08003702 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr

08003714 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a29      	ldr	r2, [pc, #164]	; (80037cc <TIM_Base_SetConfig+0xb8>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d00b      	beq.n	8003744 <TIM_Base_SetConfig+0x30>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003732:	d007      	beq.n	8003744 <TIM_Base_SetConfig+0x30>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a26      	ldr	r2, [pc, #152]	; (80037d0 <TIM_Base_SetConfig+0xbc>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d003      	beq.n	8003744 <TIM_Base_SetConfig+0x30>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a25      	ldr	r2, [pc, #148]	; (80037d4 <TIM_Base_SetConfig+0xc0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d108      	bne.n	8003756 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a1c      	ldr	r2, [pc, #112]	; (80037cc <TIM_Base_SetConfig+0xb8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d00b      	beq.n	8003776 <TIM_Base_SetConfig+0x62>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003764:	d007      	beq.n	8003776 <TIM_Base_SetConfig+0x62>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a19      	ldr	r2, [pc, #100]	; (80037d0 <TIM_Base_SetConfig+0xbc>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d003      	beq.n	8003776 <TIM_Base_SetConfig+0x62>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a18      	ldr	r2, [pc, #96]	; (80037d4 <TIM_Base_SetConfig+0xc0>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d108      	bne.n	8003788 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800377c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	4313      	orrs	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	4313      	orrs	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a07      	ldr	r2, [pc, #28]	; (80037cc <TIM_Base_SetConfig+0xb8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d103      	bne.n	80037bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	691a      	ldr	r2, [r3, #16]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	615a      	str	r2, [r3, #20]
}
 80037c2:	bf00      	nop
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bc80      	pop	{r7}
 80037ca:	4770      	bx	lr
 80037cc:	40012c00 	.word	0x40012c00
 80037d0:	40000400 	.word	0x40000400
 80037d4:	40000800 	.word	0x40000800

080037d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr

080037ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr

080037fc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003802:	f3ef 8305 	mrs	r3, IPSR
 8003806:	60bb      	str	r3, [r7, #8]
  return(result);
 8003808:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10f      	bne.n	800382e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800380e:	f3ef 8310 	mrs	r3, PRIMASK
 8003812:	607b      	str	r3, [r7, #4]
  return(result);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d109      	bne.n	800382e <osKernelInitialize+0x32>
 800381a:	4b10      	ldr	r3, [pc, #64]	; (800385c <osKernelInitialize+0x60>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d109      	bne.n	8003836 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003822:	f3ef 8311 	mrs	r3, BASEPRI
 8003826:	603b      	str	r3, [r7, #0]
  return(result);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800382e:	f06f 0305 	mvn.w	r3, #5
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	e00c      	b.n	8003850 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003836:	4b09      	ldr	r3, [pc, #36]	; (800385c <osKernelInitialize+0x60>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d105      	bne.n	800384a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800383e:	4b07      	ldr	r3, [pc, #28]	; (800385c <osKernelInitialize+0x60>)
 8003840:	2201      	movs	r2, #1
 8003842:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003844:	2300      	movs	r3, #0
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	e002      	b.n	8003850 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800384a:	f04f 33ff 	mov.w	r3, #4294967295
 800384e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003850:	68fb      	ldr	r3, [r7, #12]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr
 800385c:	2000002c 	.word	0x2000002c

08003860 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003866:	f3ef 8305 	mrs	r3, IPSR
 800386a:	60bb      	str	r3, [r7, #8]
  return(result);
 800386c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10f      	bne.n	8003892 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003872:	f3ef 8310 	mrs	r3, PRIMASK
 8003876:	607b      	str	r3, [r7, #4]
  return(result);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d109      	bne.n	8003892 <osKernelStart+0x32>
 800387e:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <osKernelStart+0x64>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d109      	bne.n	800389a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003886:	f3ef 8311 	mrs	r3, BASEPRI
 800388a:	603b      	str	r3, [r7, #0]
  return(result);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003892:	f06f 0305 	mvn.w	r3, #5
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	e00e      	b.n	80038b8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800389a:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <osKernelStart+0x64>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d107      	bne.n	80038b2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80038a2:	4b08      	ldr	r3, [pc, #32]	; (80038c4 <osKernelStart+0x64>)
 80038a4:	2202      	movs	r2, #2
 80038a6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80038a8:	f001 f864 	bl	8004974 <vTaskStartScheduler>
      stat = osOK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	e002      	b.n	80038b8 <osKernelStart+0x58>
    } else {
      stat = osError;
 80038b2:	f04f 33ff 	mov.w	r3, #4294967295
 80038b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80038b8:	68fb      	ldr	r3, [r7, #12]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	2000002c 	.word	0x2000002c

080038c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b092      	sub	sp, #72	; 0x48
 80038cc:	af04      	add	r7, sp, #16
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80038d4:	2300      	movs	r3, #0
 80038d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038d8:	f3ef 8305 	mrs	r3, IPSR
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f040 8094 	bne.w	8003a0e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038e6:	f3ef 8310 	mrs	r3, PRIMASK
 80038ea:	623b      	str	r3, [r7, #32]
  return(result);
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f040 808d 	bne.w	8003a0e <osThreadNew+0x146>
 80038f4:	4b48      	ldr	r3, [pc, #288]	; (8003a18 <osThreadNew+0x150>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d106      	bne.n	800390a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80038fc:	f3ef 8311 	mrs	r3, BASEPRI
 8003900:	61fb      	str	r3, [r7, #28]
  return(result);
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	2b00      	cmp	r3, #0
 8003906:	f040 8082 	bne.w	8003a0e <osThreadNew+0x146>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d07e      	beq.n	8003a0e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003910:	2380      	movs	r3, #128	; 0x80
 8003912:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003914:	2318      	movs	r3, #24
 8003916:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003918:	2300      	movs	r3, #0
 800391a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800391c:	f107 031b 	add.w	r3, r7, #27
 8003920:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003922:	f04f 33ff 	mov.w	r3, #4294967295
 8003926:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d045      	beq.n	80039ba <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <osThreadNew+0x74>
        name = attr->name;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d002      	beq.n	800394a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800394a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394c:	2b00      	cmp	r3, #0
 800394e:	d008      	beq.n	8003962 <osThreadNew+0x9a>
 8003950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003952:	2b38      	cmp	r3, #56	; 0x38
 8003954:	d805      	bhi.n	8003962 <osThreadNew+0x9a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <osThreadNew+0x9e>
        return (NULL);
 8003962:	2300      	movs	r3, #0
 8003964:	e054      	b.n	8003a10 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	089b      	lsrs	r3, r3, #2
 8003974:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00e      	beq.n	800399c <osThreadNew+0xd4>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	2b5b      	cmp	r3, #91	; 0x5b
 8003984:	d90a      	bls.n	800399c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800398a:	2b00      	cmp	r3, #0
 800398c:	d006      	beq.n	800399c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <osThreadNew+0xd4>
        mem = 1;
 8003996:	2301      	movs	r3, #1
 8003998:	62bb      	str	r3, [r7, #40]	; 0x28
 800399a:	e010      	b.n	80039be <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10c      	bne.n	80039be <osThreadNew+0xf6>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d108      	bne.n	80039be <osThreadNew+0xf6>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d104      	bne.n	80039be <osThreadNew+0xf6>
          mem = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80039b8:	e001      	b.n	80039be <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80039ba:	2300      	movs	r3, #0
 80039bc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80039be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d110      	bne.n	80039e6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80039cc:	9202      	str	r2, [sp, #8]
 80039ce:	9301      	str	r3, [sp, #4]
 80039d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 fe02 	bl	80045e4 <xTaskCreateStatic>
 80039e0:	4603      	mov	r3, r0
 80039e2:	617b      	str	r3, [r7, #20]
 80039e4:	e013      	b.n	8003a0e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80039e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d110      	bne.n	8003a0e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80039ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	f107 0314 	add.w	r3, r7, #20
 80039f4:	9301      	str	r3, [sp, #4]
 80039f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 fe49 	bl	8004696 <xTaskCreate>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d001      	beq.n	8003a0e <osThreadNew+0x146>
          hTask = NULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003a0e:	697b      	ldr	r3, [r7, #20]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3738      	adds	r7, #56	; 0x38
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	2000002c 	.word	0x2000002c

08003a1c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a24:	f3ef 8305 	mrs	r3, IPSR
 8003a28:	613b      	str	r3, [r7, #16]
  return(result);
 8003a2a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10f      	bne.n	8003a50 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a30:	f3ef 8310 	mrs	r3, PRIMASK
 8003a34:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d109      	bne.n	8003a50 <osDelay+0x34>
 8003a3c:	4b0d      	ldr	r3, [pc, #52]	; (8003a74 <osDelay+0x58>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d109      	bne.n	8003a58 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a44:	f3ef 8311 	mrs	r3, BASEPRI
 8003a48:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <osDelay+0x3c>
    stat = osErrorISR;
 8003a50:	f06f 0305 	mvn.w	r3, #5
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	e007      	b.n	8003a68 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 ff52 	bl	800490c <vTaskDelay>
    }
  }

  return (stat);
 8003a68:	697b      	ldr	r3, [r7, #20]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3718      	adds	r7, #24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	2000002c 	.word	0x2000002c

08003a78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4a06      	ldr	r2, [pc, #24]	; (8003aa0 <vApplicationGetIdleTaskMemory+0x28>)
 8003a88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	4a05      	ldr	r2, [pc, #20]	; (8003aa4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003a8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2280      	movs	r2, #128	; 0x80
 8003a94:	601a      	str	r2, [r3, #0]
}
 8003a96:	bf00      	nop
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr
 8003aa0:	20000030 	.word	0x20000030
 8003aa4:	2000008c 	.word	0x2000008c

08003aa8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4a07      	ldr	r2, [pc, #28]	; (8003ad4 <vApplicationGetTimerTaskMemory+0x2c>)
 8003ab8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	4a06      	ldr	r2, [pc, #24]	; (8003ad8 <vApplicationGetTimerTaskMemory+0x30>)
 8003abe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ac6:	601a      	str	r2, [r3, #0]
}
 8003ac8:	bf00      	nop
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bc80      	pop	{r7}
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	2000028c 	.word	0x2000028c
 8003ad8:	200002e8 	.word	0x200002e8

08003adc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f103 0208 	add.w	r2, r3, #8
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f04f 32ff 	mov.w	r2, #4294967295
 8003af4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f103 0208 	add.w	r2, r3, #8
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f103 0208 	add.w	r2, r3, #8
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bc80      	pop	{r7}
 8003b18:	4770      	bx	lr

08003b1a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bc80      	pop	{r7}
 8003b30:	4770      	bx	lr

08003b32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b32:	b480      	push	{r7}
 8003b34:	b085      	sub	sp, #20
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	601a      	str	r2, [r3, #0]
}
 8003b6e:	bf00      	nop
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr

08003b78 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8e:	d103      	bne.n	8003b98 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	e00c      	b.n	8003bb2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3308      	adds	r3, #8
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	e002      	b.n	8003ba6 <vListInsert+0x2e>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d2f6      	bcs.n	8003ba0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	601a      	str	r2, [r3, #0]
}
 8003bde:	bf00      	nop
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bc80      	pop	{r7}
 8003be6:	4770      	bx	lr

08003be8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6892      	ldr	r2, [r2, #8]
 8003bfe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6852      	ldr	r2, [r2, #4]
 8003c08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d103      	bne.n	8003c1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	1e5a      	subs	r2, r3, #1
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bc80      	pop	{r7}
 8003c38:	4770      	bx	lr
	...

08003c3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d109      	bne.n	8003c64 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c54:	f383 8811 	msr	BASEPRI, r3
 8003c58:	f3bf 8f6f 	isb	sy
 8003c5c:	f3bf 8f4f 	dsb	sy
 8003c60:	60bb      	str	r3, [r7, #8]
 8003c62:	e7fe      	b.n	8003c62 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003c64:	f001 ff98 	bl	8005b98 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c70:	68f9      	ldr	r1, [r7, #12]
 8003c72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c74:	fb01 f303 	mul.w	r3, r1, r3
 8003c78:	441a      	add	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c94:	3b01      	subs	r3, #1
 8003c96:	68f9      	ldr	r1, [r7, #12]
 8003c98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c9a:	fb01 f303 	mul.w	r3, r1, r3
 8003c9e:	441a      	add	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	22ff      	movs	r2, #255	; 0xff
 8003ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	22ff      	movs	r2, #255	; 0xff
 8003cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d114      	bne.n	8003ce4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d01a      	beq.n	8003cf8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	3310      	adds	r3, #16
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f001 f8d8 	bl	8004e7c <xTaskRemoveFromEventList>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d012      	beq.n	8003cf8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003cd2:	4b0d      	ldr	r3, [pc, #52]	; (8003d08 <xQueueGenericReset+0xcc>)
 8003cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	e009      	b.n	8003cf8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	3310      	adds	r3, #16
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff fef7 	bl	8003adc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	3324      	adds	r3, #36	; 0x24
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7ff fef2 	bl	8003adc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003cf8:	f001 ff7c 	bl	8005bf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003cfc:	2301      	movs	r3, #1
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	e000ed04 	.word	0xe000ed04

08003d0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08e      	sub	sp, #56	; 0x38
 8003d10:	af02      	add	r7, sp, #8
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d109      	bne.n	8003d34 <xQueueGenericCreateStatic+0x28>
 8003d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d32:	e7fe      	b.n	8003d32 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d109      	bne.n	8003d4e <xQueueGenericCreateStatic+0x42>
 8003d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3e:	f383 8811 	msr	BASEPRI, r3
 8003d42:	f3bf 8f6f 	isb	sy
 8003d46:	f3bf 8f4f 	dsb	sy
 8003d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4c:	e7fe      	b.n	8003d4c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <xQueueGenericCreateStatic+0x4e>
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <xQueueGenericCreateStatic+0x52>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <xQueueGenericCreateStatic+0x54>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d109      	bne.n	8003d78 <xQueueGenericCreateStatic+0x6c>
 8003d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	623b      	str	r3, [r7, #32]
 8003d76:	e7fe      	b.n	8003d76 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d102      	bne.n	8003d84 <xQueueGenericCreateStatic+0x78>
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <xQueueGenericCreateStatic+0x7c>
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <xQueueGenericCreateStatic+0x7e>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d109      	bne.n	8003da2 <xQueueGenericCreateStatic+0x96>
 8003d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d92:	f383 8811 	msr	BASEPRI, r3
 8003d96:	f3bf 8f6f 	isb	sy
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	61fb      	str	r3, [r7, #28]
 8003da0:	e7fe      	b.n	8003da0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003da2:	2350      	movs	r3, #80	; 0x50
 8003da4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2b50      	cmp	r3, #80	; 0x50
 8003daa:	d009      	beq.n	8003dc0 <xQueueGenericCreateStatic+0xb4>
 8003dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	61bb      	str	r3, [r7, #24]
 8003dbe:	e7fe      	b.n	8003dbe <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00d      	beq.n	8003de6 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003dd2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	68b9      	ldr	r1, [r7, #8]
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f805 	bl	8003df0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3730      	adds	r7, #48	; 0x30
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
 8003dfc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d103      	bne.n	8003e0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	e002      	b.n	8003e12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e1e:	2101      	movs	r1, #1
 8003e20:	69b8      	ldr	r0, [r7, #24]
 8003e22:	f7ff ff0b 	bl	8003c3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	78fa      	ldrb	r2, [r7, #3]
 8003e2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e2e:	bf00      	nop
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b08e      	sub	sp, #56	; 0x38
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003e46:	2300      	movs	r3, #0
 8003e48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d109      	bne.n	8003e68 <xQueueGenericSend+0x30>
 8003e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e58:	f383 8811 	msr	BASEPRI, r3
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e66:	e7fe      	b.n	8003e66 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d103      	bne.n	8003e76 <xQueueGenericSend+0x3e>
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <xQueueGenericSend+0x42>
 8003e76:	2301      	movs	r3, #1
 8003e78:	e000      	b.n	8003e7c <xQueueGenericSend+0x44>
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d109      	bne.n	8003e94 <xQueueGenericSend+0x5c>
 8003e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e84:	f383 8811 	msr	BASEPRI, r3
 8003e88:	f3bf 8f6f 	isb	sy
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24
 8003e92:	e7fe      	b.n	8003e92 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d103      	bne.n	8003ea2 <xQueueGenericSend+0x6a>
 8003e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d101      	bne.n	8003ea6 <xQueueGenericSend+0x6e>
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e000      	b.n	8003ea8 <xQueueGenericSend+0x70>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d109      	bne.n	8003ec0 <xQueueGenericSend+0x88>
 8003eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb0:	f383 8811 	msr	BASEPRI, r3
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	623b      	str	r3, [r7, #32]
 8003ebe:	e7fe      	b.n	8003ebe <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ec0:	f001 f996 	bl	80051f0 <xTaskGetSchedulerState>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d102      	bne.n	8003ed0 <xQueueGenericSend+0x98>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <xQueueGenericSend+0x9c>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e000      	b.n	8003ed6 <xQueueGenericSend+0x9e>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d109      	bne.n	8003eee <xQueueGenericSend+0xb6>
 8003eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	61fb      	str	r3, [r7, #28]
 8003eec:	e7fe      	b.n	8003eec <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003eee:	f001 fe53 	bl	8005b98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d302      	bcc.n	8003f04 <xQueueGenericSend+0xcc>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d129      	bne.n	8003f58 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	68b9      	ldr	r1, [r7, #8]
 8003f08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f0a:	f000 f9ff 	bl	800430c <prvCopyDataToQueue>
 8003f0e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d010      	beq.n	8003f3a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1a:	3324      	adds	r3, #36	; 0x24
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 ffad 	bl	8004e7c <xTaskRemoveFromEventList>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d013      	beq.n	8003f50 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003f28:	4b3f      	ldr	r3, [pc, #252]	; (8004028 <xQueueGenericSend+0x1f0>)
 8003f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	f3bf 8f6f 	isb	sy
 8003f38:	e00a      	b.n	8003f50 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d007      	beq.n	8003f50 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003f40:	4b39      	ldr	r3, [pc, #228]	; (8004028 <xQueueGenericSend+0x1f0>)
 8003f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003f50:	f001 fe50 	bl	8005bf4 <vPortExitCritical>
				return pdPASS;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e063      	b.n	8004020 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d103      	bne.n	8003f66 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f5e:	f001 fe49 	bl	8005bf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003f62:	2300      	movs	r3, #0
 8003f64:	e05c      	b.n	8004020 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d106      	bne.n	8003f7a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f6c:	f107 0314 	add.w	r3, r7, #20
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 ffe5 	bl	8004f40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f76:	2301      	movs	r3, #1
 8003f78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f7a:	f001 fe3b 	bl	8005bf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f7e:	f000 fd5d 	bl	8004a3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f82:	f001 fe09 	bl	8005b98 <vPortEnterCritical>
 8003f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f8c:	b25b      	sxtb	r3, r3
 8003f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f92:	d103      	bne.n	8003f9c <xQueueGenericSend+0x164>
 8003f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fa2:	b25b      	sxtb	r3, r3
 8003fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa8:	d103      	bne.n	8003fb2 <xQueueGenericSend+0x17a>
 8003faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fb2:	f001 fe1f 	bl	8005bf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003fb6:	1d3a      	adds	r2, r7, #4
 8003fb8:	f107 0314 	add.w	r3, r7, #20
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 ffd4 	bl	8004f6c <xTaskCheckForTimeOut>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d124      	bne.n	8004014 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003fca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fcc:	f000 fa96 	bl	80044fc <prvIsQueueFull>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d018      	beq.n	8004008 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	3310      	adds	r3, #16
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	4611      	mov	r1, r2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fefe 	bl	8004de0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003fe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fe6:	f000 fa21 	bl	800442c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003fea:	f000 fd35 	bl	8004a58 <xTaskResumeAll>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f47f af7c 	bne.w	8003eee <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003ff6:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <xQueueGenericSend+0x1f0>)
 8003ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	f3bf 8f6f 	isb	sy
 8004006:	e772      	b.n	8003eee <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800400a:	f000 fa0f 	bl	800442c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800400e:	f000 fd23 	bl	8004a58 <xTaskResumeAll>
 8004012:	e76c      	b.n	8003eee <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004014:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004016:	f000 fa09 	bl	800442c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800401a:	f000 fd1d 	bl	8004a58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800401e:	2300      	movs	r3, #0
		}
	}
}
 8004020:	4618      	mov	r0, r3
 8004022:	3738      	adds	r7, #56	; 0x38
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	e000ed04 	.word	0xe000ed04

0800402c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08e      	sub	sp, #56	; 0x38
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800403e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004040:	2b00      	cmp	r3, #0
 8004042:	d109      	bne.n	8004058 <xQueueGenericSendFromISR+0x2c>
 8004044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	627b      	str	r3, [r7, #36]	; 0x24
 8004056:	e7fe      	b.n	8004056 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d103      	bne.n	8004066 <xQueueGenericSendFromISR+0x3a>
 800405e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <xQueueGenericSendFromISR+0x3e>
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <xQueueGenericSendFromISR+0x40>
 800406a:	2300      	movs	r3, #0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d109      	bne.n	8004084 <xQueueGenericSendFromISR+0x58>
 8004070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004074:	f383 8811 	msr	BASEPRI, r3
 8004078:	f3bf 8f6f 	isb	sy
 800407c:	f3bf 8f4f 	dsb	sy
 8004080:	623b      	str	r3, [r7, #32]
 8004082:	e7fe      	b.n	8004082 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d103      	bne.n	8004092 <xQueueGenericSendFromISR+0x66>
 800408a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408e:	2b01      	cmp	r3, #1
 8004090:	d101      	bne.n	8004096 <xQueueGenericSendFromISR+0x6a>
 8004092:	2301      	movs	r3, #1
 8004094:	e000      	b.n	8004098 <xQueueGenericSendFromISR+0x6c>
 8004096:	2300      	movs	r3, #0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d109      	bne.n	80040b0 <xQueueGenericSendFromISR+0x84>
 800409c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	61fb      	str	r3, [r7, #28]
 80040ae:	e7fe      	b.n	80040ae <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040b0:	f001 fe2c 	bl	8005d0c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80040b4:	f3ef 8211 	mrs	r2, BASEPRI
 80040b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040bc:	f383 8811 	msr	BASEPRI, r3
 80040c0:	f3bf 8f6f 	isb	sy
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	61ba      	str	r2, [r7, #24]
 80040ca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80040cc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80040ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d8:	429a      	cmp	r2, r3
 80040da:	d302      	bcc.n	80040e2 <xQueueGenericSendFromISR+0xb6>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d12c      	bne.n	800413c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80040e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	68b9      	ldr	r1, [r7, #8]
 80040f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040f2:	f000 f90b 	bl	800430c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80040f6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80040fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fe:	d112      	bne.n	8004126 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	2b00      	cmp	r3, #0
 8004106:	d016      	beq.n	8004136 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410a:	3324      	adds	r3, #36	; 0x24
 800410c:	4618      	mov	r0, r3
 800410e:	f000 feb5 	bl	8004e7c <xTaskRemoveFromEventList>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00e      	beq.n	8004136 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00b      	beq.n	8004136 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	e007      	b.n	8004136 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004126:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800412a:	3301      	adds	r3, #1
 800412c:	b2db      	uxtb	r3, r3
 800412e:	b25a      	sxtb	r2, r3
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004136:	2301      	movs	r3, #1
 8004138:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800413a:	e001      	b.n	8004140 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800413c:	2300      	movs	r3, #0
 800413e:	637b      	str	r3, [r7, #52]	; 0x34
 8004140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004142:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800414a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800414c:	4618      	mov	r0, r3
 800414e:	3738      	adds	r7, #56	; 0x38
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b08c      	sub	sp, #48	; 0x30
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004160:	2300      	movs	r3, #0
 8004162:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416a:	2b00      	cmp	r3, #0
 800416c:	d109      	bne.n	8004182 <xQueueReceive+0x2e>
	__asm volatile
 800416e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	623b      	str	r3, [r7, #32]
 8004180:	e7fe      	b.n	8004180 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d103      	bne.n	8004190 <xQueueReceive+0x3c>
 8004188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <xQueueReceive+0x40>
 8004190:	2301      	movs	r3, #1
 8004192:	e000      	b.n	8004196 <xQueueReceive+0x42>
 8004194:	2300      	movs	r3, #0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d109      	bne.n	80041ae <xQueueReceive+0x5a>
 800419a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	61fb      	str	r3, [r7, #28]
 80041ac:	e7fe      	b.n	80041ac <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041ae:	f001 f81f 	bl	80051f0 <xTaskGetSchedulerState>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d102      	bne.n	80041be <xQueueReceive+0x6a>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <xQueueReceive+0x6e>
 80041be:	2301      	movs	r3, #1
 80041c0:	e000      	b.n	80041c4 <xQueueReceive+0x70>
 80041c2:	2300      	movs	r3, #0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d109      	bne.n	80041dc <xQueueReceive+0x88>
 80041c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041cc:	f383 8811 	msr	BASEPRI, r3
 80041d0:	f3bf 8f6f 	isb	sy
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	61bb      	str	r3, [r7, #24]
 80041da:	e7fe      	b.n	80041da <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80041dc:	f001 fcdc 	bl	8005b98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01f      	beq.n	800422c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80041ec:	68b9      	ldr	r1, [r7, #8]
 80041ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041f0:	f000 f8f6 	bl	80043e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	1e5a      	subs	r2, r3, #1
 80041f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00f      	beq.n	8004224 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004206:	3310      	adds	r3, #16
 8004208:	4618      	mov	r0, r3
 800420a:	f000 fe37 	bl	8004e7c <xTaskRemoveFromEventList>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d007      	beq.n	8004224 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004214:	4b3c      	ldr	r3, [pc, #240]	; (8004308 <xQueueReceive+0x1b4>)
 8004216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004224:	f001 fce6 	bl	8005bf4 <vPortExitCritical>
				return pdPASS;
 8004228:	2301      	movs	r3, #1
 800422a:	e069      	b.n	8004300 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d103      	bne.n	800423a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004232:	f001 fcdf 	bl	8005bf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004236:	2300      	movs	r3, #0
 8004238:	e062      	b.n	8004300 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800423a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423c:	2b00      	cmp	r3, #0
 800423e:	d106      	bne.n	800424e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004240:	f107 0310 	add.w	r3, r7, #16
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fe7b 	bl	8004f40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800424a:	2301      	movs	r3, #1
 800424c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800424e:	f001 fcd1 	bl	8005bf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004252:	f000 fbf3 	bl	8004a3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004256:	f001 fc9f 	bl	8005b98 <vPortEnterCritical>
 800425a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004260:	b25b      	sxtb	r3, r3
 8004262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004266:	d103      	bne.n	8004270 <xQueueReceive+0x11c>
 8004268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004272:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004276:	b25b      	sxtb	r3, r3
 8004278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427c:	d103      	bne.n	8004286 <xQueueReceive+0x132>
 800427e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004280:	2200      	movs	r2, #0
 8004282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004286:	f001 fcb5 	bl	8005bf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800428a:	1d3a      	adds	r2, r7, #4
 800428c:	f107 0310 	add.w	r3, r7, #16
 8004290:	4611      	mov	r1, r2
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fe6a 	bl	8004f6c <xTaskCheckForTimeOut>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d123      	bne.n	80042e6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800429e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042a0:	f000 f916 	bl	80044d0 <prvIsQueueEmpty>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d017      	beq.n	80042da <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80042aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ac:	3324      	adds	r3, #36	; 0x24
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	4611      	mov	r1, r2
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 fd94 	bl	8004de0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80042b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042ba:	f000 f8b7 	bl	800442c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80042be:	f000 fbcb 	bl	8004a58 <xTaskResumeAll>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d189      	bne.n	80041dc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80042c8:	4b0f      	ldr	r3, [pc, #60]	; (8004308 <xQueueReceive+0x1b4>)
 80042ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	e780      	b.n	80041dc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80042da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042dc:	f000 f8a6 	bl	800442c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042e0:	f000 fbba 	bl	8004a58 <xTaskResumeAll>
 80042e4:	e77a      	b.n	80041dc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80042e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042e8:	f000 f8a0 	bl	800442c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042ec:	f000 fbb4 	bl	8004a58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042f2:	f000 f8ed 	bl	80044d0 <prvIsQueueEmpty>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f43f af6f 	beq.w	80041dc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80042fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004300:	4618      	mov	r0, r3
 8004302:	3730      	adds	r7, #48	; 0x30
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	e000ed04 	.word	0xe000ed04

0800430c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004318:	2300      	movs	r3, #0
 800431a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004320:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10d      	bne.n	8004346 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d14d      	bne.n	80043ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	4618      	mov	r0, r3
 8004338:	f000 ff78 	bl	800522c <xTaskPriorityDisinherit>
 800433c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	605a      	str	r2, [r3, #4]
 8004344:	e043      	b.n	80043ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d119      	bne.n	8004380 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6898      	ldr	r0, [r3, #8]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	461a      	mov	r2, r3
 8004356:	68b9      	ldr	r1, [r7, #8]
 8004358:	f001 ff0c 	bl	8006174 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	441a      	add	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	689a      	ldr	r2, [r3, #8]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	429a      	cmp	r2, r3
 8004374:	d32b      	bcc.n	80043ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	609a      	str	r2, [r3, #8]
 800437e:	e026      	b.n	80043ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	68d8      	ldr	r0, [r3, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004388:	461a      	mov	r2, r3
 800438a:	68b9      	ldr	r1, [r7, #8]
 800438c:	f001 fef2 	bl	8006174 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	68da      	ldr	r2, [r3, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004398:	425b      	negs	r3, r3
 800439a:	441a      	add	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d207      	bcs.n	80043bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	425b      	negs	r3, r3
 80043b6:	441a      	add	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d105      	bne.n	80043ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d002      	beq.n	80043ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80043d6:	697b      	ldr	r3, [r7, #20]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d018      	beq.n	8004424 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	441a      	add	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	429a      	cmp	r2, r3
 800440a:	d303      	bcc.n	8004414 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68d9      	ldr	r1, [r3, #12]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441c:	461a      	mov	r2, r3
 800441e:	6838      	ldr	r0, [r7, #0]
 8004420:	f001 fea8 	bl	8006174 <memcpy>
	}
}
 8004424:	bf00      	nop
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004434:	f001 fbb0 	bl	8005b98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800443e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004440:	e011      	b.n	8004466 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	2b00      	cmp	r3, #0
 8004448:	d012      	beq.n	8004470 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	3324      	adds	r3, #36	; 0x24
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fd14 	bl	8004e7c <xTaskRemoveFromEventList>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800445a:	f000 fde7 	bl	800502c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800445e:	7bfb      	ldrb	r3, [r7, #15]
 8004460:	3b01      	subs	r3, #1
 8004462:	b2db      	uxtb	r3, r3
 8004464:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800446a:	2b00      	cmp	r3, #0
 800446c:	dce9      	bgt.n	8004442 <prvUnlockQueue+0x16>
 800446e:	e000      	b.n	8004472 <prvUnlockQueue+0x46>
					break;
 8004470:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	22ff      	movs	r2, #255	; 0xff
 8004476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800447a:	f001 fbbb 	bl	8005bf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800447e:	f001 fb8b 	bl	8005b98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004488:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800448a:	e011      	b.n	80044b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d012      	beq.n	80044ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	3310      	adds	r3, #16
 8004498:	4618      	mov	r0, r3
 800449a:	f000 fcef 	bl	8004e7c <xTaskRemoveFromEventList>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80044a4:	f000 fdc2 	bl	800502c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80044a8:	7bbb      	ldrb	r3, [r7, #14]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80044b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	dce9      	bgt.n	800448c <prvUnlockQueue+0x60>
 80044b8:	e000      	b.n	80044bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80044ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	22ff      	movs	r2, #255	; 0xff
 80044c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80044c4:	f001 fb96 	bl	8005bf4 <vPortExitCritical>
}
 80044c8:	bf00      	nop
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044d8:	f001 fb5e 	bl	8005b98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d102      	bne.n	80044ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80044e4:	2301      	movs	r3, #1
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	e001      	b.n	80044ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80044ea:	2300      	movs	r3, #0
 80044ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044ee:	f001 fb81 	bl	8005bf4 <vPortExitCritical>

	return xReturn;
 80044f2:	68fb      	ldr	r3, [r7, #12]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004504:	f001 fb48 	bl	8005b98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004510:	429a      	cmp	r2, r3
 8004512:	d102      	bne.n	800451a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004514:	2301      	movs	r3, #1
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	e001      	b.n	800451e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800451a:	2300      	movs	r3, #0
 800451c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800451e:	f001 fb69 	bl	8005bf4 <vPortExitCritical>

	return xReturn;
 8004522:	68fb      	ldr	r3, [r7, #12]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004536:	2300      	movs	r3, #0
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	e014      	b.n	8004566 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800453c:	4a0e      	ldr	r2, [pc, #56]	; (8004578 <vQueueAddToRegistry+0x4c>)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10b      	bne.n	8004560 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004548:	490b      	ldr	r1, [pc, #44]	; (8004578 <vQueueAddToRegistry+0x4c>)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004552:	4a09      	ldr	r2, [pc, #36]	; (8004578 <vQueueAddToRegistry+0x4c>)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	4413      	add	r3, r2
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800455e:	e005      	b.n	800456c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	3301      	adds	r3, #1
 8004564:	60fb      	str	r3, [r7, #12]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2b07      	cmp	r3, #7
 800456a:	d9e7      	bls.n	800453c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800456c:	bf00      	nop
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	bc80      	pop	{r7}
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	20001a94 	.word	0x20001a94

0800457c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800458c:	f001 fb04 	bl	8005b98 <vPortEnterCritical>
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004596:	b25b      	sxtb	r3, r3
 8004598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459c:	d103      	bne.n	80045a6 <vQueueWaitForMessageRestricted+0x2a>
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045ac:	b25b      	sxtb	r3, r3
 80045ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b2:	d103      	bne.n	80045bc <vQueueWaitForMessageRestricted+0x40>
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045bc:	f001 fb1a 	bl	8005bf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d106      	bne.n	80045d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	3324      	adds	r3, #36	; 0x24
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	68b9      	ldr	r1, [r7, #8]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f000 fc29 	bl	8004e28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80045d6:	6978      	ldr	r0, [r7, #20]
 80045d8:	f7ff ff28 	bl	800442c <prvUnlockQueue>
	}
 80045dc:	bf00      	nop
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08e      	sub	sp, #56	; 0x38
 80045e8:	af04      	add	r7, sp, #16
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
 80045f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80045f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d109      	bne.n	800460c <xTaskCreateStatic+0x28>
 80045f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	623b      	str	r3, [r7, #32]
 800460a:	e7fe      	b.n	800460a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800460c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460e:	2b00      	cmp	r3, #0
 8004610:	d109      	bne.n	8004626 <xTaskCreateStatic+0x42>
 8004612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004616:	f383 8811 	msr	BASEPRI, r3
 800461a:	f3bf 8f6f 	isb	sy
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	61fb      	str	r3, [r7, #28]
 8004624:	e7fe      	b.n	8004624 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004626:	235c      	movs	r3, #92	; 0x5c
 8004628:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	2b5c      	cmp	r3, #92	; 0x5c
 800462e:	d009      	beq.n	8004644 <xTaskCreateStatic+0x60>
 8004630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	61bb      	str	r3, [r7, #24]
 8004642:	e7fe      	b.n	8004642 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004646:	2b00      	cmp	r3, #0
 8004648:	d01e      	beq.n	8004688 <xTaskCreateStatic+0xa4>
 800464a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464c:	2b00      	cmp	r3, #0
 800464e:	d01b      	beq.n	8004688 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004652:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004658:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	2202      	movs	r2, #2
 800465e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004662:	2300      	movs	r3, #0
 8004664:	9303      	str	r3, [sp, #12]
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	9302      	str	r3, [sp, #8]
 800466a:	f107 0314 	add.w	r3, r7, #20
 800466e:	9301      	str	r3, [sp, #4]
 8004670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 f850 	bl	8004720 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004680:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004682:	f000 f8d3 	bl	800482c <prvAddNewTaskToReadyList>
 8004686:	e001      	b.n	800468c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004688:	2300      	movs	r3, #0
 800468a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800468c:	697b      	ldr	r3, [r7, #20]
	}
 800468e:	4618      	mov	r0, r3
 8004690:	3728      	adds	r7, #40	; 0x28
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004696:	b580      	push	{r7, lr}
 8004698:	b08c      	sub	sp, #48	; 0x30
 800469a:	af04      	add	r7, sp, #16
 800469c:	60f8      	str	r0, [r7, #12]
 800469e:	60b9      	str	r1, [r7, #8]
 80046a0:	603b      	str	r3, [r7, #0]
 80046a2:	4613      	mov	r3, r2
 80046a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046a6:	88fb      	ldrh	r3, [r7, #6]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4618      	mov	r0, r3
 80046ac:	f001 fb6a 	bl	8005d84 <pvPortMalloc>
 80046b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00e      	beq.n	80046d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80046b8:	205c      	movs	r0, #92	; 0x5c
 80046ba:	f001 fb63 	bl	8005d84 <pvPortMalloc>
 80046be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30
 80046cc:	e005      	b.n	80046da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046ce:	6978      	ldr	r0, [r7, #20]
 80046d0:	f001 fc1a 	bl	8005f08 <vPortFree>
 80046d4:	e001      	b.n	80046da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80046d6:	2300      	movs	r3, #0
 80046d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d017      	beq.n	8004710 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80046e8:	88fa      	ldrh	r2, [r7, #6]
 80046ea:	2300      	movs	r3, #0
 80046ec:	9303      	str	r3, [sp, #12]
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	9302      	str	r3, [sp, #8]
 80046f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f4:	9301      	str	r3, [sp, #4]
 80046f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 f80e 	bl	8004720 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004704:	69f8      	ldr	r0, [r7, #28]
 8004706:	f000 f891 	bl	800482c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800470a:	2301      	movs	r3, #1
 800470c:	61bb      	str	r3, [r7, #24]
 800470e:	e002      	b.n	8004716 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004710:	f04f 33ff 	mov.w	r3, #4294967295
 8004714:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004716:	69bb      	ldr	r3, [r7, #24]
	}
 8004718:	4618      	mov	r0, r3
 800471a:	3720      	adds	r7, #32
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b088      	sub	sp, #32
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800472e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004730:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	461a      	mov	r2, r3
 8004738:	21a5      	movs	r1, #165	; 0xa5
 800473a:	f001 fd26 	bl	800618a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800473e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004748:	3b01      	subs	r3, #1
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	f023 0307 	bic.w	r3, r3, #7
 8004756:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	2b00      	cmp	r3, #0
 8004760:	d009      	beq.n	8004776 <prvInitialiseNewTask+0x56>
 8004762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004766:	f383 8811 	msr	BASEPRI, r3
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	617b      	str	r3, [r7, #20]
 8004774:	e7fe      	b.n	8004774 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004776:	2300      	movs	r3, #0
 8004778:	61fb      	str	r3, [r7, #28]
 800477a:	e012      	b.n	80047a2 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	4413      	add	r3, r2
 8004782:	7819      	ldrb	r1, [r3, #0]
 8004784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	4413      	add	r3, r2
 800478a:	3334      	adds	r3, #52	; 0x34
 800478c:	460a      	mov	r2, r1
 800478e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	4413      	add	r3, r2
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d006      	beq.n	80047aa <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	3301      	adds	r3, #1
 80047a0:	61fb      	str	r3, [r7, #28]
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	2b0f      	cmp	r3, #15
 80047a6:	d9e9      	bls.n	800477c <prvInitialiseNewTask+0x5c>
 80047a8:	e000      	b.n	80047ac <prvInitialiseNewTask+0x8c>
		{
			break;
 80047aa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b6:	2b37      	cmp	r3, #55	; 0x37
 80047b8:	d901      	bls.n	80047be <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047ba:	2337      	movs	r3, #55	; 0x37
 80047bc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80047be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047c2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80047c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047c8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80047ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047cc:	2200      	movs	r2, #0
 80047ce:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d2:	3304      	adds	r3, #4
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff f9a0 	bl	8003b1a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047dc:	3318      	adds	r3, #24
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff f99b 	bl	8003b1a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80047f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80047f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047f8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	2200      	movs	r2, #0
 80047fe:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	68f9      	ldr	r1, [r7, #12]
 800480c:	69b8      	ldr	r0, [r7, #24]
 800480e:	f001 f8d7 	bl	80059c0 <pxPortInitialiseStack>
 8004812:	4602      	mov	r2, r0
 8004814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004816:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800481e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004822:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004824:	bf00      	nop
 8004826:	3720      	adds	r7, #32
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004834:	f001 f9b0 	bl	8005b98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004838:	4b2d      	ldr	r3, [pc, #180]	; (80048f0 <prvAddNewTaskToReadyList+0xc4>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	3301      	adds	r3, #1
 800483e:	4a2c      	ldr	r2, [pc, #176]	; (80048f0 <prvAddNewTaskToReadyList+0xc4>)
 8004840:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004842:	4b2c      	ldr	r3, [pc, #176]	; (80048f4 <prvAddNewTaskToReadyList+0xc8>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d109      	bne.n	800485e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800484a:	4a2a      	ldr	r2, [pc, #168]	; (80048f4 <prvAddNewTaskToReadyList+0xc8>)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004850:	4b27      	ldr	r3, [pc, #156]	; (80048f0 <prvAddNewTaskToReadyList+0xc4>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d110      	bne.n	800487a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004858:	f000 fc0c 	bl	8005074 <prvInitialiseTaskLists>
 800485c:	e00d      	b.n	800487a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800485e:	4b26      	ldr	r3, [pc, #152]	; (80048f8 <prvAddNewTaskToReadyList+0xcc>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d109      	bne.n	800487a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004866:	4b23      	ldr	r3, [pc, #140]	; (80048f4 <prvAddNewTaskToReadyList+0xc8>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004870:	429a      	cmp	r2, r3
 8004872:	d802      	bhi.n	800487a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004874:	4a1f      	ldr	r2, [pc, #124]	; (80048f4 <prvAddNewTaskToReadyList+0xc8>)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800487a:	4b20      	ldr	r3, [pc, #128]	; (80048fc <prvAddNewTaskToReadyList+0xd0>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	3301      	adds	r3, #1
 8004880:	4a1e      	ldr	r2, [pc, #120]	; (80048fc <prvAddNewTaskToReadyList+0xd0>)
 8004882:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004884:	4b1d      	ldr	r3, [pc, #116]	; (80048fc <prvAddNewTaskToReadyList+0xd0>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004890:	4b1b      	ldr	r3, [pc, #108]	; (8004900 <prvAddNewTaskToReadyList+0xd4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d903      	bls.n	80048a0 <prvAddNewTaskToReadyList+0x74>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	4a18      	ldr	r2, [pc, #96]	; (8004900 <prvAddNewTaskToReadyList+0xd4>)
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a4:	4613      	mov	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4a15      	ldr	r2, [pc, #84]	; (8004904 <prvAddNewTaskToReadyList+0xd8>)
 80048ae:	441a      	add	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3304      	adds	r3, #4
 80048b4:	4619      	mov	r1, r3
 80048b6:	4610      	mov	r0, r2
 80048b8:	f7ff f93b 	bl	8003b32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80048bc:	f001 f99a 	bl	8005bf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80048c0:	4b0d      	ldr	r3, [pc, #52]	; (80048f8 <prvAddNewTaskToReadyList+0xcc>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00e      	beq.n	80048e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80048c8:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <prvAddNewTaskToReadyList+0xc8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d207      	bcs.n	80048e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80048d6:	4b0c      	ldr	r3, [pc, #48]	; (8004908 <prvAddNewTaskToReadyList+0xdc>)
 80048d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048e6:	bf00      	nop
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20000bbc 	.word	0x20000bbc
 80048f4:	200006e8 	.word	0x200006e8
 80048f8:	20000bc8 	.word	0x20000bc8
 80048fc:	20000bd8 	.word	0x20000bd8
 8004900:	20000bc4 	.word	0x20000bc4
 8004904:	200006ec 	.word	0x200006ec
 8004908:	e000ed04 	.word	0xe000ed04

0800490c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d016      	beq.n	800494c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800491e:	4b13      	ldr	r3, [pc, #76]	; (800496c <vTaskDelay+0x60>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d009      	beq.n	800493a <vTaskDelay+0x2e>
 8004926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492a:	f383 8811 	msr	BASEPRI, r3
 800492e:	f3bf 8f6f 	isb	sy
 8004932:	f3bf 8f4f 	dsb	sy
 8004936:	60bb      	str	r3, [r7, #8]
 8004938:	e7fe      	b.n	8004938 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800493a:	f000 f87f 	bl	8004a3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800493e:	2100      	movs	r1, #0
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 fcdf 	bl	8005304 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004946:	f000 f887 	bl	8004a58 <xTaskResumeAll>
 800494a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d107      	bne.n	8004962 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004952:	4b07      	ldr	r3, [pc, #28]	; (8004970 <vTaskDelay+0x64>)
 8004954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004962:	bf00      	nop
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	20000be4 	.word	0x20000be4
 8004970:	e000ed04 	.word	0xe000ed04

08004974 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b08a      	sub	sp, #40	; 0x28
 8004978:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800497a:	2300      	movs	r3, #0
 800497c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800497e:	2300      	movs	r3, #0
 8004980:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004982:	463a      	mov	r2, r7
 8004984:	1d39      	adds	r1, r7, #4
 8004986:	f107 0308 	add.w	r3, r7, #8
 800498a:	4618      	mov	r0, r3
 800498c:	f7ff f874 	bl	8003a78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004990:	6839      	ldr	r1, [r7, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	9202      	str	r2, [sp, #8]
 8004998:	9301      	str	r3, [sp, #4]
 800499a:	2300      	movs	r3, #0
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	2300      	movs	r3, #0
 80049a0:	460a      	mov	r2, r1
 80049a2:	4920      	ldr	r1, [pc, #128]	; (8004a24 <vTaskStartScheduler+0xb0>)
 80049a4:	4820      	ldr	r0, [pc, #128]	; (8004a28 <vTaskStartScheduler+0xb4>)
 80049a6:	f7ff fe1d 	bl	80045e4 <xTaskCreateStatic>
 80049aa:	4602      	mov	r2, r0
 80049ac:	4b1f      	ldr	r3, [pc, #124]	; (8004a2c <vTaskStartScheduler+0xb8>)
 80049ae:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80049b0:	4b1e      	ldr	r3, [pc, #120]	; (8004a2c <vTaskStartScheduler+0xb8>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d002      	beq.n	80049be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80049b8:	2301      	movs	r3, #1
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	e001      	b.n	80049c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80049be:	2300      	movs	r3, #0
 80049c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d102      	bne.n	80049ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80049c8:	f000 fcf0 	bl	80053ac <xTimerCreateTimerTask>
 80049cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d115      	bne.n	8004a00 <vTaskStartScheduler+0x8c>
 80049d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049e6:	4b12      	ldr	r3, [pc, #72]	; (8004a30 <vTaskStartScheduler+0xbc>)
 80049e8:	f04f 32ff 	mov.w	r2, #4294967295
 80049ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049ee:	4b11      	ldr	r3, [pc, #68]	; (8004a34 <vTaskStartScheduler+0xc0>)
 80049f0:	2201      	movs	r2, #1
 80049f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80049f4:	4b10      	ldr	r3, [pc, #64]	; (8004a38 <vTaskStartScheduler+0xc4>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049fa:	f001 f85d 	bl	8005ab8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049fe:	e00d      	b.n	8004a1c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a06:	d109      	bne.n	8004a1c <vTaskStartScheduler+0xa8>
 8004a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	60fb      	str	r3, [r7, #12]
 8004a1a:	e7fe      	b.n	8004a1a <vTaskStartScheduler+0xa6>
}
 8004a1c:	bf00      	nop
 8004a1e:	3718      	adds	r7, #24
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	080066c4 	.word	0x080066c4
 8004a28:	08005045 	.word	0x08005045
 8004a2c:	20000be0 	.word	0x20000be0
 8004a30:	20000bdc 	.word	0x20000bdc
 8004a34:	20000bc8 	.word	0x20000bc8
 8004a38:	20000bc0 	.word	0x20000bc0

08004a3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004a40:	4b04      	ldr	r3, [pc, #16]	; (8004a54 <vTaskSuspendAll+0x18>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3301      	adds	r3, #1
 8004a46:	4a03      	ldr	r2, [pc, #12]	; (8004a54 <vTaskSuspendAll+0x18>)
 8004a48:	6013      	str	r3, [r2, #0]
}
 8004a4a:	bf00      	nop
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bc80      	pop	{r7}
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	20000be4 	.word	0x20000be4

08004a58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a62:	2300      	movs	r3, #0
 8004a64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a66:	4b41      	ldr	r3, [pc, #260]	; (8004b6c <xTaskResumeAll+0x114>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d109      	bne.n	8004a82 <xTaskResumeAll+0x2a>
 8004a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	603b      	str	r3, [r7, #0]
 8004a80:	e7fe      	b.n	8004a80 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a82:	f001 f889 	bl	8005b98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a86:	4b39      	ldr	r3, [pc, #228]	; (8004b6c <xTaskResumeAll+0x114>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	4a37      	ldr	r2, [pc, #220]	; (8004b6c <xTaskResumeAll+0x114>)
 8004a8e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a90:	4b36      	ldr	r3, [pc, #216]	; (8004b6c <xTaskResumeAll+0x114>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d162      	bne.n	8004b5e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a98:	4b35      	ldr	r3, [pc, #212]	; (8004b70 <xTaskResumeAll+0x118>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d05e      	beq.n	8004b5e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004aa0:	e02f      	b.n	8004b02 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004aa2:	4b34      	ldr	r3, [pc, #208]	; (8004b74 <xTaskResumeAll+0x11c>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	3318      	adds	r3, #24
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff f89a 	bl	8003be8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff f895 	bl	8003be8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac2:	4b2d      	ldr	r3, [pc, #180]	; (8004b78 <xTaskResumeAll+0x120>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d903      	bls.n	8004ad2 <xTaskResumeAll+0x7a>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ace:	4a2a      	ldr	r2, [pc, #168]	; (8004b78 <xTaskResumeAll+0x120>)
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4a27      	ldr	r2, [pc, #156]	; (8004b7c <xTaskResumeAll+0x124>)
 8004ae0:	441a      	add	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4610      	mov	r0, r2
 8004aea:	f7ff f822 	bl	8003b32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af2:	4b23      	ldr	r3, [pc, #140]	; (8004b80 <xTaskResumeAll+0x128>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d302      	bcc.n	8004b02 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004afc:	4b21      	ldr	r3, [pc, #132]	; (8004b84 <xTaskResumeAll+0x12c>)
 8004afe:	2201      	movs	r2, #1
 8004b00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b02:	4b1c      	ldr	r3, [pc, #112]	; (8004b74 <xTaskResumeAll+0x11c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1cb      	bne.n	8004aa2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b10:	f000 fb4a 	bl	80051a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004b14:	4b1c      	ldr	r3, [pc, #112]	; (8004b88 <xTaskResumeAll+0x130>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d010      	beq.n	8004b42 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b20:	f000 f844 	bl	8004bac <xTaskIncrementTick>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004b2a:	4b16      	ldr	r3, [pc, #88]	; (8004b84 <xTaskResumeAll+0x12c>)
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f1      	bne.n	8004b20 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004b3c:	4b12      	ldr	r3, [pc, #72]	; (8004b88 <xTaskResumeAll+0x130>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b42:	4b10      	ldr	r3, [pc, #64]	; (8004b84 <xTaskResumeAll+0x12c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d009      	beq.n	8004b5e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b4e:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <xTaskResumeAll+0x134>)
 8004b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b5e:	f001 f849 	bl	8005bf4 <vPortExitCritical>

	return xAlreadyYielded;
 8004b62:	68bb      	ldr	r3, [r7, #8]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	20000be4 	.word	0x20000be4
 8004b70:	20000bbc 	.word	0x20000bbc
 8004b74:	20000b7c 	.word	0x20000b7c
 8004b78:	20000bc4 	.word	0x20000bc4
 8004b7c:	200006ec 	.word	0x200006ec
 8004b80:	200006e8 	.word	0x200006e8
 8004b84:	20000bd0 	.word	0x20000bd0
 8004b88:	20000bcc 	.word	0x20000bcc
 8004b8c:	e000ed04 	.word	0xe000ed04

08004b90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b96:	4b04      	ldr	r3, [pc, #16]	; (8004ba8 <xTaskGetTickCount+0x18>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b9c:	687b      	ldr	r3, [r7, #4]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bc80      	pop	{r7}
 8004ba6:	4770      	bx	lr
 8004ba8:	20000bc0 	.word	0x20000bc0

08004bac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bb6:	4b51      	ldr	r3, [pc, #324]	; (8004cfc <xTaskIncrementTick+0x150>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f040 808d 	bne.w	8004cda <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004bc0:	4b4f      	ldr	r3, [pc, #316]	; (8004d00 <xTaskIncrementTick+0x154>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004bc8:	4a4d      	ldr	r2, [pc, #308]	; (8004d00 <xTaskIncrementTick+0x154>)
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d11f      	bne.n	8004c14 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004bd4:	4b4b      	ldr	r3, [pc, #300]	; (8004d04 <xTaskIncrementTick+0x158>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d009      	beq.n	8004bf2 <xTaskIncrementTick+0x46>
 8004bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	e7fe      	b.n	8004bf0 <xTaskIncrementTick+0x44>
 8004bf2:	4b44      	ldr	r3, [pc, #272]	; (8004d04 <xTaskIncrementTick+0x158>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	4b43      	ldr	r3, [pc, #268]	; (8004d08 <xTaskIncrementTick+0x15c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a41      	ldr	r2, [pc, #260]	; (8004d04 <xTaskIncrementTick+0x158>)
 8004bfe:	6013      	str	r3, [r2, #0]
 8004c00:	4a41      	ldr	r2, [pc, #260]	; (8004d08 <xTaskIncrementTick+0x15c>)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	4b41      	ldr	r3, [pc, #260]	; (8004d0c <xTaskIncrementTick+0x160>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	4a3f      	ldr	r2, [pc, #252]	; (8004d0c <xTaskIncrementTick+0x160>)
 8004c0e:	6013      	str	r3, [r2, #0]
 8004c10:	f000 faca 	bl	80051a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c14:	4b3e      	ldr	r3, [pc, #248]	; (8004d10 <xTaskIncrementTick+0x164>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d34e      	bcc.n	8004cbc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c1e:	4b39      	ldr	r3, [pc, #228]	; (8004d04 <xTaskIncrementTick+0x158>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <xTaskIncrementTick+0x80>
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e000      	b.n	8004c2e <xTaskIncrementTick+0x82>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d004      	beq.n	8004c3c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c32:	4b37      	ldr	r3, [pc, #220]	; (8004d10 <xTaskIncrementTick+0x164>)
 8004c34:	f04f 32ff 	mov.w	r2, #4294967295
 8004c38:	601a      	str	r2, [r3, #0]
					break;
 8004c3a:	e03f      	b.n	8004cbc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c3c:	4b31      	ldr	r3, [pc, #196]	; (8004d04 <xTaskIncrementTick+0x158>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d203      	bcs.n	8004c5c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c54:	4a2e      	ldr	r2, [pc, #184]	; (8004d10 <xTaskIncrementTick+0x164>)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6013      	str	r3, [r2, #0]
						break;
 8004c5a:	e02f      	b.n	8004cbc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	3304      	adds	r3, #4
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7fe ffc1 	bl	8003be8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d004      	beq.n	8004c78 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	3318      	adds	r3, #24
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fe ffb8 	bl	8003be8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c7c:	4b25      	ldr	r3, [pc, #148]	; (8004d14 <xTaskIncrementTick+0x168>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d903      	bls.n	8004c8c <xTaskIncrementTick+0xe0>
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c88:	4a22      	ldr	r2, [pc, #136]	; (8004d14 <xTaskIncrementTick+0x168>)
 8004c8a:	6013      	str	r3, [r2, #0]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c90:	4613      	mov	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4a1f      	ldr	r2, [pc, #124]	; (8004d18 <xTaskIncrementTick+0x16c>)
 8004c9a:	441a      	add	r2, r3
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	3304      	adds	r3, #4
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4610      	mov	r0, r2
 8004ca4:	f7fe ff45 	bl	8003b32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cac:	4b1b      	ldr	r3, [pc, #108]	; (8004d1c <xTaskIncrementTick+0x170>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d3b3      	bcc.n	8004c1e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cba:	e7b0      	b.n	8004c1e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004cbc:	4b17      	ldr	r3, [pc, #92]	; (8004d1c <xTaskIncrementTick+0x170>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc2:	4915      	ldr	r1, [pc, #84]	; (8004d18 <xTaskIncrementTick+0x16c>)
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	440b      	add	r3, r1
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d907      	bls.n	8004ce4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	e004      	b.n	8004ce4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004cda:	4b11      	ldr	r3, [pc, #68]	; (8004d20 <xTaskIncrementTick+0x174>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	4a0f      	ldr	r2, [pc, #60]	; (8004d20 <xTaskIncrementTick+0x174>)
 8004ce2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004ce4:	4b0f      	ldr	r3, [pc, #60]	; (8004d24 <xTaskIncrementTick+0x178>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004cec:	2301      	movs	r3, #1
 8004cee:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004cf0:	697b      	ldr	r3, [r7, #20]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	20000be4 	.word	0x20000be4
 8004d00:	20000bc0 	.word	0x20000bc0
 8004d04:	20000b74 	.word	0x20000b74
 8004d08:	20000b78 	.word	0x20000b78
 8004d0c:	20000bd4 	.word	0x20000bd4
 8004d10:	20000bdc 	.word	0x20000bdc
 8004d14:	20000bc4 	.word	0x20000bc4
 8004d18:	200006ec 	.word	0x200006ec
 8004d1c:	200006e8 	.word	0x200006e8
 8004d20:	20000bcc 	.word	0x20000bcc
 8004d24:	20000bd0 	.word	0x20000bd0

08004d28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d2e:	4b27      	ldr	r3, [pc, #156]	; (8004dcc <vTaskSwitchContext+0xa4>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d36:	4b26      	ldr	r3, [pc, #152]	; (8004dd0 <vTaskSwitchContext+0xa8>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d3c:	e040      	b.n	8004dc0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004d3e:	4b24      	ldr	r3, [pc, #144]	; (8004dd0 <vTaskSwitchContext+0xa8>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004d44:	4b23      	ldr	r3, [pc, #140]	; (8004dd4 <vTaskSwitchContext+0xac>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	e00f      	b.n	8004d6c <vTaskSwitchContext+0x44>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d109      	bne.n	8004d66 <vTaskSwitchContext+0x3e>
 8004d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	607b      	str	r3, [r7, #4]
 8004d64:	e7fe      	b.n	8004d64 <vTaskSwitchContext+0x3c>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	491a      	ldr	r1, [pc, #104]	; (8004dd8 <vTaskSwitchContext+0xb0>)
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	4613      	mov	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	440b      	add	r3, r1
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0e5      	beq.n	8004d4c <vTaskSwitchContext+0x24>
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	4613      	mov	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4a13      	ldr	r2, [pc, #76]	; (8004dd8 <vTaskSwitchContext+0xb0>)
 8004d8c:	4413      	add	r3, r2
 8004d8e:	60bb      	str	r3, [r7, #8]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	605a      	str	r2, [r3, #4]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	3308      	adds	r3, #8
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d104      	bne.n	8004db0 <vTaskSwitchContext+0x88>
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	605a      	str	r2, [r3, #4]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	4a09      	ldr	r2, [pc, #36]	; (8004ddc <vTaskSwitchContext+0xb4>)
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	4a06      	ldr	r2, [pc, #24]	; (8004dd4 <vTaskSwitchContext+0xac>)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6013      	str	r3, [r2, #0]
}
 8004dc0:	bf00      	nop
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bc80      	pop	{r7}
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	20000be4 	.word	0x20000be4
 8004dd0:	20000bd0 	.word	0x20000bd0
 8004dd4:	20000bc4 	.word	0x20000bc4
 8004dd8:	200006ec 	.word	0x200006ec
 8004ddc:	200006e8 	.word	0x200006e8

08004de0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d109      	bne.n	8004e04 <vTaskPlaceOnEventList+0x24>
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	60fb      	str	r3, [r7, #12]
 8004e02:	e7fe      	b.n	8004e02 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e04:	4b07      	ldr	r3, [pc, #28]	; (8004e24 <vTaskPlaceOnEventList+0x44>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3318      	adds	r3, #24
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7fe feb3 	bl	8003b78 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e12:	2101      	movs	r1, #1
 8004e14:	6838      	ldr	r0, [r7, #0]
 8004e16:	f000 fa75 	bl	8005304 <prvAddCurrentTaskToDelayedList>
}
 8004e1a:	bf00      	nop
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	200006e8 	.word	0x200006e8

08004e28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d109      	bne.n	8004e4e <vTaskPlaceOnEventListRestricted+0x26>
 8004e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	617b      	str	r3, [r7, #20]
 8004e4c:	e7fe      	b.n	8004e4c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e4e:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <vTaskPlaceOnEventListRestricted+0x50>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3318      	adds	r3, #24
 8004e54:	4619      	mov	r1, r3
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f7fe fe6b 	bl	8003b32 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004e62:	f04f 33ff 	mov.w	r3, #4294967295
 8004e66:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e68:	6879      	ldr	r1, [r7, #4]
 8004e6a:	68b8      	ldr	r0, [r7, #8]
 8004e6c:	f000 fa4a 	bl	8005304 <prvAddCurrentTaskToDelayedList>
	}
 8004e70:	bf00      	nop
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	200006e8 	.word	0x200006e8

08004e7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d109      	bne.n	8004ea6 <xTaskRemoveFromEventList+0x2a>
 8004e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	e7fe      	b.n	8004ea4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	3318      	adds	r3, #24
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fe fe9c 	bl	8003be8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eb0:	4b1d      	ldr	r3, [pc, #116]	; (8004f28 <xTaskRemoveFromEventList+0xac>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d11d      	bne.n	8004ef4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	3304      	adds	r3, #4
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fe fe93 	bl	8003be8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec6:	4b19      	ldr	r3, [pc, #100]	; (8004f2c <xTaskRemoveFromEventList+0xb0>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d903      	bls.n	8004ed6 <xTaskRemoveFromEventList+0x5a>
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed2:	4a16      	ldr	r2, [pc, #88]	; (8004f2c <xTaskRemoveFromEventList+0xb0>)
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4a13      	ldr	r2, [pc, #76]	; (8004f30 <xTaskRemoveFromEventList+0xb4>)
 8004ee4:	441a      	add	r2, r3
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	4619      	mov	r1, r3
 8004eec:	4610      	mov	r0, r2
 8004eee:	f7fe fe20 	bl	8003b32 <vListInsertEnd>
 8004ef2:	e005      	b.n	8004f00 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	3318      	adds	r3, #24
 8004ef8:	4619      	mov	r1, r3
 8004efa:	480e      	ldr	r0, [pc, #56]	; (8004f34 <xTaskRemoveFromEventList+0xb8>)
 8004efc:	f7fe fe19 	bl	8003b32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f04:	4b0c      	ldr	r3, [pc, #48]	; (8004f38 <xTaskRemoveFromEventList+0xbc>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d905      	bls.n	8004f1a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004f12:	4b0a      	ldr	r3, [pc, #40]	; (8004f3c <xTaskRemoveFromEventList+0xc0>)
 8004f14:	2201      	movs	r2, #1
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	e001      	b.n	8004f1e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004f1e:	697b      	ldr	r3, [r7, #20]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3718      	adds	r7, #24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	20000be4 	.word	0x20000be4
 8004f2c:	20000bc4 	.word	0x20000bc4
 8004f30:	200006ec 	.word	0x200006ec
 8004f34:	20000b7c 	.word	0x20000b7c
 8004f38:	200006e8 	.word	0x200006e8
 8004f3c:	20000bd0 	.word	0x20000bd0

08004f40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f48:	4b06      	ldr	r3, [pc, #24]	; (8004f64 <vTaskInternalSetTimeOutState+0x24>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f50:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <vTaskInternalSetTimeOutState+0x28>)
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	605a      	str	r2, [r3, #4]
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bc80      	pop	{r7}
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	20000bd4 	.word	0x20000bd4
 8004f68:	20000bc0 	.word	0x20000bc0

08004f6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b088      	sub	sp, #32
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d109      	bne.n	8004f90 <xTaskCheckForTimeOut+0x24>
 8004f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f80:	f383 8811 	msr	BASEPRI, r3
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	e7fe      	b.n	8004f8e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d109      	bne.n	8004faa <xTaskCheckForTimeOut+0x3e>
 8004f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	e7fe      	b.n	8004fa8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004faa:	f000 fdf5 	bl	8005b98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004fae:	4b1d      	ldr	r3, [pc, #116]	; (8005024 <xTaskCheckForTimeOut+0xb8>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc6:	d102      	bne.n	8004fce <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	61fb      	str	r3, [r7, #28]
 8004fcc:	e023      	b.n	8005016 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	4b15      	ldr	r3, [pc, #84]	; (8005028 <xTaskCheckForTimeOut+0xbc>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d007      	beq.n	8004fea <xTaskCheckForTimeOut+0x7e>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d302      	bcc.n	8004fea <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	61fb      	str	r3, [r7, #28]
 8004fe8:	e015      	b.n	8005016 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d20b      	bcs.n	800500c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	1ad2      	subs	r2, r2, r3
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7ff ff9d 	bl	8004f40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005006:	2300      	movs	r3, #0
 8005008:	61fb      	str	r3, [r7, #28]
 800500a:	e004      	b.n	8005016 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005012:	2301      	movs	r3, #1
 8005014:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005016:	f000 fded 	bl	8005bf4 <vPortExitCritical>

	return xReturn;
 800501a:	69fb      	ldr	r3, [r7, #28]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3720      	adds	r7, #32
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	20000bc0 	.word	0x20000bc0
 8005028:	20000bd4 	.word	0x20000bd4

0800502c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005030:	4b03      	ldr	r3, [pc, #12]	; (8005040 <vTaskMissedYield+0x14>)
 8005032:	2201      	movs	r2, #1
 8005034:	601a      	str	r2, [r3, #0]
}
 8005036:	bf00      	nop
 8005038:	46bd      	mov	sp, r7
 800503a:	bc80      	pop	{r7}
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	20000bd0 	.word	0x20000bd0

08005044 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800504c:	f000 f852 	bl	80050f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005050:	4b06      	ldr	r3, [pc, #24]	; (800506c <prvIdleTask+0x28>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d9f9      	bls.n	800504c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005058:	4b05      	ldr	r3, [pc, #20]	; (8005070 <prvIdleTask+0x2c>)
 800505a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005068:	e7f0      	b.n	800504c <prvIdleTask+0x8>
 800506a:	bf00      	nop
 800506c:	200006ec 	.word	0x200006ec
 8005070:	e000ed04 	.word	0xe000ed04

08005074 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800507a:	2300      	movs	r3, #0
 800507c:	607b      	str	r3, [r7, #4]
 800507e:	e00c      	b.n	800509a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	4613      	mov	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4a12      	ldr	r2, [pc, #72]	; (80050d4 <prvInitialiseTaskLists+0x60>)
 800508c:	4413      	add	r3, r2
 800508e:	4618      	mov	r0, r3
 8005090:	f7fe fd24 	bl	8003adc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3301      	adds	r3, #1
 8005098:	607b      	str	r3, [r7, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b37      	cmp	r3, #55	; 0x37
 800509e:	d9ef      	bls.n	8005080 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80050a0:	480d      	ldr	r0, [pc, #52]	; (80050d8 <prvInitialiseTaskLists+0x64>)
 80050a2:	f7fe fd1b 	bl	8003adc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050a6:	480d      	ldr	r0, [pc, #52]	; (80050dc <prvInitialiseTaskLists+0x68>)
 80050a8:	f7fe fd18 	bl	8003adc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050ac:	480c      	ldr	r0, [pc, #48]	; (80050e0 <prvInitialiseTaskLists+0x6c>)
 80050ae:	f7fe fd15 	bl	8003adc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050b2:	480c      	ldr	r0, [pc, #48]	; (80050e4 <prvInitialiseTaskLists+0x70>)
 80050b4:	f7fe fd12 	bl	8003adc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050b8:	480b      	ldr	r0, [pc, #44]	; (80050e8 <prvInitialiseTaskLists+0x74>)
 80050ba:	f7fe fd0f 	bl	8003adc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050be:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <prvInitialiseTaskLists+0x78>)
 80050c0:	4a05      	ldr	r2, [pc, #20]	; (80050d8 <prvInitialiseTaskLists+0x64>)
 80050c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050c4:	4b0a      	ldr	r3, [pc, #40]	; (80050f0 <prvInitialiseTaskLists+0x7c>)
 80050c6:	4a05      	ldr	r2, [pc, #20]	; (80050dc <prvInitialiseTaskLists+0x68>)
 80050c8:	601a      	str	r2, [r3, #0]
}
 80050ca:	bf00      	nop
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	200006ec 	.word	0x200006ec
 80050d8:	20000b4c 	.word	0x20000b4c
 80050dc:	20000b60 	.word	0x20000b60
 80050e0:	20000b7c 	.word	0x20000b7c
 80050e4:	20000b90 	.word	0x20000b90
 80050e8:	20000ba8 	.word	0x20000ba8
 80050ec:	20000b74 	.word	0x20000b74
 80050f0:	20000b78 	.word	0x20000b78

080050f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050fa:	e019      	b.n	8005130 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80050fc:	f000 fd4c 	bl	8005b98 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005100:	4b0f      	ldr	r3, [pc, #60]	; (8005140 <prvCheckTasksWaitingTermination+0x4c>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3304      	adds	r3, #4
 800510c:	4618      	mov	r0, r3
 800510e:	f7fe fd6b 	bl	8003be8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005112:	4b0c      	ldr	r3, [pc, #48]	; (8005144 <prvCheckTasksWaitingTermination+0x50>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	3b01      	subs	r3, #1
 8005118:	4a0a      	ldr	r2, [pc, #40]	; (8005144 <prvCheckTasksWaitingTermination+0x50>)
 800511a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800511c:	4b0a      	ldr	r3, [pc, #40]	; (8005148 <prvCheckTasksWaitingTermination+0x54>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3b01      	subs	r3, #1
 8005122:	4a09      	ldr	r2, [pc, #36]	; (8005148 <prvCheckTasksWaitingTermination+0x54>)
 8005124:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005126:	f000 fd65 	bl	8005bf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f80e 	bl	800514c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005130:	4b05      	ldr	r3, [pc, #20]	; (8005148 <prvCheckTasksWaitingTermination+0x54>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1e1      	bne.n	80050fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005138:	bf00      	nop
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	20000b90 	.word	0x20000b90
 8005144:	20000bbc 	.word	0x20000bbc
 8005148:	20000ba4 	.word	0x20000ba4

0800514c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800515a:	2b00      	cmp	r3, #0
 800515c:	d108      	bne.n	8005170 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fed0 	bl	8005f08 <vPortFree>
				vPortFree( pxTCB );
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 fecd 	bl	8005f08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800516e:	e017      	b.n	80051a0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005176:	2b01      	cmp	r3, #1
 8005178:	d103      	bne.n	8005182 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fec4 	bl	8005f08 <vPortFree>
	}
 8005180:	e00e      	b.n	80051a0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005188:	2b02      	cmp	r3, #2
 800518a:	d009      	beq.n	80051a0 <prvDeleteTCB+0x54>
 800518c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	e7fe      	b.n	800519e <prvDeleteTCB+0x52>
	}
 80051a0:	bf00      	nop
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051ae:	4b0e      	ldr	r3, [pc, #56]	; (80051e8 <prvResetNextTaskUnblockTime+0x40>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <prvResetNextTaskUnblockTime+0x14>
 80051b8:	2301      	movs	r3, #1
 80051ba:	e000      	b.n	80051be <prvResetNextTaskUnblockTime+0x16>
 80051bc:	2300      	movs	r3, #0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d004      	beq.n	80051cc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80051c2:	4b0a      	ldr	r3, [pc, #40]	; (80051ec <prvResetNextTaskUnblockTime+0x44>)
 80051c4:	f04f 32ff 	mov.w	r2, #4294967295
 80051c8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051ca:	e008      	b.n	80051de <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80051cc:	4b06      	ldr	r3, [pc, #24]	; (80051e8 <prvResetNextTaskUnblockTime+0x40>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	4a04      	ldr	r2, [pc, #16]	; (80051ec <prvResetNextTaskUnblockTime+0x44>)
 80051dc:	6013      	str	r3, [r2, #0]
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bc80      	pop	{r7}
 80051e6:	4770      	bx	lr
 80051e8:	20000b74 	.word	0x20000b74
 80051ec:	20000bdc 	.word	0x20000bdc

080051f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80051f6:	4b0b      	ldr	r3, [pc, #44]	; (8005224 <xTaskGetSchedulerState+0x34>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d102      	bne.n	8005204 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80051fe:	2301      	movs	r3, #1
 8005200:	607b      	str	r3, [r7, #4]
 8005202:	e008      	b.n	8005216 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005204:	4b08      	ldr	r3, [pc, #32]	; (8005228 <xTaskGetSchedulerState+0x38>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d102      	bne.n	8005212 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800520c:	2302      	movs	r3, #2
 800520e:	607b      	str	r3, [r7, #4]
 8005210:	e001      	b.n	8005216 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005212:	2300      	movs	r3, #0
 8005214:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005216:	687b      	ldr	r3, [r7, #4]
	}
 8005218:	4618      	mov	r0, r3
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	bc80      	pop	{r7}
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	20000bc8 	.word	0x20000bc8
 8005228:	20000be4 	.word	0x20000be4

0800522c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005238:	2300      	movs	r3, #0
 800523a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d054      	beq.n	80052ec <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005242:	4b2d      	ldr	r3, [pc, #180]	; (80052f8 <xTaskPriorityDisinherit+0xcc>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	429a      	cmp	r2, r3
 800524a:	d009      	beq.n	8005260 <xTaskPriorityDisinherit+0x34>
 800524c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005250:	f383 8811 	msr	BASEPRI, r3
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	e7fe      	b.n	800525e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005264:	2b00      	cmp	r3, #0
 8005266:	d109      	bne.n	800527c <xTaskPriorityDisinherit+0x50>
 8005268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	60bb      	str	r3, [r7, #8]
 800527a:	e7fe      	b.n	800527a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005280:	1e5a      	subs	r2, r3, #1
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800528e:	429a      	cmp	r2, r3
 8005290:	d02c      	beq.n	80052ec <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005296:	2b00      	cmp	r3, #0
 8005298:	d128      	bne.n	80052ec <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	3304      	adds	r3, #4
 800529e:	4618      	mov	r0, r3
 80052a0:	f7fe fca2 	bl	8003be8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052bc:	4b0f      	ldr	r3, [pc, #60]	; (80052fc <xTaskPriorityDisinherit+0xd0>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d903      	bls.n	80052cc <xTaskPriorityDisinherit+0xa0>
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c8:	4a0c      	ldr	r2, [pc, #48]	; (80052fc <xTaskPriorityDisinherit+0xd0>)
 80052ca:	6013      	str	r3, [r2, #0]
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d0:	4613      	mov	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4a09      	ldr	r2, [pc, #36]	; (8005300 <xTaskPriorityDisinherit+0xd4>)
 80052da:	441a      	add	r2, r3
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	3304      	adds	r3, #4
 80052e0:	4619      	mov	r1, r3
 80052e2:	4610      	mov	r0, r2
 80052e4:	f7fe fc25 	bl	8003b32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052e8:	2301      	movs	r3, #1
 80052ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052ec:	697b      	ldr	r3, [r7, #20]
	}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3718      	adds	r7, #24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	200006e8 	.word	0x200006e8
 80052fc:	20000bc4 	.word	0x20000bc4
 8005300:	200006ec 	.word	0x200006ec

08005304 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800530e:	4b21      	ldr	r3, [pc, #132]	; (8005394 <prvAddCurrentTaskToDelayedList+0x90>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005314:	4b20      	ldr	r3, [pc, #128]	; (8005398 <prvAddCurrentTaskToDelayedList+0x94>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	3304      	adds	r3, #4
 800531a:	4618      	mov	r0, r3
 800531c:	f7fe fc64 	bl	8003be8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005326:	d10a      	bne.n	800533e <prvAddCurrentTaskToDelayedList+0x3a>
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d007      	beq.n	800533e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800532e:	4b1a      	ldr	r3, [pc, #104]	; (8005398 <prvAddCurrentTaskToDelayedList+0x94>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	3304      	adds	r3, #4
 8005334:	4619      	mov	r1, r3
 8005336:	4819      	ldr	r0, [pc, #100]	; (800539c <prvAddCurrentTaskToDelayedList+0x98>)
 8005338:	f7fe fbfb 	bl	8003b32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800533c:	e026      	b.n	800538c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4413      	add	r3, r2
 8005344:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005346:	4b14      	ldr	r3, [pc, #80]	; (8005398 <prvAddCurrentTaskToDelayedList+0x94>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	429a      	cmp	r2, r3
 8005354:	d209      	bcs.n	800536a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005356:	4b12      	ldr	r3, [pc, #72]	; (80053a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	4b0f      	ldr	r3, [pc, #60]	; (8005398 <prvAddCurrentTaskToDelayedList+0x94>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	3304      	adds	r3, #4
 8005360:	4619      	mov	r1, r3
 8005362:	4610      	mov	r0, r2
 8005364:	f7fe fc08 	bl	8003b78 <vListInsert>
}
 8005368:	e010      	b.n	800538c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800536a:	4b0e      	ldr	r3, [pc, #56]	; (80053a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	4b0a      	ldr	r3, [pc, #40]	; (8005398 <prvAddCurrentTaskToDelayedList+0x94>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	3304      	adds	r3, #4
 8005374:	4619      	mov	r1, r3
 8005376:	4610      	mov	r0, r2
 8005378:	f7fe fbfe 	bl	8003b78 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800537c:	4b0a      	ldr	r3, [pc, #40]	; (80053a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	429a      	cmp	r2, r3
 8005384:	d202      	bcs.n	800538c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005386:	4a08      	ldr	r2, [pc, #32]	; (80053a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	6013      	str	r3, [r2, #0]
}
 800538c:	bf00      	nop
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	20000bc0 	.word	0x20000bc0
 8005398:	200006e8 	.word	0x200006e8
 800539c:	20000ba8 	.word	0x20000ba8
 80053a0:	20000b78 	.word	0x20000b78
 80053a4:	20000b74 	.word	0x20000b74
 80053a8:	20000bdc 	.word	0x20000bdc

080053ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b08a      	sub	sp, #40	; 0x28
 80053b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80053b2:	2300      	movs	r3, #0
 80053b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80053b6:	f000 fac3 	bl	8005940 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80053ba:	4b1c      	ldr	r3, [pc, #112]	; (800542c <xTimerCreateTimerTask+0x80>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d021      	beq.n	8005406 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80053c2:	2300      	movs	r3, #0
 80053c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80053c6:	2300      	movs	r3, #0
 80053c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80053ca:	1d3a      	adds	r2, r7, #4
 80053cc:	f107 0108 	add.w	r1, r7, #8
 80053d0:	f107 030c 	add.w	r3, r7, #12
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7fe fb67 	bl	8003aa8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	9202      	str	r2, [sp, #8]
 80053e2:	9301      	str	r3, [sp, #4]
 80053e4:	2302      	movs	r3, #2
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	2300      	movs	r3, #0
 80053ea:	460a      	mov	r2, r1
 80053ec:	4910      	ldr	r1, [pc, #64]	; (8005430 <xTimerCreateTimerTask+0x84>)
 80053ee:	4811      	ldr	r0, [pc, #68]	; (8005434 <xTimerCreateTimerTask+0x88>)
 80053f0:	f7ff f8f8 	bl	80045e4 <xTaskCreateStatic>
 80053f4:	4602      	mov	r2, r0
 80053f6:	4b10      	ldr	r3, [pc, #64]	; (8005438 <xTimerCreateTimerTask+0x8c>)
 80053f8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80053fa:	4b0f      	ldr	r3, [pc, #60]	; (8005438 <xTimerCreateTimerTask+0x8c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005402:	2301      	movs	r3, #1
 8005404:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d109      	bne.n	8005420 <xTimerCreateTimerTask+0x74>
 800540c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005410:	f383 8811 	msr	BASEPRI, r3
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	613b      	str	r3, [r7, #16]
 800541e:	e7fe      	b.n	800541e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005420:	697b      	ldr	r3, [r7, #20]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3718      	adds	r7, #24
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20000c18 	.word	0x20000c18
 8005430:	080066cc 	.word	0x080066cc
 8005434:	08005555 	.word	0x08005555
 8005438:	20000c1c 	.word	0x20000c1c

0800543c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08a      	sub	sp, #40	; 0x28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800544a:	2300      	movs	r3, #0
 800544c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d109      	bne.n	8005468 <xTimerGenericCommand+0x2c>
 8005454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	623b      	str	r3, [r7, #32]
 8005466:	e7fe      	b.n	8005466 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005468:	4b19      	ldr	r3, [pc, #100]	; (80054d0 <xTimerGenericCommand+0x94>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d02a      	beq.n	80054c6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2b05      	cmp	r3, #5
 8005480:	dc18      	bgt.n	80054b4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005482:	f7ff feb5 	bl	80051f0 <xTaskGetSchedulerState>
 8005486:	4603      	mov	r3, r0
 8005488:	2b02      	cmp	r3, #2
 800548a:	d109      	bne.n	80054a0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800548c:	4b10      	ldr	r3, [pc, #64]	; (80054d0 <xTimerGenericCommand+0x94>)
 800548e:	6818      	ldr	r0, [r3, #0]
 8005490:	f107 0110 	add.w	r1, r7, #16
 8005494:	2300      	movs	r3, #0
 8005496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005498:	f7fe fcce 	bl	8003e38 <xQueueGenericSend>
 800549c:	6278      	str	r0, [r7, #36]	; 0x24
 800549e:	e012      	b.n	80054c6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80054a0:	4b0b      	ldr	r3, [pc, #44]	; (80054d0 <xTimerGenericCommand+0x94>)
 80054a2:	6818      	ldr	r0, [r3, #0]
 80054a4:	f107 0110 	add.w	r1, r7, #16
 80054a8:	2300      	movs	r3, #0
 80054aa:	2200      	movs	r2, #0
 80054ac:	f7fe fcc4 	bl	8003e38 <xQueueGenericSend>
 80054b0:	6278      	str	r0, [r7, #36]	; 0x24
 80054b2:	e008      	b.n	80054c6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80054b4:	4b06      	ldr	r3, [pc, #24]	; (80054d0 <xTimerGenericCommand+0x94>)
 80054b6:	6818      	ldr	r0, [r3, #0]
 80054b8:	f107 0110 	add.w	r1, r7, #16
 80054bc:	2300      	movs	r3, #0
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	f7fe fdb4 	bl	800402c <xQueueGenericSendFromISR>
 80054c4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3728      	adds	r7, #40	; 0x28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	20000c18 	.word	0x20000c18

080054d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b088      	sub	sp, #32
 80054d8:	af02      	add	r7, sp, #8
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054de:	4b1c      	ldr	r3, [pc, #112]	; (8005550 <prvProcessExpiredTimer+0x7c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	3304      	adds	r3, #4
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7fe fb7b 	bl	8003be8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d121      	bne.n	800553e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	699a      	ldr	r2, [r3, #24]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	18d1      	adds	r1, r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	683a      	ldr	r2, [r7, #0]
 8005506:	6978      	ldr	r0, [r7, #20]
 8005508:	f000 f8c8 	bl	800569c <prvInsertTimerInActiveList>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d015      	beq.n	800553e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005512:	2300      	movs	r3, #0
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	2300      	movs	r3, #0
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	2100      	movs	r1, #0
 800551c:	6978      	ldr	r0, [r7, #20]
 800551e:	f7ff ff8d 	bl	800543c <xTimerGenericCommand>
 8005522:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d109      	bne.n	800553e <prvProcessExpiredTimer+0x6a>
 800552a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552e:	f383 8811 	msr	BASEPRI, r3
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	e7fe      	b.n	800553c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	6978      	ldr	r0, [r7, #20]
 8005544:	4798      	blx	r3
}
 8005546:	bf00      	nop
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	20000c10 	.word	0x20000c10

08005554 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800555c:	f107 0308 	add.w	r3, r7, #8
 8005560:	4618      	mov	r0, r3
 8005562:	f000 f857 	bl	8005614 <prvGetNextExpireTime>
 8005566:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	4619      	mov	r1, r3
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 f803 	bl	8005578 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005572:	f000 f8d5 	bl	8005720 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005576:	e7f1      	b.n	800555c <prvTimerTask+0x8>

08005578 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005582:	f7ff fa5b 	bl	8004a3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005586:	f107 0308 	add.w	r3, r7, #8
 800558a:	4618      	mov	r0, r3
 800558c:	f000 f866 	bl	800565c <prvSampleTimeNow>
 8005590:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d130      	bne.n	80055fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10a      	bne.n	80055b4 <prvProcessTimerOrBlockTask+0x3c>
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d806      	bhi.n	80055b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80055a6:	f7ff fa57 	bl	8004a58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80055aa:	68f9      	ldr	r1, [r7, #12]
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7ff ff91 	bl	80054d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80055b2:	e024      	b.n	80055fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d008      	beq.n	80055cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80055ba:	4b13      	ldr	r3, [pc, #76]	; (8005608 <prvProcessTimerOrBlockTask+0x90>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	bf0c      	ite	eq
 80055c4:	2301      	moveq	r3, #1
 80055c6:	2300      	movne	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80055cc:	4b0f      	ldr	r3, [pc, #60]	; (800560c <prvProcessTimerOrBlockTask+0x94>)
 80055ce:	6818      	ldr	r0, [r3, #0]
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	4619      	mov	r1, r3
 80055da:	f7fe ffcf 	bl	800457c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80055de:	f7ff fa3b 	bl	8004a58 <xTaskResumeAll>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10a      	bne.n	80055fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80055e8:	4b09      	ldr	r3, [pc, #36]	; (8005610 <prvProcessTimerOrBlockTask+0x98>)
 80055ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	f3bf 8f6f 	isb	sy
}
 80055f8:	e001      	b.n	80055fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80055fa:	f7ff fa2d 	bl	8004a58 <xTaskResumeAll>
}
 80055fe:	bf00      	nop
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	20000c14 	.word	0x20000c14
 800560c:	20000c18 	.word	0x20000c18
 8005610:	e000ed04 	.word	0xe000ed04

08005614 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800561c:	4b0e      	ldr	r3, [pc, #56]	; (8005658 <prvGetNextExpireTime+0x44>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	bf0c      	ite	eq
 8005626:	2301      	moveq	r3, #1
 8005628:	2300      	movne	r3, #0
 800562a:	b2db      	uxtb	r3, r3
 800562c:	461a      	mov	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d105      	bne.n	8005646 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800563a:	4b07      	ldr	r3, [pc, #28]	; (8005658 <prvGetNextExpireTime+0x44>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	e001      	b.n	800564a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005646:	2300      	movs	r3, #0
 8005648:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800564a:	68fb      	ldr	r3, [r7, #12]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	bc80      	pop	{r7}
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	20000c10 	.word	0x20000c10

0800565c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005664:	f7ff fa94 	bl	8004b90 <xTaskGetTickCount>
 8005668:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800566a:	4b0b      	ldr	r3, [pc, #44]	; (8005698 <prvSampleTimeNow+0x3c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	429a      	cmp	r2, r3
 8005672:	d205      	bcs.n	8005680 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005674:	f000 f904 	bl	8005880 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	e002      	b.n	8005686 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005686:	4a04      	ldr	r2, [pc, #16]	; (8005698 <prvSampleTimeNow+0x3c>)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800568c:	68fb      	ldr	r3, [r7, #12]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	20000c20 	.word	0x20000c20

0800569c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80056aa:	2300      	movs	r3, #0
 80056ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d812      	bhi.n	80056e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	1ad2      	subs	r2, r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d302      	bcc.n	80056d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80056d0:	2301      	movs	r3, #1
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	e01b      	b.n	800570e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80056d6:	4b10      	ldr	r3, [pc, #64]	; (8005718 <prvInsertTimerInActiveList+0x7c>)
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	3304      	adds	r3, #4
 80056de:	4619      	mov	r1, r3
 80056e0:	4610      	mov	r0, r2
 80056e2:	f7fe fa49 	bl	8003b78 <vListInsert>
 80056e6:	e012      	b.n	800570e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d206      	bcs.n	80056fe <prvInsertTimerInActiveList+0x62>
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d302      	bcc.n	80056fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80056f8:	2301      	movs	r3, #1
 80056fa:	617b      	str	r3, [r7, #20]
 80056fc:	e007      	b.n	800570e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056fe:	4b07      	ldr	r3, [pc, #28]	; (800571c <prvInsertTimerInActiveList+0x80>)
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	3304      	adds	r3, #4
 8005706:	4619      	mov	r1, r3
 8005708:	4610      	mov	r0, r2
 800570a:	f7fe fa35 	bl	8003b78 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800570e:	697b      	ldr	r3, [r7, #20]
}
 8005710:	4618      	mov	r0, r3
 8005712:	3718      	adds	r7, #24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	20000c14 	.word	0x20000c14
 800571c:	20000c10 	.word	0x20000c10

08005720 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08e      	sub	sp, #56	; 0x38
 8005724:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005726:	e099      	b.n	800585c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	da17      	bge.n	800575e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800572e:	1d3b      	adds	r3, r7, #4
 8005730:	3304      	adds	r3, #4
 8005732:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005736:	2b00      	cmp	r3, #0
 8005738:	d109      	bne.n	800574e <prvProcessReceivedCommands+0x2e>
 800573a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	61fb      	str	r3, [r7, #28]
 800574c:	e7fe      	b.n	800574c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800574e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005754:	6850      	ldr	r0, [r2, #4]
 8005756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005758:	6892      	ldr	r2, [r2, #8]
 800575a:	4611      	mov	r1, r2
 800575c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	db7a      	blt.n	800585a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d004      	beq.n	800577a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005772:	3304      	adds	r3, #4
 8005774:	4618      	mov	r0, r3
 8005776:	f7fe fa37 	bl	8003be8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800577a:	463b      	mov	r3, r7
 800577c:	4618      	mov	r0, r3
 800577e:	f7ff ff6d 	bl	800565c <prvSampleTimeNow>
 8005782:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b09      	cmp	r3, #9
 8005788:	d868      	bhi.n	800585c <prvProcessReceivedCommands+0x13c>
 800578a:	a201      	add	r2, pc, #4	; (adr r2, 8005790 <prvProcessReceivedCommands+0x70>)
 800578c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005790:	080057b9 	.word	0x080057b9
 8005794:	080057b9 	.word	0x080057b9
 8005798:	080057b9 	.word	0x080057b9
 800579c:	0800585d 	.word	0x0800585d
 80057a0:	08005813 	.word	0x08005813
 80057a4:	08005849 	.word	0x08005849
 80057a8:	080057b9 	.word	0x080057b9
 80057ac:	080057b9 	.word	0x080057b9
 80057b0:	0800585d 	.word	0x0800585d
 80057b4:	08005813 	.word	0x08005813
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	18d1      	adds	r1, r2, r3
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057c6:	f7ff ff69 	bl	800569c <prvInsertTimerInActiveList>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d045      	beq.n	800585c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057d6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80057d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057da:	69db      	ldr	r3, [r3, #28]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d13d      	bne.n	800585c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	441a      	add	r2, r3
 80057e8:	2300      	movs	r3, #0
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	2300      	movs	r3, #0
 80057ee:	2100      	movs	r1, #0
 80057f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057f2:	f7ff fe23 	bl	800543c <xTimerGenericCommand>
 80057f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d12e      	bne.n	800585c <prvProcessReceivedCommands+0x13c>
 80057fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	61bb      	str	r3, [r7, #24]
 8005810:	e7fe      	b.n	8005810 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005816:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d109      	bne.n	8005834 <prvProcessReceivedCommands+0x114>
 8005820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	617b      	str	r3, [r7, #20]
 8005832:	e7fe      	b.n	8005832 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005836:	699a      	ldr	r2, [r3, #24]
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	18d1      	adds	r1, r2, r3
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005842:	f7ff ff2b 	bl	800569c <prvInsertTimerInActiveList>
					break;
 8005846:	e009      	b.n	800585c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800584e:	2b00      	cmp	r3, #0
 8005850:	d104      	bne.n	800585c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8005852:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005854:	f000 fb58 	bl	8005f08 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005858:	e000      	b.n	800585c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800585a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800585c:	4b07      	ldr	r3, [pc, #28]	; (800587c <prvProcessReceivedCommands+0x15c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	1d39      	adds	r1, r7, #4
 8005862:	2200      	movs	r2, #0
 8005864:	4618      	mov	r0, r3
 8005866:	f7fe fc75 	bl	8004154 <xQueueReceive>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	f47f af5b 	bne.w	8005728 <prvProcessReceivedCommands+0x8>
	}
}
 8005872:	bf00      	nop
 8005874:	3730      	adds	r7, #48	; 0x30
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	20000c18 	.word	0x20000c18

08005880 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b088      	sub	sp, #32
 8005884:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005886:	e044      	b.n	8005912 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005888:	4b2b      	ldr	r3, [pc, #172]	; (8005938 <prvSwitchTimerLists+0xb8>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005892:	4b29      	ldr	r3, [pc, #164]	; (8005938 <prvSwitchTimerLists+0xb8>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	3304      	adds	r3, #4
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fe f9a1 	bl	8003be8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d12d      	bne.n	8005912 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	4413      	add	r3, r2
 80058be:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d90e      	bls.n	80058e6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80058d4:	4b18      	ldr	r3, [pc, #96]	; (8005938 <prvSwitchTimerLists+0xb8>)
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	3304      	adds	r3, #4
 80058dc:	4619      	mov	r1, r3
 80058de:	4610      	mov	r0, r2
 80058e0:	f7fe f94a 	bl	8003b78 <vListInsert>
 80058e4:	e015      	b.n	8005912 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058e6:	2300      	movs	r3, #0
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	2300      	movs	r3, #0
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	2100      	movs	r1, #0
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f7ff fda3 	bl	800543c <xTimerGenericCommand>
 80058f6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d109      	bne.n	8005912 <prvSwitchTimerLists+0x92>
 80058fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	603b      	str	r3, [r7, #0]
 8005910:	e7fe      	b.n	8005910 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005912:	4b09      	ldr	r3, [pc, #36]	; (8005938 <prvSwitchTimerLists+0xb8>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1b5      	bne.n	8005888 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800591c:	4b06      	ldr	r3, [pc, #24]	; (8005938 <prvSwitchTimerLists+0xb8>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005922:	4b06      	ldr	r3, [pc, #24]	; (800593c <prvSwitchTimerLists+0xbc>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a04      	ldr	r2, [pc, #16]	; (8005938 <prvSwitchTimerLists+0xb8>)
 8005928:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800592a:	4a04      	ldr	r2, [pc, #16]	; (800593c <prvSwitchTimerLists+0xbc>)
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	6013      	str	r3, [r2, #0]
}
 8005930:	bf00      	nop
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	20000c10 	.word	0x20000c10
 800593c:	20000c14 	.word	0x20000c14

08005940 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005946:	f000 f927 	bl	8005b98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800594a:	4b15      	ldr	r3, [pc, #84]	; (80059a0 <prvCheckForValidListAndQueue+0x60>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d120      	bne.n	8005994 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005952:	4814      	ldr	r0, [pc, #80]	; (80059a4 <prvCheckForValidListAndQueue+0x64>)
 8005954:	f7fe f8c2 	bl	8003adc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005958:	4813      	ldr	r0, [pc, #76]	; (80059a8 <prvCheckForValidListAndQueue+0x68>)
 800595a:	f7fe f8bf 	bl	8003adc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800595e:	4b13      	ldr	r3, [pc, #76]	; (80059ac <prvCheckForValidListAndQueue+0x6c>)
 8005960:	4a10      	ldr	r2, [pc, #64]	; (80059a4 <prvCheckForValidListAndQueue+0x64>)
 8005962:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005964:	4b12      	ldr	r3, [pc, #72]	; (80059b0 <prvCheckForValidListAndQueue+0x70>)
 8005966:	4a10      	ldr	r2, [pc, #64]	; (80059a8 <prvCheckForValidListAndQueue+0x68>)
 8005968:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800596a:	2300      	movs	r3, #0
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	4b11      	ldr	r3, [pc, #68]	; (80059b4 <prvCheckForValidListAndQueue+0x74>)
 8005970:	4a11      	ldr	r2, [pc, #68]	; (80059b8 <prvCheckForValidListAndQueue+0x78>)
 8005972:	2110      	movs	r1, #16
 8005974:	200a      	movs	r0, #10
 8005976:	f7fe f9c9 	bl	8003d0c <xQueueGenericCreateStatic>
 800597a:	4602      	mov	r2, r0
 800597c:	4b08      	ldr	r3, [pc, #32]	; (80059a0 <prvCheckForValidListAndQueue+0x60>)
 800597e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005980:	4b07      	ldr	r3, [pc, #28]	; (80059a0 <prvCheckForValidListAndQueue+0x60>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d005      	beq.n	8005994 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005988:	4b05      	ldr	r3, [pc, #20]	; (80059a0 <prvCheckForValidListAndQueue+0x60>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	490b      	ldr	r1, [pc, #44]	; (80059bc <prvCheckForValidListAndQueue+0x7c>)
 800598e:	4618      	mov	r0, r3
 8005990:	f7fe fdcc 	bl	800452c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005994:	f000 f92e 	bl	8005bf4 <vPortExitCritical>
}
 8005998:	bf00      	nop
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	20000c18 	.word	0x20000c18
 80059a4:	20000be8 	.word	0x20000be8
 80059a8:	20000bfc 	.word	0x20000bfc
 80059ac:	20000c10 	.word	0x20000c10
 80059b0:	20000c14 	.word	0x20000c14
 80059b4:	20000cc4 	.word	0x20000cc4
 80059b8:	20000c24 	.word	0x20000c24
 80059bc:	080066d4 	.word	0x080066d4

080059c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3b04      	subs	r3, #4
 80059d0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3b04      	subs	r3, #4
 80059de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f023 0201 	bic.w	r2, r3, #1
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	3b04      	subs	r3, #4
 80059ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80059f0:	4a08      	ldr	r2, [pc, #32]	; (8005a14 <pxPortInitialiseStack+0x54>)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	3b14      	subs	r3, #20
 80059fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	3b20      	subs	r3, #32
 8005a06:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a08:	68fb      	ldr	r3, [r7, #12]
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bc80      	pop	{r7}
 8005a12:	4770      	bx	lr
 8005a14:	08005a19 	.word	0x08005a19

08005a18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a22:	4b10      	ldr	r3, [pc, #64]	; (8005a64 <prvTaskExitError+0x4c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2a:	d009      	beq.n	8005a40 <prvTaskExitError+0x28>
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	60fb      	str	r3, [r7, #12]
 8005a3e:	e7fe      	b.n	8005a3e <prvTaskExitError+0x26>
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005a52:	bf00      	nop
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0fc      	beq.n	8005a54 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005a5a:	bf00      	nop
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bc80      	pop	{r7}
 8005a62:	4770      	bx	lr
 8005a64:	2000000c 	.word	0x2000000c
	...

08005a70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a70:	4b07      	ldr	r3, [pc, #28]	; (8005a90 <pxCurrentTCBConst2>)
 8005a72:	6819      	ldr	r1, [r3, #0]
 8005a74:	6808      	ldr	r0, [r1, #0]
 8005a76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005a7a:	f380 8809 	msr	PSP, r0
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f04f 0000 	mov.w	r0, #0
 8005a86:	f380 8811 	msr	BASEPRI, r0
 8005a8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005a8e:	4770      	bx	lr

08005a90 <pxCurrentTCBConst2>:
 8005a90:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a94:	bf00      	nop
 8005a96:	bf00      	nop

08005a98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005a98:	4806      	ldr	r0, [pc, #24]	; (8005ab4 <prvPortStartFirstTask+0x1c>)
 8005a9a:	6800      	ldr	r0, [r0, #0]
 8005a9c:	6800      	ldr	r0, [r0, #0]
 8005a9e:	f380 8808 	msr	MSP, r0
 8005aa2:	b662      	cpsie	i
 8005aa4:	b661      	cpsie	f
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	f3bf 8f6f 	isb	sy
 8005aae:	df00      	svc	0
 8005ab0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005ab2:	bf00      	nop
 8005ab4:	e000ed08 	.word	0xe000ed08

08005ab8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005abe:	4b31      	ldr	r3, [pc, #196]	; (8005b84 <xPortStartScheduler+0xcc>)
 8005ac0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	22ff      	movs	r2, #255	; 0xff
 8005ace:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ad8:	78fb      	ldrb	r3, [r7, #3]
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	4b29      	ldr	r3, [pc, #164]	; (8005b88 <xPortStartScheduler+0xd0>)
 8005ae4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ae6:	4b29      	ldr	r3, [pc, #164]	; (8005b8c <xPortStartScheduler+0xd4>)
 8005ae8:	2207      	movs	r2, #7
 8005aea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005aec:	e009      	b.n	8005b02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005aee:	4b27      	ldr	r3, [pc, #156]	; (8005b8c <xPortStartScheduler+0xd4>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3b01      	subs	r3, #1
 8005af4:	4a25      	ldr	r2, [pc, #148]	; (8005b8c <xPortStartScheduler+0xd4>)
 8005af6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005af8:	78fb      	ldrb	r3, [r7, #3]
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b02:	78fb      	ldrb	r3, [r7, #3]
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b0a:	2b80      	cmp	r3, #128	; 0x80
 8005b0c:	d0ef      	beq.n	8005aee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b0e:	4b1f      	ldr	r3, [pc, #124]	; (8005b8c <xPortStartScheduler+0xd4>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f1c3 0307 	rsb	r3, r3, #7
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	d009      	beq.n	8005b2e <xPortStartScheduler+0x76>
 8005b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	60bb      	str	r3, [r7, #8]
 8005b2c:	e7fe      	b.n	8005b2c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b2e:	4b17      	ldr	r3, [pc, #92]	; (8005b8c <xPortStartScheduler+0xd4>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	021b      	lsls	r3, r3, #8
 8005b34:	4a15      	ldr	r2, [pc, #84]	; (8005b8c <xPortStartScheduler+0xd4>)
 8005b36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b38:	4b14      	ldr	r3, [pc, #80]	; (8005b8c <xPortStartScheduler+0xd4>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b40:	4a12      	ldr	r2, [pc, #72]	; (8005b8c <xPortStartScheduler+0xd4>)
 8005b42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b4c:	4b10      	ldr	r3, [pc, #64]	; (8005b90 <xPortStartScheduler+0xd8>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a0f      	ldr	r2, [pc, #60]	; (8005b90 <xPortStartScheduler+0xd8>)
 8005b52:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b58:	4b0d      	ldr	r3, [pc, #52]	; (8005b90 <xPortStartScheduler+0xd8>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a0c      	ldr	r2, [pc, #48]	; (8005b90 <xPortStartScheduler+0xd8>)
 8005b5e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005b62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b64:	f000 f8b0 	bl	8005cc8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b68:	4b0a      	ldr	r3, [pc, #40]	; (8005b94 <xPortStartScheduler+0xdc>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b6e:	f7ff ff93 	bl	8005a98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b72:	f7ff f8d9 	bl	8004d28 <vTaskSwitchContext>
	prvTaskExitError();
 8005b76:	f7ff ff4f 	bl	8005a18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	e000e400 	.word	0xe000e400
 8005b88:	20000d14 	.word	0x20000d14
 8005b8c:	20000d18 	.word	0x20000d18
 8005b90:	e000ed20 	.word	0xe000ed20
 8005b94:	2000000c 	.word	0x2000000c

08005b98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005bb0:	4b0e      	ldr	r3, [pc, #56]	; (8005bec <vPortEnterCritical+0x54>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	4a0d      	ldr	r2, [pc, #52]	; (8005bec <vPortEnterCritical+0x54>)
 8005bb8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005bba:	4b0c      	ldr	r3, [pc, #48]	; (8005bec <vPortEnterCritical+0x54>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d10e      	bne.n	8005be0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005bc2:	4b0b      	ldr	r3, [pc, #44]	; (8005bf0 <vPortEnterCritical+0x58>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d009      	beq.n	8005be0 <vPortEnterCritical+0x48>
 8005bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	603b      	str	r3, [r7, #0]
 8005bde:	e7fe      	b.n	8005bde <vPortEnterCritical+0x46>
	}
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bc80      	pop	{r7}
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	2000000c 	.word	0x2000000c
 8005bf0:	e000ed04 	.word	0xe000ed04

08005bf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005bfa:	4b10      	ldr	r3, [pc, #64]	; (8005c3c <vPortExitCritical+0x48>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d109      	bne.n	8005c16 <vPortExitCritical+0x22>
 8005c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c06:	f383 8811 	msr	BASEPRI, r3
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	607b      	str	r3, [r7, #4]
 8005c14:	e7fe      	b.n	8005c14 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005c16:	4b09      	ldr	r3, [pc, #36]	; (8005c3c <vPortExitCritical+0x48>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	4a07      	ldr	r2, [pc, #28]	; (8005c3c <vPortExitCritical+0x48>)
 8005c1e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c20:	4b06      	ldr	r3, [pc, #24]	; (8005c3c <vPortExitCritical+0x48>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d104      	bne.n	8005c32 <vPortExitCritical+0x3e>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bc80      	pop	{r7}
 8005c3a:	4770      	bx	lr
 8005c3c:	2000000c 	.word	0x2000000c

08005c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c40:	f3ef 8009 	mrs	r0, PSP
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	4b0d      	ldr	r3, [pc, #52]	; (8005c80 <pxCurrentTCBConst>)
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005c50:	6010      	str	r0, [r2, #0]
 8005c52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005c56:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c5a:	f380 8811 	msr	BASEPRI, r0
 8005c5e:	f7ff f863 	bl	8004d28 <vTaskSwitchContext>
 8005c62:	f04f 0000 	mov.w	r0, #0
 8005c66:	f380 8811 	msr	BASEPRI, r0
 8005c6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005c6e:	6819      	ldr	r1, [r3, #0]
 8005c70:	6808      	ldr	r0, [r1, #0]
 8005c72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005c76:	f380 8809 	msr	PSP, r0
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	4770      	bx	lr

08005c80 <pxCurrentTCBConst>:
 8005c80:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c84:	bf00      	nop
 8005c86:	bf00      	nop

08005c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ca0:	f7fe ff84 	bl	8004bac <xTaskIncrementTick>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005caa:	4b06      	ldr	r3, [pc, #24]	; (8005cc4 <SysTick_Handler+0x3c>)
 8005cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cb0:	601a      	str	r2, [r3, #0]
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005cbc:	bf00      	nop
 8005cbe:	3708      	adds	r7, #8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	e000ed04 	.word	0xe000ed04

08005cc8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ccc:	4b0a      	ldr	r3, [pc, #40]	; (8005cf8 <vPortSetupTimerInterrupt+0x30>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005cd2:	4b0a      	ldr	r3, [pc, #40]	; (8005cfc <vPortSetupTimerInterrupt+0x34>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005cd8:	4b09      	ldr	r3, [pc, #36]	; (8005d00 <vPortSetupTimerInterrupt+0x38>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a09      	ldr	r2, [pc, #36]	; (8005d04 <vPortSetupTimerInterrupt+0x3c>)
 8005cde:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce2:	099b      	lsrs	r3, r3, #6
 8005ce4:	4a08      	ldr	r2, [pc, #32]	; (8005d08 <vPortSetupTimerInterrupt+0x40>)
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005cea:	4b03      	ldr	r3, [pc, #12]	; (8005cf8 <vPortSetupTimerInterrupt+0x30>)
 8005cec:	2207      	movs	r2, #7
 8005cee:	601a      	str	r2, [r3, #0]
}
 8005cf0:	bf00      	nop
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bc80      	pop	{r7}
 8005cf6:	4770      	bx	lr
 8005cf8:	e000e010 	.word	0xe000e010
 8005cfc:	e000e018 	.word	0xe000e018
 8005d00:	20000000 	.word	0x20000000
 8005d04:	10624dd3 	.word	0x10624dd3
 8005d08:	e000e014 	.word	0xe000e014

08005d0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005d12:	f3ef 8305 	mrs	r3, IPSR
 8005d16:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2b0f      	cmp	r3, #15
 8005d1c:	d913      	bls.n	8005d46 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005d1e:	4a15      	ldr	r2, [pc, #84]	; (8005d74 <vPortValidateInterruptPriority+0x68>)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4413      	add	r3, r2
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005d28:	4b13      	ldr	r3, [pc, #76]	; (8005d78 <vPortValidateInterruptPriority+0x6c>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	7afa      	ldrb	r2, [r7, #11]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d209      	bcs.n	8005d46 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	607b      	str	r3, [r7, #4]
 8005d44:	e7fe      	b.n	8005d44 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005d46:	4b0d      	ldr	r3, [pc, #52]	; (8005d7c <vPortValidateInterruptPriority+0x70>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005d4e:	4b0c      	ldr	r3, [pc, #48]	; (8005d80 <vPortValidateInterruptPriority+0x74>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d909      	bls.n	8005d6a <vPortValidateInterruptPriority+0x5e>
 8005d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5a:	f383 8811 	msr	BASEPRI, r3
 8005d5e:	f3bf 8f6f 	isb	sy
 8005d62:	f3bf 8f4f 	dsb	sy
 8005d66:	603b      	str	r3, [r7, #0]
 8005d68:	e7fe      	b.n	8005d68 <vPortValidateInterruptPriority+0x5c>
	}
 8005d6a:	bf00      	nop
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bc80      	pop	{r7}
 8005d72:	4770      	bx	lr
 8005d74:	e000e3f0 	.word	0xe000e3f0
 8005d78:	20000d14 	.word	0x20000d14
 8005d7c:	e000ed0c 	.word	0xe000ed0c
 8005d80:	20000d18 	.word	0x20000d18

08005d84 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08a      	sub	sp, #40	; 0x28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d90:	f7fe fe54 	bl	8004a3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d94:	4b57      	ldr	r3, [pc, #348]	; (8005ef4 <pvPortMalloc+0x170>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d9c:	f000 f90c 	bl	8005fb8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005da0:	4b55      	ldr	r3, [pc, #340]	; (8005ef8 <pvPortMalloc+0x174>)
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4013      	ands	r3, r2
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f040 808c 	bne.w	8005ec6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d01c      	beq.n	8005dee <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005db4:	2208      	movs	r2, #8
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4413      	add	r3, r2
 8005dba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d013      	beq.n	8005dee <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f023 0307 	bic.w	r3, r3, #7
 8005dcc:	3308      	adds	r3, #8
 8005dce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f003 0307 	and.w	r3, r3, #7
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d009      	beq.n	8005dee <pvPortMalloc+0x6a>
 8005dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	617b      	str	r3, [r7, #20]
 8005dec:	e7fe      	b.n	8005dec <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d068      	beq.n	8005ec6 <pvPortMalloc+0x142>
 8005df4:	4b41      	ldr	r3, [pc, #260]	; (8005efc <pvPortMalloc+0x178>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d863      	bhi.n	8005ec6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005dfe:	4b40      	ldr	r3, [pc, #256]	; (8005f00 <pvPortMalloc+0x17c>)
 8005e00:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005e02:	4b3f      	ldr	r3, [pc, #252]	; (8005f00 <pvPortMalloc+0x17c>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e08:	e004      	b.n	8005e14 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d903      	bls.n	8005e26 <pvPortMalloc+0xa2>
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1f1      	bne.n	8005e0a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e26:	4b33      	ldr	r3, [pc, #204]	; (8005ef4 <pvPortMalloc+0x170>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d04a      	beq.n	8005ec6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2208      	movs	r2, #8
 8005e36:	4413      	add	r3, r2
 8005e38:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	6a3b      	ldr	r3, [r7, #32]
 8005e40:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	1ad2      	subs	r2, r2, r3
 8005e4a:	2308      	movs	r3, #8
 8005e4c:	005b      	lsls	r3, r3, #1
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d91e      	bls.n	8005e90 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4413      	add	r3, r2
 8005e58:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	f003 0307 	and.w	r3, r3, #7
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d009      	beq.n	8005e78 <pvPortMalloc+0xf4>
 8005e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	613b      	str	r3, [r7, #16]
 8005e76:	e7fe      	b.n	8005e76 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	1ad2      	subs	r2, r2, r3
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e8a:	69b8      	ldr	r0, [r7, #24]
 8005e8c:	f000 f8f6 	bl	800607c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e90:	4b1a      	ldr	r3, [pc, #104]	; (8005efc <pvPortMalloc+0x178>)
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	4a18      	ldr	r2, [pc, #96]	; (8005efc <pvPortMalloc+0x178>)
 8005e9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e9e:	4b17      	ldr	r3, [pc, #92]	; (8005efc <pvPortMalloc+0x178>)
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	4b18      	ldr	r3, [pc, #96]	; (8005f04 <pvPortMalloc+0x180>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d203      	bcs.n	8005eb2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005eaa:	4b14      	ldr	r3, [pc, #80]	; (8005efc <pvPortMalloc+0x178>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a15      	ldr	r2, [pc, #84]	; (8005f04 <pvPortMalloc+0x180>)
 8005eb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	4b10      	ldr	r3, [pc, #64]	; (8005ef8 <pvPortMalloc+0x174>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ec6:	f7fe fdc7 	bl	8004a58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	f003 0307 	and.w	r3, r3, #7
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d009      	beq.n	8005ee8 <pvPortMalloc+0x164>
 8005ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed8:	f383 8811 	msr	BASEPRI, r3
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	e7fe      	b.n	8005ee6 <pvPortMalloc+0x162>
	return pvReturn;
 8005ee8:	69fb      	ldr	r3, [r7, #28]
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3728      	adds	r7, #40	; 0x28
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20001924 	.word	0x20001924
 8005ef8:	20001930 	.word	0x20001930
 8005efc:	20001928 	.word	0x20001928
 8005f00:	2000191c 	.word	0x2000191c
 8005f04:	2000192c 	.word	0x2000192c

08005f08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d046      	beq.n	8005fa8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f1a:	2308      	movs	r3, #8
 8005f1c:	425b      	negs	r3, r3
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	4413      	add	r3, r2
 8005f22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	4b20      	ldr	r3, [pc, #128]	; (8005fb0 <vPortFree+0xa8>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4013      	ands	r3, r2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d109      	bne.n	8005f4a <vPortFree+0x42>
 8005f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3a:	f383 8811 	msr	BASEPRI, r3
 8005f3e:	f3bf 8f6f 	isb	sy
 8005f42:	f3bf 8f4f 	dsb	sy
 8005f46:	60fb      	str	r3, [r7, #12]
 8005f48:	e7fe      	b.n	8005f48 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d009      	beq.n	8005f66 <vPortFree+0x5e>
 8005f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	60bb      	str	r3, [r7, #8]
 8005f64:	e7fe      	b.n	8005f64 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	4b11      	ldr	r3, [pc, #68]	; (8005fb0 <vPortFree+0xa8>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d019      	beq.n	8005fa8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d115      	bne.n	8005fa8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	4b0b      	ldr	r3, [pc, #44]	; (8005fb0 <vPortFree+0xa8>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	43db      	mvns	r3, r3
 8005f86:	401a      	ands	r2, r3
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f8c:	f7fe fd56 	bl	8004a3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	4b07      	ldr	r3, [pc, #28]	; (8005fb4 <vPortFree+0xac>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4413      	add	r3, r2
 8005f9a:	4a06      	ldr	r2, [pc, #24]	; (8005fb4 <vPortFree+0xac>)
 8005f9c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f9e:	6938      	ldr	r0, [r7, #16]
 8005fa0:	f000 f86c 	bl	800607c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005fa4:	f7fe fd58 	bl	8004a58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005fa8:	bf00      	nop
 8005faa:	3718      	adds	r7, #24
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	20001930 	.word	0x20001930
 8005fb4:	20001928 	.word	0x20001928

08005fb8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005fbe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005fc2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005fc4:	4b27      	ldr	r3, [pc, #156]	; (8006064 <prvHeapInit+0xac>)
 8005fc6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f003 0307 	and.w	r3, r3, #7
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00c      	beq.n	8005fec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	3307      	adds	r3, #7
 8005fd6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f023 0307 	bic.w	r3, r3, #7
 8005fde:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	4a1f      	ldr	r2, [pc, #124]	; (8006064 <prvHeapInit+0xac>)
 8005fe8:	4413      	add	r3, r2
 8005fea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ff0:	4a1d      	ldr	r2, [pc, #116]	; (8006068 <prvHeapInit+0xb0>)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ff6:	4b1c      	ldr	r3, [pc, #112]	; (8006068 <prvHeapInit+0xb0>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	4413      	add	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006004:	2208      	movs	r2, #8
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	1a9b      	subs	r3, r3, r2
 800600a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f023 0307 	bic.w	r3, r3, #7
 8006012:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	4a15      	ldr	r2, [pc, #84]	; (800606c <prvHeapInit+0xb4>)
 8006018:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800601a:	4b14      	ldr	r3, [pc, #80]	; (800606c <prvHeapInit+0xb4>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2200      	movs	r2, #0
 8006020:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006022:	4b12      	ldr	r3, [pc, #72]	; (800606c <prvHeapInit+0xb4>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2200      	movs	r2, #0
 8006028:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	1ad2      	subs	r2, r2, r3
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006038:	4b0c      	ldr	r3, [pc, #48]	; (800606c <prvHeapInit+0xb4>)
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	4a0a      	ldr	r2, [pc, #40]	; (8006070 <prvHeapInit+0xb8>)
 8006046:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	4a09      	ldr	r2, [pc, #36]	; (8006074 <prvHeapInit+0xbc>)
 800604e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006050:	4b09      	ldr	r3, [pc, #36]	; (8006078 <prvHeapInit+0xc0>)
 8006052:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006056:	601a      	str	r2, [r3, #0]
}
 8006058:	bf00      	nop
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	bc80      	pop	{r7}
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	20000d1c 	.word	0x20000d1c
 8006068:	2000191c 	.word	0x2000191c
 800606c:	20001924 	.word	0x20001924
 8006070:	2000192c 	.word	0x2000192c
 8006074:	20001928 	.word	0x20001928
 8006078:	20001930 	.word	0x20001930

0800607c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006084:	4b27      	ldr	r3, [pc, #156]	; (8006124 <prvInsertBlockIntoFreeList+0xa8>)
 8006086:	60fb      	str	r3, [r7, #12]
 8006088:	e002      	b.n	8006090 <prvInsertBlockIntoFreeList+0x14>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	429a      	cmp	r2, r3
 8006098:	d8f7      	bhi.n	800608a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	4413      	add	r3, r2
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d108      	bne.n	80060be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	441a      	add	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	441a      	add	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d118      	bne.n	8006104 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	4b14      	ldr	r3, [pc, #80]	; (8006128 <prvInsertBlockIntoFreeList+0xac>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d00d      	beq.n	80060fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	441a      	add	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	e008      	b.n	800610c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80060fa:	4b0b      	ldr	r3, [pc, #44]	; (8006128 <prvInsertBlockIntoFreeList+0xac>)
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	e003      	b.n	800610c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	429a      	cmp	r2, r3
 8006112:	d002      	beq.n	800611a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800611a:	bf00      	nop
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	bc80      	pop	{r7}
 8006122:	4770      	bx	lr
 8006124:	2000191c 	.word	0x2000191c
 8006128:	20001924 	.word	0x20001924

0800612c <__libc_init_array>:
 800612c:	b570      	push	{r4, r5, r6, lr}
 800612e:	2500      	movs	r5, #0
 8006130:	4e0c      	ldr	r6, [pc, #48]	; (8006164 <__libc_init_array+0x38>)
 8006132:	4c0d      	ldr	r4, [pc, #52]	; (8006168 <__libc_init_array+0x3c>)
 8006134:	1ba4      	subs	r4, r4, r6
 8006136:	10a4      	asrs	r4, r4, #2
 8006138:	42a5      	cmp	r5, r4
 800613a:	d109      	bne.n	8006150 <__libc_init_array+0x24>
 800613c:	f000 fa9e 	bl	800667c <_init>
 8006140:	2500      	movs	r5, #0
 8006142:	4e0a      	ldr	r6, [pc, #40]	; (800616c <__libc_init_array+0x40>)
 8006144:	4c0a      	ldr	r4, [pc, #40]	; (8006170 <__libc_init_array+0x44>)
 8006146:	1ba4      	subs	r4, r4, r6
 8006148:	10a4      	asrs	r4, r4, #2
 800614a:	42a5      	cmp	r5, r4
 800614c:	d105      	bne.n	800615a <__libc_init_array+0x2e>
 800614e:	bd70      	pop	{r4, r5, r6, pc}
 8006150:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006154:	4798      	blx	r3
 8006156:	3501      	adds	r5, #1
 8006158:	e7ee      	b.n	8006138 <__libc_init_array+0xc>
 800615a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800615e:	4798      	blx	r3
 8006160:	3501      	adds	r5, #1
 8006162:	e7f2      	b.n	800614a <__libc_init_array+0x1e>
 8006164:	08006780 	.word	0x08006780
 8006168:	08006780 	.word	0x08006780
 800616c:	08006780 	.word	0x08006780
 8006170:	08006784 	.word	0x08006784

08006174 <memcpy>:
 8006174:	b510      	push	{r4, lr}
 8006176:	1e43      	subs	r3, r0, #1
 8006178:	440a      	add	r2, r1
 800617a:	4291      	cmp	r1, r2
 800617c:	d100      	bne.n	8006180 <memcpy+0xc>
 800617e:	bd10      	pop	{r4, pc}
 8006180:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006184:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006188:	e7f7      	b.n	800617a <memcpy+0x6>

0800618a <memset>:
 800618a:	4603      	mov	r3, r0
 800618c:	4402      	add	r2, r0
 800618e:	4293      	cmp	r3, r2
 8006190:	d100      	bne.n	8006194 <memset+0xa>
 8006192:	4770      	bx	lr
 8006194:	f803 1b01 	strb.w	r1, [r3], #1
 8006198:	e7f9      	b.n	800618e <memset+0x4>

0800619a <atan2>:
 800619a:	f000 b801 	b.w	80061a0 <__ieee754_atan2>
	...

080061a0 <__ieee754_atan2>:
 80061a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a4:	4256      	negs	r6, r2
 80061a6:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 80061aa:	4316      	orrs	r6, r2
 80061ac:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8006358 <__ieee754_atan2+0x1b8>
 80061b0:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 80061b4:	454e      	cmp	r6, r9
 80061b6:	4604      	mov	r4, r0
 80061b8:	460d      	mov	r5, r1
 80061ba:	469e      	mov	lr, r3
 80061bc:	d808      	bhi.n	80061d0 <__ieee754_atan2+0x30>
 80061be:	4246      	negs	r6, r0
 80061c0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80061c4:	4306      	orrs	r6, r0
 80061c6:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 80061ca:	454e      	cmp	r6, r9
 80061cc:	4688      	mov	r8, r1
 80061ce:	d906      	bls.n	80061de <__ieee754_atan2+0x3e>
 80061d0:	4620      	mov	r0, r4
 80061d2:	4629      	mov	r1, r5
 80061d4:	f7f9 ffc2 	bl	800015c <__adddf3>
 80061d8:	4604      	mov	r4, r0
 80061da:	460d      	mov	r5, r1
 80061dc:	e030      	b.n	8006240 <__ieee754_atan2+0xa0>
 80061de:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 80061e2:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80061e6:	4316      	orrs	r6, r2
 80061e8:	d103      	bne.n	80061f2 <__ieee754_atan2+0x52>
 80061ea:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ee:	f000 b8b7 	b.w	8006360 <atan>
 80061f2:	179e      	asrs	r6, r3, #30
 80061f4:	f006 0602 	and.w	r6, r6, #2
 80061f8:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80061fc:	ea57 0100 	orrs.w	r1, r7, r0
 8006200:	d107      	bne.n	8006212 <__ieee754_atan2+0x72>
 8006202:	2e02      	cmp	r6, #2
 8006204:	d079      	beq.n	80062fa <__ieee754_atan2+0x15a>
 8006206:	2e03      	cmp	r6, #3
 8006208:	d11a      	bne.n	8006240 <__ieee754_atan2+0xa0>
 800620a:	a541      	add	r5, pc, #260	; (adr r5, 8006310 <__ieee754_atan2+0x170>)
 800620c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006210:	e016      	b.n	8006240 <__ieee754_atan2+0xa0>
 8006212:	ea5c 0102 	orrs.w	r1, ip, r2
 8006216:	d106      	bne.n	8006226 <__ieee754_atan2+0x86>
 8006218:	f1b8 0f00 	cmp.w	r8, #0
 800621c:	da71      	bge.n	8006302 <__ieee754_atan2+0x162>
 800621e:	a53e      	add	r5, pc, #248	; (adr r5, 8006318 <__ieee754_atan2+0x178>)
 8006220:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006224:	e00c      	b.n	8006240 <__ieee754_atan2+0xa0>
 8006226:	45cc      	cmp	ip, r9
 8006228:	d123      	bne.n	8006272 <__ieee754_atan2+0xd2>
 800622a:	4567      	cmp	r7, ip
 800622c:	d114      	bne.n	8006258 <__ieee754_atan2+0xb8>
 800622e:	2e02      	cmp	r6, #2
 8006230:	d00a      	beq.n	8006248 <__ieee754_atan2+0xa8>
 8006232:	2e03      	cmp	r6, #3
 8006234:	d00c      	beq.n	8006250 <__ieee754_atan2+0xb0>
 8006236:	2e01      	cmp	r6, #1
 8006238:	d15b      	bne.n	80062f2 <__ieee754_atan2+0x152>
 800623a:	a539      	add	r5, pc, #228	; (adr r5, 8006320 <__ieee754_atan2+0x180>)
 800623c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006240:	4620      	mov	r0, r4
 8006242:	4629      	mov	r1, r5
 8006244:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006248:	a537      	add	r5, pc, #220	; (adr r5, 8006328 <__ieee754_atan2+0x188>)
 800624a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800624e:	e7f7      	b.n	8006240 <__ieee754_atan2+0xa0>
 8006250:	a537      	add	r5, pc, #220	; (adr r5, 8006330 <__ieee754_atan2+0x190>)
 8006252:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006256:	e7f3      	b.n	8006240 <__ieee754_atan2+0xa0>
 8006258:	2e02      	cmp	r6, #2
 800625a:	d04e      	beq.n	80062fa <__ieee754_atan2+0x15a>
 800625c:	2e03      	cmp	r6, #3
 800625e:	d0d4      	beq.n	800620a <__ieee754_atan2+0x6a>
 8006260:	2e01      	cmp	r6, #1
 8006262:	f04f 0400 	mov.w	r4, #0
 8006266:	d102      	bne.n	800626e <__ieee754_atan2+0xce>
 8006268:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800626c:	e7e8      	b.n	8006240 <__ieee754_atan2+0xa0>
 800626e:	2500      	movs	r5, #0
 8006270:	e7e6      	b.n	8006240 <__ieee754_atan2+0xa0>
 8006272:	454f      	cmp	r7, r9
 8006274:	d0d0      	beq.n	8006218 <__ieee754_atan2+0x78>
 8006276:	eba7 070c 	sub.w	r7, r7, ip
 800627a:	153f      	asrs	r7, r7, #20
 800627c:	2f3c      	cmp	r7, #60	; 0x3c
 800627e:	dc1e      	bgt.n	80062be <__ieee754_atan2+0x11e>
 8006280:	2b00      	cmp	r3, #0
 8006282:	da01      	bge.n	8006288 <__ieee754_atan2+0xe8>
 8006284:	373c      	adds	r7, #60	; 0x3c
 8006286:	db1e      	blt.n	80062c6 <__ieee754_atan2+0x126>
 8006288:	4620      	mov	r0, r4
 800628a:	4629      	mov	r1, r5
 800628c:	f7fa fa46 	bl	800071c <__aeabi_ddiv>
 8006290:	f000 f9f0 	bl	8006674 <fabs>
 8006294:	f000 f864 	bl	8006360 <atan>
 8006298:	4604      	mov	r4, r0
 800629a:	460d      	mov	r5, r1
 800629c:	2e01      	cmp	r6, #1
 800629e:	d015      	beq.n	80062cc <__ieee754_atan2+0x12c>
 80062a0:	2e02      	cmp	r6, #2
 80062a2:	d017      	beq.n	80062d4 <__ieee754_atan2+0x134>
 80062a4:	2e00      	cmp	r6, #0
 80062a6:	d0cb      	beq.n	8006240 <__ieee754_atan2+0xa0>
 80062a8:	a323      	add	r3, pc, #140	; (adr r3, 8006338 <__ieee754_atan2+0x198>)
 80062aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ae:	4620      	mov	r0, r4
 80062b0:	4629      	mov	r1, r5
 80062b2:	f7f9 ff51 	bl	8000158 <__aeabi_dsub>
 80062b6:	a322      	add	r3, pc, #136	; (adr r3, 8006340 <__ieee754_atan2+0x1a0>)
 80062b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062bc:	e016      	b.n	80062ec <__ieee754_atan2+0x14c>
 80062be:	a522      	add	r5, pc, #136	; (adr r5, 8006348 <__ieee754_atan2+0x1a8>)
 80062c0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80062c4:	e7ea      	b.n	800629c <__ieee754_atan2+0xfc>
 80062c6:	2400      	movs	r4, #0
 80062c8:	2500      	movs	r5, #0
 80062ca:	e7e7      	b.n	800629c <__ieee754_atan2+0xfc>
 80062cc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80062d0:	461d      	mov	r5, r3
 80062d2:	e7b5      	b.n	8006240 <__ieee754_atan2+0xa0>
 80062d4:	a318      	add	r3, pc, #96	; (adr r3, 8006338 <__ieee754_atan2+0x198>)
 80062d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062da:	4620      	mov	r0, r4
 80062dc:	4629      	mov	r1, r5
 80062de:	f7f9 ff3b 	bl	8000158 <__aeabi_dsub>
 80062e2:	4602      	mov	r2, r0
 80062e4:	460b      	mov	r3, r1
 80062e6:	a116      	add	r1, pc, #88	; (adr r1, 8006340 <__ieee754_atan2+0x1a0>)
 80062e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062ec:	f7f9 ff34 	bl	8000158 <__aeabi_dsub>
 80062f0:	e772      	b.n	80061d8 <__ieee754_atan2+0x38>
 80062f2:	a517      	add	r5, pc, #92	; (adr r5, 8006350 <__ieee754_atan2+0x1b0>)
 80062f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80062f8:	e7a2      	b.n	8006240 <__ieee754_atan2+0xa0>
 80062fa:	a511      	add	r5, pc, #68	; (adr r5, 8006340 <__ieee754_atan2+0x1a0>)
 80062fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006300:	e79e      	b.n	8006240 <__ieee754_atan2+0xa0>
 8006302:	a511      	add	r5, pc, #68	; (adr r5, 8006348 <__ieee754_atan2+0x1a8>)
 8006304:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006308:	e79a      	b.n	8006240 <__ieee754_atan2+0xa0>
 800630a:	bf00      	nop
 800630c:	f3af 8000 	nop.w
 8006310:	54442d18 	.word	0x54442d18
 8006314:	c00921fb 	.word	0xc00921fb
 8006318:	54442d18 	.word	0x54442d18
 800631c:	bff921fb 	.word	0xbff921fb
 8006320:	54442d18 	.word	0x54442d18
 8006324:	bfe921fb 	.word	0xbfe921fb
 8006328:	7f3321d2 	.word	0x7f3321d2
 800632c:	4002d97c 	.word	0x4002d97c
 8006330:	7f3321d2 	.word	0x7f3321d2
 8006334:	c002d97c 	.word	0xc002d97c
 8006338:	33145c07 	.word	0x33145c07
 800633c:	3ca1a626 	.word	0x3ca1a626
 8006340:	54442d18 	.word	0x54442d18
 8006344:	400921fb 	.word	0x400921fb
 8006348:	54442d18 	.word	0x54442d18
 800634c:	3ff921fb 	.word	0x3ff921fb
 8006350:	54442d18 	.word	0x54442d18
 8006354:	3fe921fb 	.word	0x3fe921fb
 8006358:	7ff00000 	.word	0x7ff00000
 800635c:	00000000 	.word	0x00000000

08006360 <atan>:
 8006360:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006364:	4bb6      	ldr	r3, [pc, #728]	; (8006640 <atan+0x2e0>)
 8006366:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800636a:	429e      	cmp	r6, r3
 800636c:	4604      	mov	r4, r0
 800636e:	460d      	mov	r5, r1
 8006370:	468b      	mov	fp, r1
 8006372:	dd17      	ble.n	80063a4 <atan+0x44>
 8006374:	4bb3      	ldr	r3, [pc, #716]	; (8006644 <atan+0x2e4>)
 8006376:	429e      	cmp	r6, r3
 8006378:	dc01      	bgt.n	800637e <atan+0x1e>
 800637a:	d109      	bne.n	8006390 <atan+0x30>
 800637c:	b140      	cbz	r0, 8006390 <atan+0x30>
 800637e:	4622      	mov	r2, r4
 8006380:	462b      	mov	r3, r5
 8006382:	4620      	mov	r0, r4
 8006384:	4629      	mov	r1, r5
 8006386:	f7f9 fee9 	bl	800015c <__adddf3>
 800638a:	4604      	mov	r4, r0
 800638c:	460d      	mov	r5, r1
 800638e:	e005      	b.n	800639c <atan+0x3c>
 8006390:	f1bb 0f00 	cmp.w	fp, #0
 8006394:	4cac      	ldr	r4, [pc, #688]	; (8006648 <atan+0x2e8>)
 8006396:	f340 8121 	ble.w	80065dc <atan+0x27c>
 800639a:	4dac      	ldr	r5, [pc, #688]	; (800664c <atan+0x2ec>)
 800639c:	4620      	mov	r0, r4
 800639e:	4629      	mov	r1, r5
 80063a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a4:	4baa      	ldr	r3, [pc, #680]	; (8006650 <atan+0x2f0>)
 80063a6:	429e      	cmp	r6, r3
 80063a8:	dc11      	bgt.n	80063ce <atan+0x6e>
 80063aa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80063ae:	429e      	cmp	r6, r3
 80063b0:	dc0a      	bgt.n	80063c8 <atan+0x68>
 80063b2:	a38b      	add	r3, pc, #556	; (adr r3, 80065e0 <atan+0x280>)
 80063b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b8:	f7f9 fed0 	bl	800015c <__adddf3>
 80063bc:	2200      	movs	r2, #0
 80063be:	4ba5      	ldr	r3, [pc, #660]	; (8006654 <atan+0x2f4>)
 80063c0:	f7fa fb12 	bl	80009e8 <__aeabi_dcmpgt>
 80063c4:	2800      	cmp	r0, #0
 80063c6:	d1e9      	bne.n	800639c <atan+0x3c>
 80063c8:	f04f 3aff 	mov.w	sl, #4294967295
 80063cc:	e027      	b.n	800641e <atan+0xbe>
 80063ce:	f000 f951 	bl	8006674 <fabs>
 80063d2:	4ba1      	ldr	r3, [pc, #644]	; (8006658 <atan+0x2f8>)
 80063d4:	4604      	mov	r4, r0
 80063d6:	429e      	cmp	r6, r3
 80063d8:	460d      	mov	r5, r1
 80063da:	f300 80b8 	bgt.w	800654e <atan+0x1ee>
 80063de:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80063e2:	429e      	cmp	r6, r3
 80063e4:	f300 809c 	bgt.w	8006520 <atan+0x1c0>
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	f7f9 feb6 	bl	800015c <__adddf3>
 80063f0:	2200      	movs	r2, #0
 80063f2:	4b98      	ldr	r3, [pc, #608]	; (8006654 <atan+0x2f4>)
 80063f4:	f7f9 feb0 	bl	8000158 <__aeabi_dsub>
 80063f8:	2200      	movs	r2, #0
 80063fa:	4606      	mov	r6, r0
 80063fc:	460f      	mov	r7, r1
 80063fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006402:	4620      	mov	r0, r4
 8006404:	4629      	mov	r1, r5
 8006406:	f7f9 fea9 	bl	800015c <__adddf3>
 800640a:	4602      	mov	r2, r0
 800640c:	460b      	mov	r3, r1
 800640e:	4630      	mov	r0, r6
 8006410:	4639      	mov	r1, r7
 8006412:	f7fa f983 	bl	800071c <__aeabi_ddiv>
 8006416:	f04f 0a00 	mov.w	sl, #0
 800641a:	4604      	mov	r4, r0
 800641c:	460d      	mov	r5, r1
 800641e:	4622      	mov	r2, r4
 8006420:	462b      	mov	r3, r5
 8006422:	4620      	mov	r0, r4
 8006424:	4629      	mov	r1, r5
 8006426:	f7fa f84f 	bl	80004c8 <__aeabi_dmul>
 800642a:	4602      	mov	r2, r0
 800642c:	460b      	mov	r3, r1
 800642e:	4680      	mov	r8, r0
 8006430:	4689      	mov	r9, r1
 8006432:	f7fa f849 	bl	80004c8 <__aeabi_dmul>
 8006436:	a36c      	add	r3, pc, #432	; (adr r3, 80065e8 <atan+0x288>)
 8006438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643c:	4606      	mov	r6, r0
 800643e:	460f      	mov	r7, r1
 8006440:	f7fa f842 	bl	80004c8 <__aeabi_dmul>
 8006444:	a36a      	add	r3, pc, #424	; (adr r3, 80065f0 <atan+0x290>)
 8006446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644a:	f7f9 fe87 	bl	800015c <__adddf3>
 800644e:	4632      	mov	r2, r6
 8006450:	463b      	mov	r3, r7
 8006452:	f7fa f839 	bl	80004c8 <__aeabi_dmul>
 8006456:	a368      	add	r3, pc, #416	; (adr r3, 80065f8 <atan+0x298>)
 8006458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645c:	f7f9 fe7e 	bl	800015c <__adddf3>
 8006460:	4632      	mov	r2, r6
 8006462:	463b      	mov	r3, r7
 8006464:	f7fa f830 	bl	80004c8 <__aeabi_dmul>
 8006468:	a365      	add	r3, pc, #404	; (adr r3, 8006600 <atan+0x2a0>)
 800646a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646e:	f7f9 fe75 	bl	800015c <__adddf3>
 8006472:	4632      	mov	r2, r6
 8006474:	463b      	mov	r3, r7
 8006476:	f7fa f827 	bl	80004c8 <__aeabi_dmul>
 800647a:	a363      	add	r3, pc, #396	; (adr r3, 8006608 <atan+0x2a8>)
 800647c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006480:	f7f9 fe6c 	bl	800015c <__adddf3>
 8006484:	4632      	mov	r2, r6
 8006486:	463b      	mov	r3, r7
 8006488:	f7fa f81e 	bl	80004c8 <__aeabi_dmul>
 800648c:	a360      	add	r3, pc, #384	; (adr r3, 8006610 <atan+0x2b0>)
 800648e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006492:	f7f9 fe63 	bl	800015c <__adddf3>
 8006496:	4642      	mov	r2, r8
 8006498:	464b      	mov	r3, r9
 800649a:	f7fa f815 	bl	80004c8 <__aeabi_dmul>
 800649e:	a35e      	add	r3, pc, #376	; (adr r3, 8006618 <atan+0x2b8>)
 80064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a4:	4680      	mov	r8, r0
 80064a6:	4689      	mov	r9, r1
 80064a8:	4630      	mov	r0, r6
 80064aa:	4639      	mov	r1, r7
 80064ac:	f7fa f80c 	bl	80004c8 <__aeabi_dmul>
 80064b0:	a35b      	add	r3, pc, #364	; (adr r3, 8006620 <atan+0x2c0>)
 80064b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b6:	f7f9 fe4f 	bl	8000158 <__aeabi_dsub>
 80064ba:	4632      	mov	r2, r6
 80064bc:	463b      	mov	r3, r7
 80064be:	f7fa f803 	bl	80004c8 <__aeabi_dmul>
 80064c2:	a359      	add	r3, pc, #356	; (adr r3, 8006628 <atan+0x2c8>)
 80064c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c8:	f7f9 fe46 	bl	8000158 <__aeabi_dsub>
 80064cc:	4632      	mov	r2, r6
 80064ce:	463b      	mov	r3, r7
 80064d0:	f7f9 fffa 	bl	80004c8 <__aeabi_dmul>
 80064d4:	a356      	add	r3, pc, #344	; (adr r3, 8006630 <atan+0x2d0>)
 80064d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064da:	f7f9 fe3d 	bl	8000158 <__aeabi_dsub>
 80064de:	4632      	mov	r2, r6
 80064e0:	463b      	mov	r3, r7
 80064e2:	f7f9 fff1 	bl	80004c8 <__aeabi_dmul>
 80064e6:	a354      	add	r3, pc, #336	; (adr r3, 8006638 <atan+0x2d8>)
 80064e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ec:	f7f9 fe34 	bl	8000158 <__aeabi_dsub>
 80064f0:	4632      	mov	r2, r6
 80064f2:	463b      	mov	r3, r7
 80064f4:	f7f9 ffe8 	bl	80004c8 <__aeabi_dmul>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4640      	mov	r0, r8
 80064fe:	4649      	mov	r1, r9
 8006500:	f7f9 fe2c 	bl	800015c <__adddf3>
 8006504:	4622      	mov	r2, r4
 8006506:	462b      	mov	r3, r5
 8006508:	f7f9 ffde 	bl	80004c8 <__aeabi_dmul>
 800650c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	d144      	bne.n	80065a0 <atan+0x240>
 8006516:	4620      	mov	r0, r4
 8006518:	4629      	mov	r1, r5
 800651a:	f7f9 fe1d 	bl	8000158 <__aeabi_dsub>
 800651e:	e734      	b.n	800638a <atan+0x2a>
 8006520:	2200      	movs	r2, #0
 8006522:	4b4c      	ldr	r3, [pc, #304]	; (8006654 <atan+0x2f4>)
 8006524:	f7f9 fe18 	bl	8000158 <__aeabi_dsub>
 8006528:	2200      	movs	r2, #0
 800652a:	4606      	mov	r6, r0
 800652c:	460f      	mov	r7, r1
 800652e:	4b49      	ldr	r3, [pc, #292]	; (8006654 <atan+0x2f4>)
 8006530:	4620      	mov	r0, r4
 8006532:	4629      	mov	r1, r5
 8006534:	f7f9 fe12 	bl	800015c <__adddf3>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4630      	mov	r0, r6
 800653e:	4639      	mov	r1, r7
 8006540:	f7fa f8ec 	bl	800071c <__aeabi_ddiv>
 8006544:	f04f 0a01 	mov.w	sl, #1
 8006548:	4604      	mov	r4, r0
 800654a:	460d      	mov	r5, r1
 800654c:	e767      	b.n	800641e <atan+0xbe>
 800654e:	4b43      	ldr	r3, [pc, #268]	; (800665c <atan+0x2fc>)
 8006550:	429e      	cmp	r6, r3
 8006552:	dc1a      	bgt.n	800658a <atan+0x22a>
 8006554:	2200      	movs	r2, #0
 8006556:	4b42      	ldr	r3, [pc, #264]	; (8006660 <atan+0x300>)
 8006558:	f7f9 fdfe 	bl	8000158 <__aeabi_dsub>
 800655c:	2200      	movs	r2, #0
 800655e:	4606      	mov	r6, r0
 8006560:	460f      	mov	r7, r1
 8006562:	4b3f      	ldr	r3, [pc, #252]	; (8006660 <atan+0x300>)
 8006564:	4620      	mov	r0, r4
 8006566:	4629      	mov	r1, r5
 8006568:	f7f9 ffae 	bl	80004c8 <__aeabi_dmul>
 800656c:	2200      	movs	r2, #0
 800656e:	4b39      	ldr	r3, [pc, #228]	; (8006654 <atan+0x2f4>)
 8006570:	f7f9 fdf4 	bl	800015c <__adddf3>
 8006574:	4602      	mov	r2, r0
 8006576:	460b      	mov	r3, r1
 8006578:	4630      	mov	r0, r6
 800657a:	4639      	mov	r1, r7
 800657c:	f7fa f8ce 	bl	800071c <__aeabi_ddiv>
 8006580:	f04f 0a02 	mov.w	sl, #2
 8006584:	4604      	mov	r4, r0
 8006586:	460d      	mov	r5, r1
 8006588:	e749      	b.n	800641e <atan+0xbe>
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	2000      	movs	r0, #0
 8006590:	4934      	ldr	r1, [pc, #208]	; (8006664 <atan+0x304>)
 8006592:	f7fa f8c3 	bl	800071c <__aeabi_ddiv>
 8006596:	f04f 0a03 	mov.w	sl, #3
 800659a:	4604      	mov	r4, r0
 800659c:	460d      	mov	r5, r1
 800659e:	e73e      	b.n	800641e <atan+0xbe>
 80065a0:	4b31      	ldr	r3, [pc, #196]	; (8006668 <atan+0x308>)
 80065a2:	4e32      	ldr	r6, [pc, #200]	; (800666c <atan+0x30c>)
 80065a4:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80065a8:	4456      	add	r6, sl
 80065aa:	449a      	add	sl, r3
 80065ac:	e9da 2300 	ldrd	r2, r3, [sl]
 80065b0:	f7f9 fdd2 	bl	8000158 <__aeabi_dsub>
 80065b4:	4622      	mov	r2, r4
 80065b6:	462b      	mov	r3, r5
 80065b8:	f7f9 fdce 	bl	8000158 <__aeabi_dsub>
 80065bc:	4602      	mov	r2, r0
 80065be:	460b      	mov	r3, r1
 80065c0:	e9d6 0100 	ldrd	r0, r1, [r6]
 80065c4:	f7f9 fdc8 	bl	8000158 <__aeabi_dsub>
 80065c8:	f1bb 0f00 	cmp.w	fp, #0
 80065cc:	4604      	mov	r4, r0
 80065ce:	460d      	mov	r5, r1
 80065d0:	f6bf aee4 	bge.w	800639c <atan+0x3c>
 80065d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065d8:	461d      	mov	r5, r3
 80065da:	e6df      	b.n	800639c <atan+0x3c>
 80065dc:	4d24      	ldr	r5, [pc, #144]	; (8006670 <atan+0x310>)
 80065de:	e6dd      	b.n	800639c <atan+0x3c>
 80065e0:	8800759c 	.word	0x8800759c
 80065e4:	7e37e43c 	.word	0x7e37e43c
 80065e8:	e322da11 	.word	0xe322da11
 80065ec:	3f90ad3a 	.word	0x3f90ad3a
 80065f0:	24760deb 	.word	0x24760deb
 80065f4:	3fa97b4b 	.word	0x3fa97b4b
 80065f8:	a0d03d51 	.word	0xa0d03d51
 80065fc:	3fb10d66 	.word	0x3fb10d66
 8006600:	c54c206e 	.word	0xc54c206e
 8006604:	3fb745cd 	.word	0x3fb745cd
 8006608:	920083ff 	.word	0x920083ff
 800660c:	3fc24924 	.word	0x3fc24924
 8006610:	5555550d 	.word	0x5555550d
 8006614:	3fd55555 	.word	0x3fd55555
 8006618:	2c6a6c2f 	.word	0x2c6a6c2f
 800661c:	bfa2b444 	.word	0xbfa2b444
 8006620:	52defd9a 	.word	0x52defd9a
 8006624:	3fadde2d 	.word	0x3fadde2d
 8006628:	af749a6d 	.word	0xaf749a6d
 800662c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006630:	fe231671 	.word	0xfe231671
 8006634:	3fbc71c6 	.word	0x3fbc71c6
 8006638:	9998ebc4 	.word	0x9998ebc4
 800663c:	3fc99999 	.word	0x3fc99999
 8006640:	440fffff 	.word	0x440fffff
 8006644:	7ff00000 	.word	0x7ff00000
 8006648:	54442d18 	.word	0x54442d18
 800664c:	3ff921fb 	.word	0x3ff921fb
 8006650:	3fdbffff 	.word	0x3fdbffff
 8006654:	3ff00000 	.word	0x3ff00000
 8006658:	3ff2ffff 	.word	0x3ff2ffff
 800665c:	40037fff 	.word	0x40037fff
 8006660:	3ff80000 	.word	0x3ff80000
 8006664:	bff00000 	.word	0xbff00000
 8006668:	08006760 	.word	0x08006760
 800666c:	08006740 	.word	0x08006740
 8006670:	bff921fb 	.word	0xbff921fb

08006674 <fabs>:
 8006674:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006678:	4619      	mov	r1, r3
 800667a:	4770      	bx	lr

0800667c <_init>:
 800667c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667e:	bf00      	nop
 8006680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006682:	bc08      	pop	{r3}
 8006684:	469e      	mov	lr, r3
 8006686:	4770      	bx	lr

08006688 <_fini>:
 8006688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800668a:	bf00      	nop
 800668c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800668e:	bc08      	pop	{r3}
 8006690:	469e      	mov	lr, r3
 8006692:	4770      	bx	lr
